@{
    ViewBag.Title = "";
    ViewBag.Title1 = "Bem Vindo ao módulo BI!";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<script type="text/javascript">

    document.querySelector('html').style.minWidth = "1300px";

</script>

<style type="text/css">
    .webgrid-table {
        font-family: "Trebuchet MS", Arial, Helvetica, sans-serif;
        font-size: 13px;
        width: 100%;
        display: table;
        border: solid 1px #FFFFFF;
        background-color: white;
        text-align: left;
        /*table-layout: fixed;*/
       
    }
    .GRAVAR {
        font-family: "Trebuchet MS", Arial, Helvetica, sans-serif;
        font-size: 15px;
        color: #eaf2d3;
        background-color: #d2d4f1;
    }

    .versao_selec {
        background-color: #E3DFFF;
        text-align: center;
    }

    .input {
        width: 50px;
        height: 25px;
        text-align: justify;
        background-color: #EAF2D3;
        padding: 3px 4px 2px;
        text-overflow: clip;
    }

    .titulos_mapas {
        background-color: #7F7F7F;
        text-align: left;
        color: #FFFFFF;
        vertical-align: middle;
        font-size: 22px;
        font-weight: bold;
        border: solid 1px #7F7F7F;
       
    }

     .nao_mostrar {visibility:hidden;}
     .mostrar {visibility:visible;}
  
/* Semáforo CSS vertical */

ul.semaforo {
float:left;
position: relative;
width: 10px;
margin: 0 25px;
padding: 15px;
list-style-type: none;
border: 6px double grey;
background: black;
background: linear-gradient( -90deg, #45484d 0%, #000000 100%);
border-radius: 20%;
box-shadow: 0px 0px 0 6px rgba(127,127,127,.8);
}
ul.semaforo li {
position:relative;
width: 20px;
height: 20px;
border-radius: 50%;
background: white;
margin: 8px -4px;
background: linear-gradient(top, rgba(187,187,187,1) 0%,rgba(119,119,119,1) 99%);
box-shadow: inset 0 -5px 15px rgba(255,255,255,0.4),
inset -2px -1px 40px rgba(0,0,0,0.1),
0 0 1px #000;
}
ul.semaforo li:after {
content: "";
width: 5px;
height: 2.5px;
position: absolute;
left: 3px;
top: 1.5px;
box-shadow: 0px 0 20px 35px rgba(20,20,20,.1);
border-radius: 30px / 15px;
}
.vermelho li:nth-of-type(1) {
background: #ff0000;
}
.amarelo li:nth-of-type(2) {
background: #fff533;
}
.verde li:nth-of-type(3) {
background: #00ff00;
}

/*NOTA table::after CSS param TOOLTIPS*/

.tooltip {
  position: relative;
  /*display: inline-block;*/
  /*border-bottom: 1px dotted black;*/
}

.tooltip .tooltiptext {
  visibility: hidden;
  /*width: 125px;*/
  width: 240px;
  background-color: #555;
  color: #fff;
  text-align: center;
  border-radius: 6px;
  padding: 5px 0;
  position: absolute;
  z-index: 1;
  bottom: 125%;
  left: 50%;
  /*margin-left: -60px;*/
  margin-left: -10px;
  opacity: 0;
  transition: opacity 1s;
}

.tooltip .tooltiptext::after {
  content: "";
  position: absolute;
  top: 100%;
  /*left: 50%;*/
  left: 5%;
  margin-left: -5px;
  border-width: 5px;
  border-style: solid;
  border-color: #555 transparent transparent transparent;
}

.tooltip:hover .tooltiptext {
  visibility: visible;
  opacity: 1;
}


/*NOTA table::AQUI DEFINO  O  STYLE DOS BOTÕES*/

.btn:focus, .btn::-moz-focus-inner{
  outline:none;
  border:none;
}
.btn{
  font-family: arial;
  font-size:14px;
  text-transform: uppercase;
  font-weight:700;
  border:none;
  padding:10px;
  cursor: pointer;
  display:inline-block;
  text-decoration: none;
  width: auto;
}
.btn-green{
  background:green;
  color:#fff;
   border:#fff;
  box-shadow:0 5px 0 #006000 /*rgba(0, 96, 0, 0.6)*/;
    width: auto;
}
.btn-green:hover{
  background:#006000;
  box-shadow:0 5px 0 #003f00;
}
.btn-blue{
  background:rgba(0,0,139, 0.6);
  color:#fff;
   border:#fff;
  box-shadow:0 5px 0 rgba(0,0,59, 0.6);
    width: auto;
}
.btn-blue:hover{
  background:#2153a2;
  box-shadow:0 5px 0 #00003B;
}
.btn-purple{
  background:purple; opacity:0.6;
  border:#fff;
  color:#fff;
  box-shadow:0 5px 0 #670167 /*rgba(103, 1, 103, 0.6)*/;
    width: auto;
}
.btn-purple:hover{
  background:#670167;
  box-shadow:0 5px 0 #470047;
}
.btn-red{
  background:red; opacity:0.7;
  border:#fff;
  color:#fff;
  box-shadow:0 5px 0 #d20000 /*rgba(210, 0, 0, 0.6)*/;
    width: auto;
}
.btn-red:hover{
  background:#d20000;
  box-shadow:0 5px 0 #b00000;
}
.btn-orange{
  background:rgb(204 , 112 , 0); opacity:0.6;
  border:#fff;
  color:#fff;
  box-shadow:0 5px 0 rgb(204 , 112 , 0)/*rgba(210, 0, 0, 0.6)*/;
    width: auto;
}
.btn-orange:hover{
  background:rgb(204 , 112 , 0);
  box-shadow:0 5px 0 rgb(204 , 112 , 0);
}
.btn-brown{
  background:rgb(102, 0, 0); opacity:0.6;
  border:#fff;
  color:#fff;
  box-shadow:0 5px 0 rgb(102, 0, 0)/*rgba(210, 0, 0, 0.6)*/;
    width: auto;
}
.btn-brown:hover{
  background:rgb(102, 0, 0);
  box-shadow:0 5px 0 rgb(102, 0, 0);
}
.btn-green:active,.btn-blue:active, .btn-purple:active, .btn-red:active, .btn-orange:active, .btn-brown:active{
  position:relative;
  top:5px;
  box-shadow:inherit;
}
</style>

<hgroup class="title">
    <h1>@ViewBag.Title</h1>
    <h2>@ViewBag.Title1</h2>
</hgroup>

<!-- Cambia el color en la clase por verde, naranja o rojo (también combinados) -->


    @*<h3>DEFINA AQUI OS PARAMETROS:</h3>*@
<div class="tooltip">

            @using (Html.BeginForm("BI_CONF_PARAMETROS", "BI", new { Pesquisa_User = "tjalmeida" }, FormMethod.Post, null))
            {

                <button class="btn-brown" type="submit"> PARAMETROS</button>
            }
</div>

<table class="webgrid-table" border="1" style="text-align:center">


   


    <tr class="titulos_mapas"  style="border: solid 1px #7F7F7F">
        <td style="border: solid 1px #7F7F7F"> </td>
        <td class="titulos_mapas" style="border: solid 1px #7F7F7F">  <h3 style="color:#FFFFFF; text-align:center">COMPARATIVO</h3>    </td>
        <td class="titulos_mapas" style="border: solid 1px #7F7F7F">  <h3 style="color:#FFFFFF" > | </h3>       </td>
        <td class="titulos_mapas" style="border: solid 1px #7F7F7F">  <h3 style="color:#FFFFFF; text-align:center">ACTUAL</h3>     </td>
        <td class="titulos_mapas" style="border: solid 1px #7F7F7F">  <h3 style="color:#FFFFFF"> | </h3>       </td>
        <td class="titulos_mapas" style="border: solid 1px #7F7F7F">  <h3 style="color:#FFFFFF; text-align:center">HOMÓLOGO</h3>     </td>
        <td class="titulos_mapas" style="border: solid 1px #7F7F7F">  <h3 style="color:#FFFFFF"> | </h3>       </td>
        <td style="width:130px ;border: solid 1px #7F7F7F">
            <h3 style="color:#FFFFFF">NCRF´s</h3>
        </td>
    </tr>
    <tr>
        <td></td>
        <td style="text-align:right; height:100%; vertical-align:top">
            <h4 style="vertical-align:bottom; padding-top:10px;padding-bottom:10px">Selecione a Versão:</h4>
        </td>

        <td>  <h4>  </h4>       </td>
        <td style="vertical-align:top">
            <h4 colspan="2" style="text-align:center;padding-bottom:10px">
                @using (Html.BeginForm("BI_SELECCAO_VERSAO_USER_ALT", "BI", new { Pesquisa_User = "tjalmeida", id_camp = @ViewData["id_real"], FormMethod.Get }))

            {@Html.DropDownList("versao_selec", new SelectList(ViewBag.LISTA_VERSAO, "id_versao", "desc_versao", @ViewData["versao_real"]), new { @class = "form -control", @style = "width:230px; height:30px", onchange = "this.form.submit();" })
                    @*<button type="submit" class="btn-green">Alterar</button>*@ 
                }
            </h4>
        </td>
        <td>  <h4> </h4>       </td>
        <td style="vertical-align:top">
            <h4 colspan="2" style="text-align:center;padding-bottom:10px">
                @using (Html.BeginForm("BI_SELECCAO_VERSAO_USER_ALT", "BI", new { Pesquisa_User = "tjalmeida", id_camp = @ViewData["id_ante"], FormMethod.Get }))

            {@Html.DropDownList("versao_selec", new SelectList(ViewBag.LISTA_VERSAO, "id_versao", "desc_versao", @ViewData["versao_ante"]), new { @class = "form -control", @style = "width:230px; height:30px", onchange = "this.form.submit();" })
                    @*<button type="submit" class="btn-green">Alterar</button>*@ 
                }
            </h4>

        </td>
        <td>  <h4>  </h4>       </td>
        <td>
            <h4></h4>
        </td>

    </tr>
    @*<tr> <td class="titulos_mapas" colspan="8" style="text-align:center"> Relatórios Resumidos </td> </tr>*@
    <tr>
        <td></td>
        <td style="text-align:right; height:100%; vertical-align:top;padding-top:20px;padding-bottom:20px" >
           
            <div class="tooltip">
                <span class="tooltiptext">Clique no botão abaixo para obter o Relatório Resumido em PDF do comparativo para os anos de @ViewData["ANO_VERSAO_REAL"] e @ViewData["ANO_VERSAO_ANTE"].  </span>
                @using (Html.BeginForm("PDF_RELATORIO_RESUMIDO", "BI", new { Pesquisa_User = "tjalmeida", Titulo_relatorio1 = "RELATÓRIO RESUMIDO" }, FormMethod.Post, null))
            {

                    <button type="submit" class="btn-purple"> RELATÓRIO RESUMIDO @ViewData["ANO_VERSAO_REAL"] vs @ViewData["ANO_VERSAO_ANTE"]</button>
                }
            </div>
            @*<h4> </h4>*@
            
        </td>

        <td>  <h4>  </h4>       </td>
        <td style="vertical-align:top;padding-top:20px;padding-bottom:20px">

            <div class="tooltip">
                <span class="tooltiptext">Clique no botão abaixo para obter o Relatório Resumido em PDF do ano de @ViewData["ANO_VERSAO_REAL"].  </span>
                @using (Html.BeginForm("PDF_RELATORIO_RESUMIDO_REAL", "BI", new { Pesquisa_User = "tjalmeida", Titulo_relatorio1 = "RELATÓRIO RESUMIDO" }, FormMethod.Post, null))
            {

                    <button type="submit" class="btn-purple"> RELATÓRIO RESUMIDO @ViewData["ANO_VERSAO_REAL"] </button>
                }
            </div>
            @*<h4 style="vertical-align:bottom; width:100%" class="tooltip">
                <span class="tooltiptext">Clique para selecionar outra versão, pressionando a tecla Enter para Gravar. </span>
                <div id="grid00conf" class="nao_mostrar">

                    @Html.Action("BI_SELECCAO_VERSAO_USER_Result", "BI", new { Pesquisa_User = "tjalmeida", Dimensao_real = "VERSAO_REAL_DFS" })

                </div>
            </h4>*@

</td>
        <td>  <h4> </h4>       </td>
        <td style="vertical-align:top;padding-top:20px;padding-bottom:20px">
            <div class="tooltip">
                <span class="tooltiptext">Clique no botão abaixo para obter o Relatório Resumido em PDF do ano de @ViewData["ANO_VERSAO_ANTE"].  </span>
                @using (Html.BeginForm("PDF_RELATORIO_RESUMIDO_ANTE", "BI", new { Pesquisa_User = "tjalmeida", Titulo_relatorio1 = "RELATÓRIO RESUMIDO", Tipo_versao = "versao_ante" }, FormMethod.Post, null))
            {

                    <button type="submit" class="btn-purple"> RELATÓRIO RESUMIDO @ViewData["ANO_VERSAO_ANTE"] </button>
                }
                 </div> 
                @*<h4 style="vertical-align:bottom; width:100%" class="tooltip">
                    <span class="tooltiptext">Clique para selecionar outra versão, pressionando a tecla Enter para Gravar.  </span>
                    <div id="grid01conf" class="nao_mostrar">

                        @Html.Action("BI_SELECCAO_VERSAO_USER_Result", "BI", new { Pesquisa_User = "tjalmeida", Dimensao_ante = "VERSAO_ANTE_DFS" })

                    </div>
                </h4>*@
</td>
        <td>  <h4>  </h4>       </td>
        <td>
            <h4></h4>
        </td>
            
    </tr>
    <tr> <td class="titulos_mapas" colspan="8" style="text-align:center"> Demonstração de Resultados </td> </tr>
    <tr>
        <td>

            <ul id="semaforo_dem_result" class="semaforo" >
                <li></li>
                <li></li>
                <li></li>
            </ul> 
        </td>
        <td style="width:336px">

            <div style="width:336px;text-align: center">
                <table style="width:100%;text-align: center">
                    <tr style="text-align: center;width: 100%">
                        <td style="width: 50%" class="tooltip">
                            <span class="tooltiptext">Clique no botão abaixo para aceder à análise comparativa da Demonstração de Resultados entre os anos de @ViewData["ANO_VERSAO_REAL"] e @ViewData["ANO_VERSAO_ANTE"].  </span>
                            @using (Html.BeginForm("DEM_RESULT_MENSAL_COMP", "BI", new { Pesquisa_User = "tjalmeida", desativa_datatable = 0 }, FormMethod.Post, null))
            {

                                <button type="submit" class="btn-green"> @ViewData["ANO_VERSAO_REAL"] vs @ViewData["ANO_VERSAO_ANTE"]</button>
                            }
                        </td>
                        <td style="width: 50%" class="tooltip">
                            <span class="tooltiptext">Clique no botão abaixo para obter o Relatório comparativo em PDF da Demonstração de Resultados entre os anos de @ViewData["ANO_VERSAO_REAL"] e @ViewData["ANO_VERSAO_ANTE"].  </span>
                            @using (Html.BeginForm("PDF_DEM_RESULT_MENSAL_COMP_REL", "BI", new { Pesquisa_User = "tjalmeida", Titulo_relatorio1 = "RELATÓRIO DE DEMONSTRAÇÃO DE RESULTADOS" }, FormMethod.Post, null))
                            {

                                <button type="submit" class="btn-blue">RELATÓRIO</button>

                            }
                        </td>
                                     <td>            <div  class="tooltip">  <img src="~/images/informação.png" style="width:35px;height:35px" />   <span class="tooltiptext"> 
  O Volume de Negócios, em termos acumulados (de Jan a @Html.Raw(ViewData["MES_ACUM_REAL_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_REAL"])), atingiu o valor de 
             @if (@ViewData["VENDAS_REAL_ACUM"].Equals("calc") || @ViewData["VENDAS_ANTE_ACUM"].Equals("calc") || @ViewData["PREST_SERV_REAL_ACUM"].Equals("calc") || @ViewData["PREST_SERV_ANTE_ACUM"].Equals("calc")) { <text>    -</text>  } else {@Html.Raw((string.Format("{0:N}",(Convert.ToDecimal(@ViewData["VENDAS_REAL_ACUM"])+Convert.ToDecimal(@ViewData["PREST_SERV_REAL_ACUM"])))))} €,
         sendo que no período (de Jan a @Html.Raw(ViewData["MES_ACUM_ANTE_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_ANTE"])) atingiu o valor de 
             @if (@ViewData["VENDAS_REAL_ACUM"].Equals("calc") || @ViewData["VENDAS_ANTE_ACUM"].Equals("calc") || @ViewData["PREST_SERV_REAL_ACUM"].Equals("calc") || @ViewData["PREST_SERV_ANTE_ACUM"].Equals("calc")) { <text>    -</text>  } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["VENDAS_ANTE_ACUM"]) + Convert.ToDecimal(@ViewData["PREST_SERV_ANTE_ACUM"])))))} €,
         verificando-se @if (@ViewData["VENDAS_REAL_ACUM"].Equals("calc") || @ViewData["VENDAS_ANTE_ACUM"].Equals("calc") || @ViewData["PREST_SERV_REAL_ACUM"].Equals("calc") || @ViewData["PREST_SERV_ANTE_ACUM"].Equals("calc")) { <text>    -</text>  } else {if ((Convert.ToDecimal(@ViewData["VENDAS_REAL_ACUM"]) + Convert.ToDecimal(@ViewData["PREST_SERV_REAL_ACUM"])) >= (Convert.ToDecimal(@ViewData["VENDAS_ANTE_ACUM"]) + Convert.ToDecimal(@ViewData["PREST_SERV_ANTE_ACUM"])))         {  <text> um crescimento de </text> ; }  else   {  <text> uma diminuição de </text>  ; }}
         @if (@ViewData["VENDAS_REAL_ACUM"].Equals("calc") || @ViewData["VENDAS_ANTE_ACUM"].Equals("calc") || @ViewData["PREST_SERV_REAL_ACUM"].Equals("calc") || @ViewData["PREST_SERV_ANTE_ACUM"].Equals("calc")) { <text>    -</text>  } else { if ((Convert.ToInt32(@ViewData["VENDAS_ANTE_ACUM"]) + Convert.ToInt32(@ViewData["PREST_SERV_ANTE_ACUM"])).Equals(0)){<text> 100 %</text>  } else { decimal VN_REAL_ACUM = Convert.ToInt32(@ViewData["VENDAS_REAL_ACUM"]) + Convert.ToInt32(@ViewData["PREST_SERV_REAL_ACUM"]); decimal VN_ANTE_ACUM = Convert.ToInt32(@ViewData["VENDAS_ANTE_ACUM"]) + Convert.ToInt32(@ViewData["PREST_SERV_ANTE_ACUM"]); @Html.Raw((string.Format("{0:N}", ((VN_REAL_ACUM / VN_ANTE_ACUM) * 100) - 100))) <text>%</text>} }.
 </span>
            </div>
                        </td>
                    </tr>
                </table>
            </div>
            <canvas type="submit" id="GRAFICO_DEM_RESULT_MENSAL_COMP"></canvas>
           
        </td>
        <td>    </td>

        <td style="width:336px">

            <div style="width:336px;text-align: center">
                <table style="width:100%;text-align: center">
                    <tr style="text-align: center;width: 100%">
                        <td style="width: 50%">
                            @using (Html.BeginForm("DEM_RESULT_MENSAL", "BI", new { Pesquisa_User = "tjalmeida", desativa_datatable = 0 }, FormMethod.Post, null))
            {

                                <button type="submit" class="btn-green"> @ViewData["ANO_VERSAO_REAL"] </button>
                            }
                        </td>
                        <td style="width: 50%">
                            @using (Html.BeginForm("PDF_DEM_RESULT_MENSAL_REL", "BI", new { Pesquisa_User = "tjalmeida", Titulo_relatorio1 = "RELATÓRIO DE DEMONSTRAÇÃO DE RESULTADOS" }, FormMethod.Post, null))
                            {

                                <button type="submit" class="btn-blue">RELATÓRIO</button>

                            }
                        </td>
                    </tr>
                </table>
            </div>
            <canvas id="GRAFICO_DEM_RESULT_MENSAL_1"></canvas>
        </td>
        <td>    </td>
        <td style="width:336px">

            <div style="width:336px;text-align: center">
                <table style="width:100%;text-align: center">
                    <tr style="text-align: center;width: 100%">
                        <td style="width: 50%">
                            @using (Html.BeginForm("DEM_RESULT_MENSAL_2", "BI", new { Pesquisa_User = "tjalmeida", desativa_datatable = 0 }, FormMethod.Post, null))
            {
                                <button type="submit" class="btn-green"> @ViewData["ANO_VERSAO_ANTE"] </button>
                            }
                        </td>
                        <td style="width: 50%">
                            @using (Html.BeginForm("PDF_DEM_RESULT_MENSAL_2_REL", "BI", new { Pesquisa_User = "tjalmeida", Titulo_relatorio1 = "RELATÓRIO DE DEMONSTRAÇÃO DE RESULTADOS", Tipo_versao = "versao_ante" }, FormMethod.Post, null))
                            {

                                <button type="submit" class="btn-blue">RELATÓRIO</button>

                            }
                        </td>
                    </tr>
                </table>
            </div>
            <canvas id="GRAFICO_DEM_RESULT_MENSAL_2"></canvas>
        </td>
        <td>    </td>

        <td>
            @using (Html.BeginForm("DEM_RESULT_NCRF_COMP", "BI", new { Pesquisa_User = "tjalmeida" }, FormMethod.Post, null))
            {

                <p></p>   <input type="submit" value="NCRF" />
            }
        </td>

    </tr>
    <tr> <td class="titulos_mapas" colspan="8" style="text-align:center"> Custo das Mercadorias e Matérias </td> </tr>
    <tr>
        <td>
            <ul id="semaforo_cmvmc" class="semaforo">
    <li></li>
    <li></li>
    <li></li>
</ul> 
              
        </td>
        <td>
            <div style="width:336px;text-align: center">
                <table style="width:100%;text-align: center">
                    <tr style="text-align: center;width: 100%">
                        <td style="width: 50%" class="tooltip">
                            <span class="tooltiptext">Clique no botão abaixo para aceder à análise comparativa do Custo das Mercadorias e Matérias para os anos de @ViewData["ANO_VERSAO_REAL"] e @ViewData["ANO_VERSAO_ANTE"].  </span>

                            @using (Html.BeginForm("CMVMC_MENSAL_COMP", "BI", new { Pesquisa_User = "tjalmeida", desativa_datatable = 0 }, FormMethod.Post, null))
            {

                                <button type="submit" class="btn-green"> @ViewData["ANO_VERSAO_REAL"] vs @ViewData["ANO_VERSAO_ANTE"]</button>
                            }
                        </td>
                        <td style="width: 50%" class="tooltip">
                            <span class="tooltiptext">Clique no botão abaixo para obter o Relatório comparativo em PDF do Custo das Mercadorias e Matérias para os anos de @ViewData["ANO_VERSAO_REAL"] e @ViewData["ANO_VERSAO_ANTE"].  </span>
                            @using (Html.BeginForm("PDF_CMVMC_MENSAL_COMP_REL", "BI", new { Pesquisa_User = "tjalmeida", Titulo_relatorio1 = "RELATÓRIO DE CUSTOS DAS MERCADORIAS E MATÉRIAS" }, FormMethod.Post, null))
                            {

                                <button type="submit" class="btn-blue">RELATÓRIO</button>

                            }
                        </td>
                                     <td>            <div  class="tooltip">  <img src="~/images/informação.png" style="width:35px;height:35px" />   <span class="tooltiptext"> 
           Os Custo das Mercadorias e das Matérias (CMM), em termos acumulados (de Jan a @Html.Raw(ViewData["MES_ACUM_REAL_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_REAL"])) atingiram o valor de 
             @if (@ViewData["CMVMC_REAL_ACUM"].Equals("calc")) { <text>calc.</text> } else { @Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["CMVMC_REAL_ACUM"])))))} €,
         sendo que no período (de Jan a @Html.Raw(ViewData["MES_ACUM_ANTE_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_ANTE"])) atingiram o valor de
             @if (@ViewData["CMVMC_ANTE_ACUM"].Equals("calc")) { <text>calc.</text> } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["CMVMC_ANTE_ACUM"]) ))))} €,
         verificando-se @if (@ViewData["CMVMC_REAL_ACUM"].Equals("calc") || @ViewData["CMVMC_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else {if ((Convert.ToDecimal(@ViewData["CMVMC_REAL_ACUM"]) ) >= (Convert.ToDecimal(@ViewData["CMVMC_ANTE_ACUM"]) ))      {  <text> um crescimento de </text> ; }  else   {  <text> uma diminuição de </text>  ; }}
                         @if (@ViewData["CMVMC_REAL_ACUM"].Equals("calc") || @ViewData["CMVMC_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else { if ((Convert.ToInt32(@ViewData["CMVMC_ANTE_ACUM"]) ).Equals(0)){<text> 0 %</text>  } else { decimal CMVMC_REAL_ACUM = Convert.ToInt32(@ViewData["CMVMC_REAL_ACUM"]) ; decimal CMVMC_ANTE_ACUM = Convert.ToInt32(@ViewData["CMVMC_ANTE_ACUM"]) ; @Html.Raw((string.Format("{0:N}", ((CMVMC_REAL_ACUM - CMVMC_ANTE_ACUM) / Math.Abs(CMVMC_ANTE_ACUM)) * 100))) <text>%</text>} }.
                   
            <p> No mesmo período a Variação do Volume de Negócios (inclui Variação de Produção) foi de
             @if (@ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else { if ((Convert.ToInt32(@ViewData["IND_VN_ANTE_ACUM"]) ).Equals(0)){<text> 0 %</text>  } else { decimal IND_VN_REAL_ACUM = Convert.ToInt32(@ViewData["IND_VN_REAL_ACUM"]) ; decimal IND_VN_ANTE_ACUM = Convert.ToInt32(@ViewData["IND_VN_ANTE_ACUM"]) ; @Html.Raw((string.Format("{0:N}", ((IND_VN_REAL_ACUM - IND_VN_ANTE_ACUM) / Math.Abs(IND_VN_ANTE_ACUM)) * 100))) <text>%</text>} }.
            @if (@ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc") || @ViewData["CMVMC_REAL_ACUM"].Equals("calc") || @ViewData["CMVMC_ANTE_ACUM"].Equals("calc") || Convert.ToDecimal(@ViewData["CMVMC_ANTE_ACUM"]).Equals(0) || Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]).Equals(0)) { <text></text> } else { if (((Convert.ToDecimal(@ViewData["CMVMC_REAL_ACUM"]) - Convert.ToDecimal(@ViewData["CMVMC_ANTE_ACUM"])) / Math.Abs(Convert.ToDecimal(@ViewData["CMVMC_ANTE_ACUM"]))) * 100 >= ((Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"]) - Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]))/Math.Abs(Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"])))*100 )        {  <text>Sendo a variação do Custo das Mercadorias e das Matérias(CMM) superior à variação do Volume de Negócios verifica-se uma perda relativa de Rentabilidade Operacional </text> ; }  else   {  <text>Sendo a variação do Custo das Mercadorias e das Matérias(CMM) inferior à variação do Volume de Negócios verifica-se um ganho relativo de Rentabilidade Operacional </text> ; } }.
              </p>
            </div>
                        </td>
                    </tr>
                </table>
            </div>

            <canvas type="submit" id="GRAFICO_CMVMC_ACUMULADO_COMP"></canvas>

</td>

        <td>     </td>
        <td style="width:336px">
            @using (Html.BeginForm("CMVMC_MENSAL", "BI", new { Pesquisa_User = "tjalmeida" }, FormMethod.Post, null))
            {

                <p></p>                <button type="submit" class="btn-green">@ViewData["ANO_VERSAO_REAL"]  </button>
            }
            <canvas type="submit" id="GRAFICO_CMVMC_MENSAL_1"></canvas>
        </td>
        <td>    </td>
        <td style="width:336px">
            @using (Html.BeginForm("CMVMC_MENSAL_2", "BI", new { Pesquisa_User = "tjalmeida" }, FormMethod.Post, null))
            {

                <p></p>                <button type="submit" class="btn-green">@ViewData["ANO_VERSAO_ANTE"]  </button>
            }
                <canvas type="submit" id="GRAFICO_CMVMC_MENSAL_2"></canvas>
</td>
    </tr>
    <tr> <td class="titulos_mapas" colspan="8" style="text-align:center"> Fornecimentos e Serviços Externos </td> </tr>

    <tr>
        <td>
            <ul id="semaforo_fse" class="semaforo">
                <li></li>
                <li></li>
                <li></li>
            </ul>   
        </td>

        <td style="width:336px">

            <div  style="width:336px;text-align: center">
                <table style="width:100%;text-align: center">
                    <tr  style="text-align: center;width: 100%">
                        <td style="width: 50%" class="tooltip">
                            <span class="tooltiptext">Clique no botão abaixo para aceder à análise comparativa dos Fornecimentos e Serviços Externos para os anos de @ViewData["ANO_VERSAO_REAL"] e @ViewData["ANO_VERSAO_ANTE"].  </span>

                            @using (Html.BeginForm("FSE_MENSAL_COMP", "BI", new { Pesquisa_User = "tjalmeida", desativa_datatable = 0 }, FormMethod.Post, null))
                            {

                                <button type="submit"  class="btn-green"> @ViewData["ANO_VERSAO_REAL"] vs @ViewData["ANO_VERSAO_ANTE"]</button>
                            }
                        </td>
                        <td style="width: 50%" class="tooltip">
                            <span class="tooltiptext">Clique no botão abaixo para obter o Relatório comparativo em PDF dos Fornecimentos e Serviços Externos para os anos de @ViewData["ANO_VERSAO_REAL"] e @ViewData["ANO_VERSAO_ANTE"].  </span>
                            @using (Html.BeginForm("PDF_FSE_MENSAL_COMP_REL", "BI", new { Pesquisa_User = "tjalmeida", Titulo_relatorio1 = "FORNECIMENTOS E SERVIÇOS EXTERNOS" }, FormMethod.Post, null))
                            {

                                <button type="submit"  class="btn-blue">RELATÓRIO</button>

                            }
                        </td>
                        <td>                             
                         <div  class="tooltip">  <img src="~/images/informação.png" style="width:35px;height:35px" />   <span class="tooltiptext"> 
Os Fornecimentos e Serviços Externos (FSE), em termos acumulados (de Jan a @Html.Raw(ViewData["MES_ACUM_REAL_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_REAL"])) atingiram o valor de 
             @if (@ViewData["FSE_REAL_ACUM"].Equals("calc")) { <text>calc.</text> } else { @Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["FSE_REAL_ACUM"])))))} €,
         sendo que no período (de Jan a @Html.Raw(ViewData["MES_ACUM_ANTE_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_ANTE"])) atingiram o valor de
             @if (@ViewData["FSE_ANTE_ACUM"].Equals("calc")) { <text>calc.</text> } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["FSE_ANTE_ACUM"]) ))))} €,
         verificando-se @if (@ViewData["FSE_REAL_ACUM"].Equals("calc") || @ViewData["FSE_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else {if ((Convert.ToDecimal(@ViewData["FSE_REAL_ACUM"]) ) >= (Convert.ToDecimal(@ViewData["FSE_ANTE_ACUM"]) ))      {  <text> um crescimento de </text> ; }  else   {  <text> uma diminuição de </text>  ; }}
                         @if (@ViewData["FSE_REAL_ACUM"].Equals("calc") || @ViewData["FSE_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else { if ((Convert.ToInt32(@ViewData["FSE_ANTE_ACUM"]) ).Equals(0)){<text> 0 %</text>  } else { decimal FSE_REAL_ACUM = Convert.ToInt32(@ViewData["FSE_REAL_ACUM"]) ; decimal FSE_ANTE_ACUM = Convert.ToInt32(@ViewData["FSE_ANTE_ACUM"]) ; @Html.Raw((string.Format("{0:N}", ((FSE_REAL_ACUM - FSE_ANTE_ACUM) / Math.Abs(FSE_ANTE_ACUM)) * 100))) <text>%</text>} }.
       
            <p> No mesmo período a Variação do Volume de Negócios (inclui Variação de Produção) foi de
             @if (@ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else { if ((Convert.ToInt32(@ViewData["IND_VN_ANTE_ACUM"]) ).Equals(0)){<text> 0 %</text>  } else { decimal IND_VN_REAL_ACUM = Convert.ToInt32(@ViewData["IND_VN_REAL_ACUM"]) ; decimal IND_VN_ANTE_ACUM = Convert.ToInt32(@ViewData["IND_VN_ANTE_ACUM"]) ; @Html.Raw((string.Format("{0:N}", ((IND_VN_REAL_ACUM - IND_VN_ANTE_ACUM) / Math.Abs(IND_VN_ANTE_ACUM)) * 100))) <text>%</text>} }.
            @if (@ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc") || @ViewData["FSE_REAL_ACUM"].Equals("calc") || @ViewData["FSE_ANTE_ACUM"].Equals("calc") || Convert.ToDecimal(@ViewData["FSE_ANTE_ACUM"]).Equals(0) || Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]).Equals(0)) { <text></text> } else { if (((Convert.ToDecimal(@ViewData["FSE_REAL_ACUM"]) - Convert.ToDecimal(@ViewData["FSE_ANTE_ACUM"])) / Math.Abs(Convert.ToDecimal(@ViewData["FSE_ANTE_ACUM"]))) * 100 >= ((Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"]) - Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]))/Math.Abs(Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"])))*100 )        {  <text>Sendo a variação dos Fornecimentos e Serviços Externos (FSE) superior à variação do Volume de Negócios verifica-se uma perda relativa de Rentabilidade Operacional </text> ; }  else   {  <text>Sendo a variação dos Fornecimentos e Serviços Externos (FSE) inferior à variação do Volume de Negócios verifica-se um ganho relativo de Rentabilidade Operacional </text> ; } }.
       </p>
  </span>
            </div>
                        </td>
                    </tr>
                </table>
            </div>
            <canvas type="submit" id="GRAFICO_FSE_ACUMULADO_COMP"></canvas>

        </td>
        <td>    </td>
        <td style="width:336px">
              <div style="width:336px;text-align: center">
                <table style="width:100%;text-align: center">
                    <tr style="text-align: center;width: 100%">
                        <td style="width: 50%">
                            @using (Html.BeginForm("FSE_MENSAL", "BI", new { Pesquisa_User = "tjalmeida", desativa_datatable = 0 }, FormMethod.Post, null))
            {

                                <button type="submit"  class="btn-green"> @ViewData["ANO_VERSAO_REAL"] </button>
                            }
                        </td>
                        <td style="width: 50%">
                            @using (Html.BeginForm("PDF_FSE_MENSAL_REL", "BI", new { Pesquisa_User = "tjalmeida", Titulo_relatorio1 = "RELATÓRIO DE FORNECIMENTOS E SERVIÇOS EXTERNOS" }, FormMethod.Post, null))
                            {

                                <button type="submit"  class="btn-blue">RELATÓRIO</button>

                            }
                        </td>
                    </tr>
                </table>
            </div>
            <canvas type="submit" id="GRAFICO_FSE_MENSAL_1"></canvas>
        </td>
        <td>    </td>
        <td style="width:336px">
            <div style="width:336px;text-align: center">
                <table style="width:100%;text-align: center">
                    <tr style="text-align: center;width: 100%">
                        <td style="width: 50%">
                            @using (Html.BeginForm("FSE_MENSAL_2", "BI", new { Pesquisa_User = "tjalmeida", desativa_datatable = 0 }, FormMethod.Post, null))
            {

                                <button type="submit"  class="btn-green"> @ViewData["ANO_VERSAO_ANTE"] </button>
                            }
                        </td>
                        <td style="width: 50%">
                           @using (Html.BeginForm("PDF_FSE_MENSAL_2_REL", "BI", new { Pesquisa_User = "tjalmeida", Titulo_relatorio1 = "RELATÓRIO DE FORNECIMENTOS E SERVIÇOS EXTERNOS", Tipo_versao = "versao_ante" }, FormMethod.Post, null))
                           {

                                <button type="submit"  class="btn-blue">RELATÓRIO</button>

                            }
                        </td>
                    </tr>
                </table>
            </div>
            <canvas type="submit" id="GRAFICO_FSE_MENSAL_2"></canvas>
    </tr>



    <tr> <td class="titulos_mapas" colspan="8" style="text-align:center"> Gastos com Pessoal </td> </tr>
    <tr>
        <td>
            <ul id="semaforo_gastos_pessoal" class="semaforo">
                <li></li>
                <li></li>
                <li></li>
            </ul>
             
        </td>
        <td style="width:336px">
            <div style="width:336px;text-align: center">
                <table style="width:100%;text-align: center">
                    <tr style="text-align: center;width: 100%">
                        <td style="width: 50%" class="tooltip">
                            <span class="tooltiptext">Clique no botão abaixo para aceder à análise comparativa dos Gastos com Pessoal para os anos de @ViewData["ANO_VERSAO_REAL"] e @ViewData["ANO_VERSAO_ANTE"].  </span>

                            @using (Html.BeginForm("GASTOS_PESSOAL_MENSAL_COMP", "BI", new { Pesquisa_User = "tjalmeida", desativa_datatable = 0 }, FormMethod.Post, null))
                            {

                                <button type="submit"  class="btn-green"> @ViewData["ANO_VERSAO_REAL"] vs @ViewData["ANO_VERSAO_ANTE"]</button>
                            }
                        </td>
                        <td style="width: 50%" class="tooltip">
                            <span class="tooltiptext">Clique no botão abaixo para obter o Relatório comparativo em PDF dos dos Gastos com Pessoal para os anos de @ViewData["ANO_VERSAO_REAL"] e @ViewData["ANO_VERSAO_ANTE"].  </span>
                            @using (Html.BeginForm("PDF_GASTOS_PESSOAL_MENSAL_COMP_REL", "BI", new { Pesquisa_User = "tjalmeida", Titulo_relatorio1 = "RELATÓRIO DE GASTOS COM PESSOAL" }, FormMethod.Post, null))
                            {

                                <button type="submit"  class="btn-blue">RELATÓRIO</button>

                            }
                        </td>
                                     <td>            <div  class="tooltip">  <img src="~/images/informação.png" style="width:35px;height:35px" />   <span class="tooltiptext"> 
Os Gastos com Pessoal, em termos acumulados (de Jan a @Html.Raw(ViewData["MES_ACUM_REAL_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_REAL"])) atingiram o valor de 
             @if (@ViewData["GASTOS_PESSOAL_REAL_ACUM"].Equals("calc")) { <text>calc.</text> } else { @Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REAL_ACUM"])))))} €,
         sendo que no período (de Jan a @Html.Raw(ViewData["MES_ACUM_ANTE_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_ANTE"])) atingiram o valor de
             @if (@ViewData["GASTOS_PESSOAL_ANTE_ACUM"].Equals("calc")) { <text>calc.</text> } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_ANTE_ACUM"]) ))))} €,
         verificando-se @if (@ViewData["GASTOS_PESSOAL_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else {if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REAL_ACUM"]) ) >= (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_ANTE_ACUM"]) ))      {  <text> um crescimento de </text> ; }  else   {  <text> uma diminuição de </text>  ; }}
                         @if (@ViewData["GASTOS_PESSOAL_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else { if ((Convert.ToInt32(@ViewData["GASTOS_PESSOAL_ANTE_ACUM"]) ).Equals(0)){<text> 0 %</text>  } else { decimal GASTOS_PESSOAL_REAL_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_REAL_ACUM"]) ; decimal GASTOS_PESSOAL_ANTE_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_ANTE_ACUM"]) ; @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_REAL_ACUM - GASTOS_PESSOAL_ANTE_ACUM) / Math.Abs(GASTOS_PESSOAL_ANTE_ACUM)) * 100))) <text>%</text>} }.
          
            <p> No mesmo período a Variação do Volume de Negócios (inclui Variação de Produção) foi de
             @if (@ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else { if ((Convert.ToInt32(@ViewData["IND_VN_ANTE_ACUM"]) ).Equals(0)){<text> 0 %</text>  } else { decimal IND_VN_REAL_ACUM = Convert.ToInt32(@ViewData["IND_VN_REAL_ACUM"]) ; decimal IND_VN_ANTE_ACUM = Convert.ToInt32(@ViewData["IND_VN_ANTE_ACUM"]) ; @Html.Raw((string.Format("{0:N}", ((IND_VN_REAL_ACUM - IND_VN_ANTE_ACUM) / Math.Abs(IND_VN_ANTE_ACUM)) * 100))) <text>%</text>} }.
            @if (@ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_ANTE_ACUM"].Equals("calc") || Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_ANTE_ACUM"]).Equals(0) || Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]).Equals(0)) { <text></text> } else { if (((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REAL_ACUM"]) - Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_ANTE_ACUM"])) / Math.Abs(Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_ANTE_ACUM"]))) * 100 >= ((Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"]) - Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]))/Math.Abs(Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"])))*100 )        {  <text>Sendo a variação dos Gastos com Pessoal superior à variação do Volume de Negócios verifica-se uma perda relativa de Rentabilidade Operacional </text> ; }  else   {  <text>Sendo a variação dos Gastos com Pessoal inferior à variação do Volume de Negócios verifica-se um ganho relativo de Rentabilidade Operacional </text> ; } }.
       </p>
            </div>
                        </td>
                    </tr>
                </table>
            </div>
            <canvas type="submit" id="GRAFICO_GASTOS_PESSOAL_ACUMULADO_COMP"></canvas>
                   </td>
        <td>    </td>
        <td style="width:336px">
            <div style="width:336px;text-align: center">
                <table style="width:100%;text-align: center">
                    <tr style="text-align: center;width: 100%">
                        <td style="width: 50%">
                            @using (Html.BeginForm("GASTOS_PESSOAL_MENSAL", "BI", new { Pesquisa_User = "tjalmeida", desativa_datatable = 0 }, FormMethod.Post, null))
            {

                                <button type="submit"  class="btn-green"> @ViewData["ANO_VERSAO_REAL"] </button>
                            }
                        </td>
                        <td style="width: 50%">
                            @using (Html.BeginForm("PDF_GASTOS_PESSOAL_MENSAL_REL", "BI", new { Pesquisa_User = "tjalmeida", Titulo_relatorio1 = "RELATÓRIO DE GASTOS COM PESSOAL" }, FormMethod.Post, null))
                            {

                                <button type="submit"  class="btn-blue">RELATÓRIO</button>

                            }
                        </td>
                    </tr>
                </table>
            </div>
            <canvas type="submit" id="GRAFICO_GASTOS_PESSOAL_MENSAL_1"></canvas>
        </td>
        <td>    </td>
        <td style="width:336px">
            <div style="width:336px;text-align: center">
                <table style="width:100%;text-align: center">
                    <tr style="text-align: center;width: 100%">
                        <td style="width: 50%">
                            @using (Html.BeginForm("GASTOS_PESSOAL_MENSAL_2", "BI", new { Pesquisa_User = "tjalmeida", desativa_datatable = 0 }, FormMethod.Post, null))
            {

                                <button type="submit"  class="btn-green"> @ViewData["ANO_VERSAO_ANTE"] </button>
                            }
                        </td>
                        <td style="width: 50%">
                            @using (Html.BeginForm("PDF_GASTOS_PESSOAL_MENSAL_2_REL", "BI", new { Pesquisa_User = "tjalmeida", Titulo_relatorio1 = "RELATÓRIO DE GASTOS COM PESSOAL", Tipo_versao = "versao_ante" }, FormMethod.Post, null))
                            {

                                <button type="submit"  class="btn-blue">RELATÓRIO</button>

                            }
                        </td>
                    </tr>
                </table>
            </div>
            <canvas type="submit" id="GRAFICO_GASTOS_PESSOAL_MENSAL_2"></canvas>
    </tr>

    <tr> <td class="titulos_mapas" colspan="8" style="text-align:center"> Balanço Resumido </td> </tr>
    <tr>
        <td>
            <ul id="semaforo_balanco_resumido" class="semaforo">
                <li></li>
                <li></li>
                <li></li>
            </ul>
              
        </td>
        <td style="width:336px">
            <div style="width:336px;text-align: center">
                <table style="width:100%;text-align: center">
                    <tr style="text-align: center;width: 100%">
                        <td style="width: 50%" class="tooltip">
                            <span class="tooltiptext">Clique no botão abaixo para aceder à análise comparativa do Balanço para os anos de @ViewData["ANO_VERSAO_REAL"] e @ViewData["ANO_VERSAO_ANTE"].  </span>
                            @using (Html.BeginForm("BALANCO_COMP", "BI", new { Pesquisa_User = "tjalmeida", desativa_datatable = 0 }, FormMethod.Post, null))
            {

                                <button type="submit"  class="btn-green"> @ViewData["ANO_VERSAO_REAL"] vs @ViewData["ANO_VERSAO_ANTE"]</button>
                            }
                        </td>
                        <td style="width: 50%" class="tooltip">
                            <span class="tooltiptext">Clique no botão abaixo para obter o Relatório comparativo em PDF do Balanço para os anos de @ViewData["ANO_VERSAO_REAL"] e @ViewData["ANO_VERSAO_ANTE"].  </span>
                            @using (Html.BeginForm("PDF_BALANCO_COMP_REL", "BI", new { Pesquisa_User = "tjalmeida", Titulo_relatorio1 = "RELATÓRIO DE BALANÇO RESUMIDO" }, FormMethod.Post, null))
                            {

                                <button type="submit"  class="btn-blue">RELATÓRIO</button>

                            }
                        </td>
                            <td>            <div  class="tooltip">  <img src="~/images/informação.png" style="width:35px;height:35px" />   <span class="tooltiptext">

O Total do Ativo em @Html.Raw(ViewData["MES_ACUM_REAL_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_REAL"]) atingiu o valor de 
             @if (@ViewData["ACTIVO_TOTAL_REAL_ACUM"].Equals("calc") ) { <text>    -</text>  } else {@Html.Raw((string.Format("{0:N}",(Convert.ToDecimal(@ViewData["ACTIVO_TOTAL_REAL_ACUM"])))))} €,
           sendo que em  @Html.Raw(ViewData["MES_ACUM_ANTE_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_ANTE"]) era de
       @if ( @ViewData["ACTIVO_TOTAL_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["ACTIVO_TOTAL_ANTE_ACUM"]) ))))} €,
   verificando-se @if (@ViewData["ACTIVO_TOTAL_REAL_ACUM"].Equals("calc") || @ViewData["ACTIVO_TOTAL_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else {if ((Convert.ToDecimal(@ViewData["ACTIVO_TOTAL_REAL_ACUM"]) ) >= (Convert.ToDecimal(@ViewData["ACTIVO_TOTAL_ANTE_ACUM"]) ))         {  <text> um crescimento de </text> ; }  else   {  <text> uma diminuição de </text>  ; }}
    @if (@ViewData["ACTIVO_TOTAL_REAL_ACUM"].Equals("calc") || @ViewData["ACTIVO_TOTAL_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else { if ((Convert.ToInt32(@ViewData["ACTIVO_TOTAL_ANTE_ACUM"])).Equals(0)){<text> 100 %</text>  } else { decimal ACTIVO_TOTAL_REAL_ACUM = Convert.ToInt32(@ViewData["ACTIVO_TOTAL_REAL_ACUM"]) ; decimal ACTIVO_TOTAL_ANTE_ACUM = Convert.ToInt32(@ViewData["ACTIVO_TOTAL_ANTE_ACUM"]) ; @Html.Raw((string.Format("{0:N}", ((ACTIVO_TOTAL_REAL_ACUM / ACTIVO_TOTAL_ANTE_ACUM) * 100) - 100))) <text>%</text>} }.
    <p  style="margin-bottom: 0.4em;">
        O Total do Capital Próprio  em @Html.Raw(ViewData["MES_ACUM_REAL_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_REAL"]) atingiu o valor de 
             @if (@ViewData["CP_TOTAL_REAL_ACUM"].Equals("calc") ) { <text>    -</text>  } else {@Html.Raw((string.Format("{0:N}",(Convert.ToDecimal(@ViewData["CP_TOTAL_REAL_ACUM"])))))} €,
           sendo que em  @Html.Raw(ViewData["MES_ACUM_ANTE_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_ANTE"]) era de
       @if ( @ViewData["CP_TOTAL_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["CP_TOTAL_ANTE_ACUM"]) ))))} €,
   verificando-se @if (@ViewData["CP_TOTAL_REAL_ACUM"].Equals("calc") || @ViewData["CP_TOTAL_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else {if ((Convert.ToDecimal(@ViewData["CP_TOTAL_REAL_ACUM"]) ) >= (Convert.ToDecimal(@ViewData["CP_TOTAL_ANTE_ACUM"]) ))         {  <text> um crescimento de </text> ; }  else   {  <text> uma diminuição de </text>  ; }}
    @if (@ViewData["CP_TOTAL_REAL_ACUM"].Equals("calc") || @ViewData["CP_TOTAL_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else { if ((Convert.ToInt32(@ViewData["CP_TOTAL_ANTE_ACUM"])).Equals(0)){<text> 100 %</text>  } else { decimal CP_TOTAL_REAL_ACUM = Convert.ToInt32(@ViewData["CP_TOTAL_REAL_ACUM"]) ; decimal CP_TOTAL_ANTE_ACUM = Convert.ToInt32(@ViewData["CP_TOTAL_ANTE_ACUM"]) ; @Html.Raw((string.Format("{0:N}", ((CP_TOTAL_REAL_ACUM / CP_TOTAL_ANTE_ACUM) * 100) - 100))) <text>%</text>} }.
       <p  style="margin-bottom: 0.4em;">
        Assim, a Autonomia Financeira  em @Html.Raw(ViewData["MES_ACUM_REAL_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_REAL"]) atingiu o valor de 
             @if (@ViewData["IND_AUTOM_FINANC_REAL_ACUM"].Equals("calc") ) { <text>    -</text>  } else {@Html.Raw((string.Format("{0:N}",(Convert.ToDecimal(@ViewData["IND_AUTOM_FINANC_REAL_ACUM"])))))<text>%</text>} ,
           sendo que em  @Html.Raw(ViewData["MES_ACUM_ANTE_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_ANTE"]) era de
       @if ( @ViewData["IND_AUTOM_FINANC_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["IND_AUTOM_FINANC_ANTE_ACUM"]) ))))<text>%</text>} ,
   verificando-se @if (@ViewData["IND_AUTOM_FINANC_REAL_ACUM"].Equals("calc") || @ViewData["IND_AUTOM_FINANC_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else {if ((Convert.ToDecimal(@ViewData["IND_AUTOM_FINANC_REAL_ACUM"]) ) >= (Convert.ToDecimal(@ViewData["IND_AUTOM_FINANC_ANTE_ACUM"]) ))         {  <text> um aumento de </text> ; }  else   {  <text> uma redução de </text>  ; }}
    @if (@ViewData["IND_AUTOM_FINANC_REAL_ACUM"].Equals("calc") || @ViewData["IND_AUTOM_FINANC_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else { if ((Convert.ToInt32(@ViewData["IND_AUTOM_FINANC_ANTE_ACUM"])).Equals(0)){<text> 100 %</text>  } else { decimal IND_AUTOM_FINANC_REAL_ACUM = Convert.ToInt32(@ViewData["IND_AUTOM_FINANC_REAL_ACUM"]) ; decimal IND_AUTOM_FINANC_ANTE_ACUM = Convert.ToInt32(@ViewData["IND_AUTOM_FINANC_ANTE_ACUM"]) ; @Html.Raw((string.Format("{0:N}", ((IND_AUTOM_FINANC_REAL_ACUM - IND_AUTOM_FINANC_ANTE_ACUM) ) ))) <text>%</text>} }.
    
  </div>   </td>
                    </tr>
                </table>
            </div>
            <canvas type="submit" id="GRAFICO_BALANCO_RESUMIDOCOMP_COMP"></canvas>

        </td>
        <td>     </td>
        <td style="width:336px">
            <div style="width:336px;text-align: center">
                <table style="width:100%;text-align: center">
                    <tr style="text-align: center;width: 100%">
                        <td style="width: 50%">
                            @using (Html.BeginForm("BALANCO_DECOMPOSTO_ACUM_RESUM", "BI", new { Pesquisa_User = "tjalmeida", desativa_datatable = 0 }, FormMethod.Post, null))
            {

                                <button type="submit"  class="btn-green"> @ViewData["ANO_VERSAO_REAL"] </button>
                            }
                        </td>
                        <td style="width: 50%">
                            @using (Html.BeginForm("PDF_BALANCO_DECOMPOSTO_ACUM_RESUM_REL", "BI", new { Pesquisa_User = "tjalmeida", Titulo_relatorio1 = "RELATÓRIO DE BALANÇO RESUMIDO" }, FormMethod.Post, null))
                            {

                                <button type="submit"  class="btn-blue">RELATÓRIO</button>

                            }
                        </td>
                    </tr>
                </table>
            </div>
            <canvas type="submit" id="GRAFICO_BALANCO_RESUMIDO_MENSAL_1"></canvas>
        </td>
        <td>    </td>
        <td style="width:336px">
<div style="width:336px;text-align: center">
                <table style="width:100%;text-align: center">
                    <tr style="text-align: center;width: 100%">
                        <td style="width: 50%">
                            @using (Html.BeginForm("BALANCO_DECOMPOSTO_ACUM_RESUM_2", "BI", new { Pesquisa_User = "tjalmeida", desativa_datatable = 0 }, FormMethod.Post, null))
            {

                                <button type="submit"  class="btn-green"> @ViewData["ANO_VERSAO_ANTE"] </button>
                            }
                        </td>
                        <td style="width: 50%">
                           @using (Html.BeginForm("PDF_BALANCO_DECOMPOSTO_ACUM_RESUM_2_REL", "BI", new { Pesquisa_User = "tjalmeida", Titulo_relatorio1 = "RELATÓRIO DE BALANÇO RESUMIDO", Tipo_versao = "versao_ante" }, FormMethod.Post, null))
                           {

                                <button type="submit"  class="btn-blue">RELATÓRIO</button>

                            }
                        </td>
                    </tr>
                </table>
            </div>
            <canvas type="submit" id="GRAFICO_BALANCO_RESUMIDO_MENSAL_2"></canvas>
        </td>
        <td>

        </td>
        <td style="width:336px">
            @using (Html.BeginForm("BALANCO_NCRF_COMP", "BI", new { Pesquisa_User = "tjalmeida" }, FormMethod.Post, null))
            {
                <p></p>  <input type="submit" value="NCRF" />
            }

        </td>
    </tr>
    <tr> <td class="titulos_mapas" colspan="8" style="text-align:center"> Cash-Flow </td> </tr>
    <tr>
        <td>
            <ul id="semaforo_cflow" class="semaforo">
                <li></li>
                <li></li>
                <li></li>
            </ul>   
        </td>
        <td style="width:336px">
            <div style="width:336px;text-align: center">
                <table style="width:100%;text-align: center">
                    <tr style="text-align: center;width: 100%">
                        <td style="width: 50%" class="tooltip">
                            <span class="tooltiptext">Clique no botão abaixo para aceder à análise comparativa do Cash-Flow para os anos de @ViewData["ANO_VERSAO_REAL"] e @ViewData["ANO_VERSAO_ANTE"].  </span>
                            @using (Html.BeginForm("CASH_FLOW_MENSAL_COMP", "BI", new { Pesquisa_User = "tjalmeida", desativa_datatable = 0 }, FormMethod.Post, null))
            {

                                <button type="submit"  class="btn-green"> @ViewData["ANO_VERSAO_REAL"] vs @ViewData["ANO_VERSAO_ANTE"]</button>
                            }
                        </td>
                        <td style="width: 50%" class="tooltip">
                            <span class="tooltiptext">Clique no botão abaixo para obter o Relatório comparativo em PDF do Cash-Flow para os anos de @ViewData["ANO_VERSAO_REAL"] e @ViewData["ANO_VERSAO_ANTE"].  </span>
                            @using (Html.BeginForm("PDF_CASH_FLOW_MENSAL_COMP_REL", "BI", new { Pesquisa_User = "tjalmeida", Titulo_relatorio1 = "RELATÓRIO DE CASH-FLOW" }, FormMethod.Post, null))
                            {

                                <button type="submit"  class="btn-blue">RELATÓRIO</button>

                            }
                        </td>
                                                                                     <td>            <div  class="tooltip">  <img src="~/images/informação.png" style="width:35px;height:35px" />   <span class="tooltiptext"> 
O Cash-flow Total, em termos acumulados (de Jan a @Html.Raw(ViewData["MES_ACUM_REAL_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_REAL"])), atingiu o valor de 
             @if (@ViewData["CFLOW_FLUX_CAIXA_TOTAL_REAL_ACUM"].Equals("calc") || @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANTE_ACUM"].Equals("calc") || @ViewData["CFLOW_FLUX_CAIXA_BRUTO_REAL_ACUM"].Equals("calc") || @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANTE_ACUM"].Equals("calc")) { <text>    -</text>  } else {@Html.Raw((string.Format("{0:N}",(Convert.ToDecimal(@ViewData["CFLOW_FLUX_CAIXA_TOTAL_REAL_ACUM"])))))} €,
         sendo que no período (de Jan a @Html.Raw(ViewData["MES_ACUM_ANTE_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_ANTE"])) atingiu o valor de 
             @if (@ViewData["CFLOW_FLUX_CAIXA_TOTAL_REAL_ACUM"].Equals("calc") || @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANTE_ACUM"].Equals("calc") || @ViewData["CFLOW_FLUX_CAIXA_BRUTO_REAL_ACUM"].Equals("calc") || @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANTE_ACUM"].Equals("calc")) { <text>    -</text>  } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANTE_ACUM"]) ))))} €,
         verificando-se @if (@ViewData["CFLOW_FLUX_CAIXA_TOTAL_REAL_ACUM"].Equals("calc") || @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANTE_ACUM"].Equals("calc") || @ViewData["CFLOW_FLUX_CAIXA_BRUTO_REAL_ACUM"].Equals("calc") || @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANTE_ACUM"].Equals("calc")) { <text>    -</text>  } else {if ((Convert.ToDecimal(@ViewData["CFLOW_FLUX_CAIXA_TOTAL_REAL_ACUM"]) + Convert.ToDecimal(@ViewData["CFLOW_FLUX_CAIXA_BRUTO_REAL_ACUM"])) >= (Convert.ToDecimal(@ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANTE_ACUM"]) + Convert.ToDecimal(@ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANTE_ACUM"])))         {  <text> um crescimento de </text> ; }  else   {  <text> uma diminuição de </text>  ; }}
         @if (@ViewData["CFLOW_FLUX_CAIXA_TOTAL_REAL_ACUM"].Equals("calc") || @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANTE_ACUM"].Equals("calc") || @ViewData["CFLOW_FLUX_CAIXA_BRUTO_REAL_ACUM"].Equals("calc") || @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANTE_ACUM"].Equals("calc")) { <text>    -</text>  } else { if ((Convert.ToInt32(@ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANTE_ACUM"]) + Convert.ToInt32(@ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANTE_ACUM"])).Equals(0)){<text> 100 %</text>  } else { decimal CFLOW_FLUX_CAIXA_TOTAL_REAL_ACUM = Convert.ToInt32(@ViewData["CFLOW_FLUX_CAIXA_TOTAL_REAL_ACUM"]) ; decimal CFLOW_FLUX_CAIXA_TOTAL_ANTE_ACUM = Convert.ToInt32(@ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANTE_ACUM"]) ; @Html.Raw((string.Format("{0:N}", ((CFLOW_FLUX_CAIXA_TOTAL_REAL_ACUM / CFLOW_FLUX_CAIXA_TOTAL_ANTE_ACUM) * 100) - 100))) <text>%</text>} }.
         <p  style="margin-bottom: 0.4em; text-align:left">
                 O Cash-flow Total (CFT), em termos acumulados (de Jan a @Html.Raw(ViewData["MES_ACUM_REAL_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_REAL"])), é explicado por:
             </p>
               <p style="margin-top:0.2em; margin-bottom: 0.2em; text-align:left; padding-left:8px"> 
         @if (@ViewData["CFLOW_FLUX_CAIXA_BRUTO_REAL_ACUM"].Equals("calc") ) { <text>    -</text>  } else {if (Convert.ToDecimal(@ViewData["CFLOW_FLUX_CAIXA_BRUTO_REAL_ACUM"])  >= 0)         {  <text> --> Fluxo de Caixa Bruto positivo (libertado pela actividade operacional) de </text> ; }  else   {  <text> --> Fluxo de Caixa Bruto negativo (retido para financiar a actividade operacional) de </text>  ; }} 
          @if (@ViewData["CFLOW_FLUX_CAIXA_BRUTO_REAL_ACUM"].Equals("calc") ) { <text>    -</text>  } else {@Html.Raw((string.Format("{0:N}",(Convert.ToDecimal(@ViewData["CFLOW_FLUX_CAIXA_BRUTO_REAL_ACUM"])))))} €.
          </p>
                     <p style="margin-top:0.2em; margin-bottom: 0.2em; text-align:left; padding-left:8px"> 
         @if (@ViewData["CFLOW_INV_CAP_CIRC_REAL_ACUM"].Equals("calc") ) { <text>    -</text>  } else {if (Convert.ToDecimal(@ViewData["CFLOW_INV_CAP_CIRC_REAL_ACUM"])  >= 0)         {  <text> --> Um desinvestimento em Circulante (Clientes, Stocks, Fornecedores e Estado) de </text> ; }  else   {  <text> --> Um investimento em Circulante (Clientes, Stocks, Fornecedores e Estado) de </text>  ; }} 
          @if (@ViewData["CFLOW_INV_CAP_CIRC_REAL_ACUM"].Equals("calc") ) { <text>    -</text>  } else {@Html.Raw((string.Format("{0:N}",(Convert.ToDecimal(@ViewData["CFLOW_INV_CAP_CIRC_REAL_ACUM"])))))} €.
          </p>
                                <p style="margin-top:0.2em; margin-bottom: 0.2em; text-align:left; padding-left:8px">
         @if (@ViewData["CFLOW_INV_CAP_FIXO_REAL_ACUM"].Equals("calc") ) { <text>    -</text>  } else {if (Convert.ToDecimal(@ViewData["CFLOW_INV_CAP_FIXO_REAL_ACUM"])  >= 0)         {  <text> --> Um desinvestimento em Capital Fixo (Imobilizado) de </text> ; }  else   {  <text> --> Um investimento em Capital Fixo (Imobilizado) de </text>  ; }} 
          @if (@ViewData["CFLOW_INV_CAP_FIXO_REAL_ACUM"].Equals("calc") ) { <text>    -</text>  } else {@Html.Raw((string.Format("{0:N}",(Convert.ToDecimal(@ViewData["CFLOW_INV_CAP_FIXO_REAL_ACUM"])))))} €.
          </p>
                                         <p style="margin-top:0.2em; margin-bottom: 0.2em; text-align:left; padding-left:8px">
         @if (@ViewData["CFLOW_INV_FINANC_REAL_ACUM"].Equals("calc") || @ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_REAL_ACUM"].Equals("calc")) { <text>    -</text>  } else {if (Convert.ToDecimal(@ViewData["CFLOW_INV_FINANC_REAL_ACUM"]) + Convert.ToDecimal(@ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_REAL_ACUM"])  >= 0)         {  <text> --> Outros Fluxos Extra-Exploração (Investimentos Financeiros e Outros) que libertaram </text> ; }  else   {  <text> --> Outros Fluxos Extra-Exploração (Investimentos Financeiros e Outros) onde foram aplicados </text>  ; }} 
          @if (@ViewData["CFLOW_INV_FINANC_REAL_ACUM"].Equals("calc") || @ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_REAL_ACUM"].Equals("calc")) { <text>    -</text>  } else {@Html.Raw((string.Format("{0:N}",(Convert.ToDecimal(@ViewData["CFLOW_INV_FINANC_REAL_ACUM"])+ Convert.ToDecimal(@ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_REAL_ACUM"])))))} €.
          </p>
            </div>
                        </td>
                    </tr>
                </table>
            </div>
            <canvas type="submit" id="GRAFICO_CFLOW_COMP_ACUMULADO_COMP"></canvas>

        </td>
        <td>
      
        </td>
        <td style="width:336px">
            <div style="width:336px;text-align: center">
                <table style="width:100%;text-align: center">
                    <tr style="text-align: center;width: 100%">
                        <td style="width: 50%">
                            @using (Html.BeginForm("CASH_FLOW_MENSAL", "BI", new { Pesquisa_User = "tjalmeida", desativa_datatable = 0 }, FormMethod.Post, null))
            {

                                <button type="submit"  class="btn-green"> @ViewData["ANO_VERSAO_REAL"] </button>
                            }
                        </td>
                        <td style="width: 50%">
                            @using (Html.BeginForm("PDF_CASH_FLOW_MENSAL_REL", "BI", new { Pesquisa_User = "tjalmeida", Titulo_relatorio1 = "RELATÓRIO DE CASH-FLOW" }, FormMethod.Post, null))
                            {

                                <button type="submit"  class="btn-blue">RELATÓRIO</button>

                            }
                        </td>
                    </tr>
                </table>
            </div>
            <canvas type="submit" id="GRAFICO_CFLOW_MENSAL_1"></canvas>

        </td>
        <td>    </td>
        <td style="width:336px">
            <div style="width:336px;text-align: center">
                <table style="width:100%;text-align: center">
                    <tr style="text-align: center;width: 100%">
                        <td style="width: 50%">
                            @using (Html.BeginForm("CASH_FLOW_MENSAL_2", "BI", new { Pesquisa_User = "tjalmeida", desativa_datatable = 0 }, FormMethod.Post, null))
            {

                                <button type="submit"  class="btn-green"> @ViewData["ANO_VERSAO_ANTE"] </button>
                            }
                        </td>
                        <td style="width: 50%">
                            @using (Html.BeginForm("PDF_CASH_FLOW_MENSAL_2_REL", "BI", new { Pesquisa_User = "tjalmeida", Titulo_relatorio1 = "RELATÓRIO DE CASH-FLOW", Tipo_versao = "versao_ante" }, FormMethod.Post, null))
                            {

                                <button type="submit"  class="btn-blue">RELATÓRIO</button>

                            }
                        </td>
                    </tr>
                </table>
            </div>
            <canvas type="submit" id="GRAFICO_CFLOW_MENSAL_2"></canvas>
        </td>
        <td>    </td>
        <td></td>
    </tr>
    <tr> <td class="titulos_mapas" colspan="8" style="text-align:center"> Rácios e Indicadores </td> </tr>
    <tr>
        <td>
 
            <ul id="semaforo_indicadores" class="semaforo">
                <li></li>
                <li></li>
                <li></li>
            </ul>
        
        </td>
        <td style="width:336px">
            <div style="width:336px;text-align: center">
                <table style="width:100%;text-align: center">
                    <tr style="text-align: center;width: 100%">
                        <td style="width: 50%" class="tooltip">
                            <span class="tooltiptext">Clique no botão abaixo para aceder à análise comparativa dos Rácios e Indicadores para os anos de @ViewData["ANO_VERSAO_REAL"] e @ViewData["ANO_VERSAO_ANTE"].  </span>
                            @using (Html.BeginForm("INDICADORES_MENSAL_COMP", "BI", new { Pesquisa_User = "tjalmeida", desativa_datatable = 0 }, FormMethod.Post, null))
            {

                                <button type="submit"  class="btn-green"> @ViewData["ANO_VERSAO_REAL"] vs @ViewData["ANO_VERSAO_ANTE"]</button>
                            }
                        </td>
                        <td style="width: 50%" class="tooltip">
                            <span class="tooltiptext">Clique no botão abaixo para obter o Relatório comparativo em PDF dos Rácios e Indicadores para os anos de @ViewData["ANO_VERSAO_REAL"] e @ViewData["ANO_VERSAO_ANTE"].  </span>
                            @using (Html.BeginForm("PDF_INDICADORES_MENSAL_COMP_REL", "BI", new { Pesquisa_User = "tjalmeida", Titulo_relatorio1 = "RELATÓRIO DE INDICADORES" }, FormMethod.Post, null))
                            {

                                <button type="submit"  class="btn-blue">RELATÓRIO</button>

                            }
                        </td>
                                     <td>            <div  class="tooltip">  <img src="~/images/informação.png" style="width:35px;height:35px" />   <span class="tooltiptext"> 
 A Margem do EBITDA no Volume de Negócios (VN: inclui variação de Produção), em termos acumulados (de Jan a @Html.Raw(ViewData["MES_ACUM_REAL_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_REAL"])), atingiu o valor de
             @if (@ViewData["EBITDA_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_REAL_ACUM"].Equals("calc")) { <text>calc.</text>  } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["EBITDA_REAL_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"])) * 100)))} %
         sendo que no período (de Jan a @Html.Raw(ViewData["MES_ACUM_ANTE_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_ANTE"])) atingiu o valor de
             @if (@ViewData["EBITDA_ANTE_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc")) { <text>calc.</text>  } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["EBITDA_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"])) * 100)))} %,
         verificando-se @if (@ViewData["EBITDA_REAL_ACUM"].Equals("calc") || @ViewData["EBITDA_ANTE_ACUM"].Equals("calc") || @ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc")) { <text>    -</text>  } else { if ((Convert.ToDecimal(@ViewData["EBITDA_REAL_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"])) >= (Convert.ToDecimal(@ViewData["EBITDA_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]))) {  <text> um aumendo de eficiência de </text> ; } else {  <text> uma diminuição de eficiência de </text>  ; } }
                         @if (@ViewData["EBITDA_REAL_ACUM"].Equals("calc") || @ViewData["EBITDA_ANTE_ACUM"].Equals("calc") || @ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc")) { <text>    -</text>  } else { if ((Convert.ToDecimal(@ViewData["EBITDA_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"])).Equals(0)){<text> 0 %</text>  } else { decimal PESO_EBITDA_VN_REAL_ACUM = Convert.ToDecimal(@ViewData["EBITDA_REAL_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"]); decimal PESO_EBITDA_VN_ANTE_ACUM = Convert.ToDecimal(@ViewData["EBITDA_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]); @Html.Raw((string.Format("{0:N}", ((PESO_EBITDA_VN_REAL_ACUM - PESO_EBITDA_VN_ANTE_ACUM) )*100 ))) <text>%</text>} }.
 </span>
            </div>
                        </td>
                    </tr>
                </table>
            </div>
            <canvas type="submit" id="GRAFICO_INDICADORES_COMP"></canvas>     
        </td>
        <td>    </td>

        <td style="width:336px">
            <div style="width:336px;text-align: center">
                <table style="width:100%;text-align: center">
                    <tr style="text-align: center;width: 100%">
                        <td style="width: 50%">
                            @using (Html.BeginForm("INDICADORES_MENSAL", "BI", new { Pesquisa_User = "tjalmeida", desativa_datatable = 0 }, FormMethod.Post, null))
            {

                                <button type="submit"  class="btn-green"> @ViewData["ANO_VERSAO_REAL"] </button>
                            }
                        </td>
                        <td style="width: 50%">
                            @using (Html.BeginForm("PDF_INDICADORES_MENSAL_REL", "BI", new { Pesquisa_User = "tjalmeida", Titulo_relatorio1 = "RELATÓRIO DE INDICADORES" }, FormMethod.Post, null))
                            {

                                <button type="submit"  class="btn-blue">RELATÓRIO</button>

                            }
                        </td>
                    </tr>
                </table>
            </div>
            <canvas type="submit" id="GRAFICO_INDICADORES_MENSAL_1"></canvas>
        </td>
        <td>    </td>
        <td style="width:336px">
            <div style="width:336px;text-align: center">
                <table style="width:100%;text-align: center">
                    <tr style="text-align: center;width: 100%">
                        <td style="width: 50%">
                            @using (Html.BeginForm("INDICADORES_MENSAL_2", "BI", new { Pesquisa_User = "tjalmeida", desativa_datatable = 0 }, FormMethod.Post, null))
            {

                                <button type="submit"  class="btn-green"> @ViewData["ANO_VERSAO_ANTE"] </button>
                            }
                        </td>
                        <td style="width: 50%">
                            @using (Html.BeginForm("PDF_INDICADORES_MENSAL_2_REL", "BI", new { Pesquisa_User = "tjalmeida", Titulo_relatorio1 = "RELATÓRIO DE INDICADORES", Tipo_versao = "versao_ante" }, FormMethod.Post, null))
                            {

                                <button type="submit"  class="btn-blue">RELATÓRIO</button>

                            }
                        </td>
                    </tr>
                </table>
            </div>
            <canvas type="submit" id="GRAFICO_INDICADORES_MENSAL_2"></canvas>
        </td>

    </tr>


    <tr> <td class="titulos_mapas" colspan="8" style="text-align:center"> Balanço Detalhado </td> </tr>
    <tr>
        <td>       </td>
        <td>     </td>
        <td>     </td>
        <td style="width:336px">
            @using (Html.BeginForm("BALANCO_DECOMPOSTO_MENSAL", "BI", new { Pesquisa_User = "tjalmeida" }, FormMethod.Post, null))
            {
                <p></p>                <button type="submit" class="btn-green"> @ViewData["ANO_VERSAO_REAL"] </button>
            }
            <canvas type="submit" id="GRAFICO_BALANCO_DECOMPOSTO_MENSAL_1"></canvas>
        </td>
        <td>    </td>
        <td style="width:336px">
            @using (Html.BeginForm("BALANCO_DECOMPOSTO_MENSAL_2", "BI", new { Pesquisa_User = "tjalmeida" }, FormMethod.Post, null))
            {
                <p></p>  <button type = "submit"  class="btn-green"> @ViewData["ANO_VERSAO_ANTE"] </button>
            }
            <canvas type="submit" id="GRAFICO_BALANCO_DECOMPOSTO_MENSAL_2"></canvas>
        </td>
        <td>    </td>
        <td></td>
    </tr>

    <tr> <td class="titulos_mapas" colspan="8" style="text-align:center"> Estado e Outros Entes Públicos </td> </tr>
    <tr>

        <td>      </td>
        <td>     </td>
        <td>     </td>
        <td style="width:336px">
            @using (Html.BeginForm("ESTADO_MENSAL", "BI", new { Pesquisa_User = "tjalmeida" }, FormMethod.Post, null))
            {

                <p></p>                <button type="submit" class="btn-green"> @ViewData["ANO_VERSAO_REAL"] </button>
            }
            <canvas type="submit" id="GRAFICO_ESTADO_MENSAL_1"></canvas>
        </td>
        <td>    </td>
        <td style="width:336px">
            @using (Html.BeginForm("ESTADO_MENSAL_2", "BI", new { Pesquisa_User = "tjalmeida" }, FormMethod.Post, null))
            {

                <p></p>                <button type="submit" class="btn-green"> @ViewData["ANO_VERSAO_ANTE"] </button>
            }
            <canvas type="submit" id="GRAFICO_ESTADO_MENSAL_2"></canvas>
        </td>
    </tr>
    @*<tr> <td class="titulos_mapas" colspan="8"> Actualização de Campos </td> </tr>
    <tr>
        <td>    </td>

    </tr>
    <tr>

        <td style="text-align:left">
            @using (Html.BeginForm("PROC_BI_ACT_TBL_BI_CAMP_CALC_DIR", "BI", FormMethod.Get))
            {
                <p></p> <input type="submit" value="CALCULO DIRECTO" />
            }
        </td>


        <td style="text-align:left">
            @using (Html.BeginForm("CAMPOSCALC_RESULTADO_CALC", "BI", FormMethod.Get))
            {
                <p></p> <input type="submit" value="TODOS (LENTO)" />
            }
        </td>
    </tr>*@
</table>


<div id="GRAVARSELEC_VERXX" class:"style_botao_gravar" style="display:none">


    @using (Html.BeginForm("BI_SELECCAO_VERSAO_USER_ALT", "BI", FormMethod.Get))
    {
        <div id="GRAVAR" class="GRAVAR">
            @Html.ActionLink("GRAVAR", "BI_SELECCAO_VERSAO_USER_ALT", "BI", new
{
    Pesquisa_User = "tjalmeida",
    id_camp = "id_camp",
    versao_selec = "versao_selec"
}, null)
        </div>

    }
</div>

@section scripts {



    <script type="text/javascript">

       

        $(document).ready(function () {


            $("#grid00conf").addClass('mostrar');
            $("#grid01conf").addClass('mostrar');



            $("#grid th").find('"a[href*=' + "'" + "ID" + "&'" + ']"').parent().addClass('id');
            $("#grid th").find('"a[href*=' + "'" + "id_seleccao_calc" + "&'" + ']"').parent().addClass('id_seleccao_calc');
            $("#grid th").find('"a[href*=' + "'" + "desc_seleccao_calc" + "&'" + ']"').parent().addClass('desc_seleccao_calc');
            $("#grid th").find('"a[href*=' + "'" + "versao_selec" + "&'" + ']"').parent().addClass('versao_');


            $("#grid ").find(".id").hide();
            $("#grid ").find(".id_seleccao_calc").hide();
            $("#grid ").find(".desc_seleccao_calc").hide();
            $("#grid ").find(".versao_").hide();

            $(".webgrid-table-edit-gridconf").find("thead").hide();

            
          

            //--------------------------------TRATO os CAMPO de VERSAO_SELECCCAO    grid01conf--------------------------


            //$("#grid01conf").find(".versao_selec ").click(function () {


            //    if ($(this).children().attr('class') != "input") {
            //        var id = $(this).parent().find(".id").html();
            //        var idconteudoOriginal = $(this).parent().parent().parent().parent().parent().attr('id');
            //        //var findidconteudoOriginal = '.' + idconteudoOriginal + '';


            //        var conteudoOriginal = $(this).text();



            //        var ReplaceHrefID = $("#GRAVARSELEC_VERXX form").html();



            //        $(this).html("<input class='input' value='" + conteudoOriginal + "'/>");
            //        $(this).children().first().focus();

            //    }



            //    // NOTA TA: Keypress significa que a instrução é cumprida quando o utilizador faz "enter"
            //    $(this).children().first().keypress(function (e) {
            //        if (e.which == 13) {

            //            if ($(this).parent().parent().parent().parent().find('.GRAVAR').text() == "") {
            //                $(this).parent().parent().parent().parent().prepend(ReplaceHrefID);
            //            }
            //            else { $(this).parent().parent().parent().parent().find('.GRAVAR').html(ReplaceHrefID) }

            //            //NOTA TA: Aqui re-faço a href do botão com todos os campos preenchidos de origem
            //            var ValorInicial_id_camp = id;
            //            var ReplaceHref_id_camp = $(this).parent().parent().parent().parent().find('.GRAVAR').html().replace('id_camp=id_camp', 'id_camp' + '=' + ValorInicial_id_camp);
            //            $(this).parent().parent().parent().parent().find('.GRAVAR').html(ReplaceHref_id_camp);

                       

            //            var hrefalterar1 = $(this).parent().parent().parent().parent().find('.GRAVAR').html();

            //            var valor = $(this).val() 
            //            if ($(this).val() == "" ||  $(this).val() <= 0 || $(this).val() >=5 || valor != parseInt(valor, 10)) {
            //                var novoConteudo = conteudoOriginal;
            //                alert("Por favor, insira um Valor de 1 a 4 para seleccionar a versão.")
            //            }
            //            else {
            //                var novoConteudo = $(this).val();
            //            }


            //            $(this).parent().text(novoConteudo);
            //            $(this).parent().removeClass("celulaEmEdicao");


            //            var ReplaceHref1 = hrefalterar1.replace('versao_selec=versao_selec', 'versao_selec' + '=' + novoConteudo);

            //            $('#' + idconteudoOriginal).find('.GRAVAR').html(ReplaceHref1);

                     
            //            //-------------------INICIO: ACRESCENTEI para evitar passo debotão GRAVAR----
            //            var href_alt = document.querySelector('#grid01conf .GRAVAR a').href
            //            var href_alt_ = href_alt.replace('"','').replace('amp;','').replace('amp;','')
                       
            //            var x = document.getElementsByClassName("GRAVAR");
            //            var i;
            //            for (i = 0; i < x.length; i++) {
            //                x[i].style.display = "none";

            //            }

            //            //alert(ReplaceHref1);
                  
            //            window.location.href = href_alt_
                     
            //            //-------------------FIM: ACRESCENTEI para evitar passo debotão GRAVAR----

            //        }

            //    });


            //})



            //--------------------------------TRATO os CAMPO de VERSAO_SELECCCAO    grid00conf--------------------------

            $("#grid00conf").find(".versao_selec ").click(function () {


                if ($(this).children().attr('class') != "input") {
                    var id = $(this).parent().find(".id").html();
                    var idconteudoOriginal = $(this).parent().parent().parent().parent().parent().attr('id');
                    //var findidconteudoOriginal = '.' + idconteudoOriginal + '';


                    var conteudoOriginal = $(this).text();



                    var ReplaceHrefID = $("#GRAVARSELEC_VERXX form").html();



                    $(this).html("<input class='input' value='" + conteudoOriginal + "'/>");
                    $(this).children().first().focus();

                }

                // NOTA TA: Keypress significa que a instrução é cumprida quando o utilizador faz "enter"
                $(this).children().first().keypress(function (e) {
                    if (e.which == 13) {

                        if ($(this).parent().parent().parent().parent().find('.GRAVAR').text() == "") {
                            $(this).parent().parent().parent().parent().prepend(ReplaceHrefID);
                        }
                        else { $(this).parent().parent().parent().parent().find('.GRAVAR').html(ReplaceHrefID) }


                        //NOTA TA: Aqui re-faço a href do botão com todos os campos preenchidos de origem
                        var ValorInicial_id_camp = id;
                        var ReplaceHref_id_camp = $(this).parent().parent().parent().parent().find('.GRAVAR').html().replace('id_camp=id_camp', 'id_camp' + '=' + ValorInicial_id_camp);
                        $(this).parent().parent().parent().parent().find('.GRAVAR').html(ReplaceHref_id_camp);


                        var hrefalterar1 = $(this).parent().parent().parent().parent().find('.GRAVAR').html();


                        var valor = $(this).val() 
                        if ($(this).val() == "" ||  $(this).val() <= 0 || $(this).val() >=5 || valor != parseInt(valor, 10)) {
                            var novoConteudo = conteudoOriginal;
                            alert("Por favor, insira um Valor de 1 a 4 para seleccionar a versão.")
                        }
                        else {
                            var novoConteudo = $(this).val();
                        }




                        $(this).parent().text(novoConteudo);
                        $(this).parent().removeClass("celulaEmEdicao");


                        var ReplaceHref1 = hrefalterar1.replace('versao_selec=versao_selec', 'versao_selec' + '=' + novoConteudo);

                        $('#' + idconteudoOriginal).find('.GRAVAR').html(ReplaceHref1);

                        //-------------------INICIO: ACRESCENTEI para evitar passo debotão GRAVAR----
                        var href_alt = document.querySelector('#grid00conf .GRAVAR a').href
                        var href_alt_ = href_alt.replace('"','').replace('amp;','').replace('amp;','')
                       
                        var x = document.getElementsByClassName("GRAVAR");
                        var i;
                        for (i = 0; i < x.length; i++) {
                            x[i].style.display = "none";

                        }

                        //alert(ReplaceHref1);
                  
                        window.location.href = href_alt_
                     
                        //-------------------FIM: ACRESCENTEI para evitar passo debotão GRAVAR----

                    }

                });


            })
            //---------------------------------------NOTA TA: ALTERO AS CORES DO SEMAFORO DEM_RESULT------



             if (@Html.Raw(Json.Encode(ViewData["VENDAS_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["VENDAS_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["PREST_SERV_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["PREST_SERV_ANTE_ACUM"]))==("calc")) { var VENDAS_REAL_ACUM = 1; } else { var VENDAS_REAL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_REAL_ACUM"]))) + @Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_REAL_ACUM"]))); };
             if (@Html.Raw(Json.Encode(ViewData["VENDAS_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["VENDAS_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["PREST_SERV_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["PREST_SERV_ANTE_ACUM"]))==("calc")) { var VENDAS_ANTE_ACUM = 1; } else { var VENDAS_ANTE_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANTE_ACUM"]))) + @Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANTE_ACUM"]))); };
             if (@Html.Raw(Json.Encode(ViewData["EBITDA_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["EBITDA_ANTE_ACUM"]))==("calc") ) { var EBITDA_REAL_ACUM = 1; } else {var EBITDA_REAL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_REAL_ACUM"]))) };
             if (@Html.Raw(Json.Encode(ViewData["EBITDA_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["EBITDA_ANTE_ACUM"]))==("calc") ) { var EBITDA_ANTE_ACUM = 1; } else {var EBITDA_ANTE_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANTE_ACUM"]))) };



            if (VENDAS_REAL_ACUM>VENDAS_ANTE_ACUM && EBITDA_REAL_ACUM>EBITDA_ANTE_ACUM) { $("#semaforo_dem_result").addClass('semaforo verde');} else {
                if (VENDAS_REAL_ACUM<VENDAS_ANTE_ACUM && EBITDA_REAL_ACUM<EBITDA_ANTE_ACUM) { $("#semaforo_dem_result").addClass('semaforo vermelho');} else  { $("#semaforo_dem_result").addClass('semaforo amarelo');}}

            //---------------------------------------NOTA TA: ALTERO AS CORES DO SEMAFORO DEM_CMVMC------



             if (@Html.Raw(Json.Encode(ViewData["CMVMC_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["CMVMC_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc")) { var CMVMC_REAL_ACUM = 1; } else { var PESO_CMVMC_VN_REAL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_REAL_ACUM"]))) / @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_REAL_ACUM"]))); };
                 if (@Html.Raw(Json.Encode(ViewData["CMVMC_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["CMVMC_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc")) { var CMVMC_ANTE_ACUM = 1; } else { var PESO_CMVMC_VN_ANTE_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANTE_ACUM"]))) / @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANTE_ACUM"]))); };
                     if (@Html.Raw(Json.Encode(ViewData["CMVMC_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["CMVMC_ANTE_ACUM"]))==("calc") ) { var CMVMC_REAL_ACUM = 1; } else {var CMVMC_REAL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_REAL_ACUM"]))) };
                     if (@Html.Raw(Json.Encode(ViewData["CMVMC_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["CMVMC_ANTE_ACUM"]))==("calc") ) { var CMVMC_ANTE_ACUM = 1; } else {var CMVMC_ANTE_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANTE_ACUM"]))) };



                    if (PESO_CMVMC_VN_ANTE_ACUM>PESO_CMVMC_VN_REAL_ACUM && CMVMC_ANTE_ACUM>CMVMC_REAL_ACUM) { $("#semaforo_cmvmc").addClass('semaforo verde');} else {
                        if (PESO_CMVMC_VN_ANTE_ACUM<PESO_CMVMC_VN_REAL_ACUM && CMVMC_ANTE_ACUM<CMVMC_REAL_ACUM) { $("#semaforo_cmvmc").addClass('semaforo vermelho');} else  { $("#semaforo_cmvmc").addClass('semaforo amarelo');}}


                    //---------------------------------------NOTA TA: ALTERO AS CORES DO SEMAFORO DEM_FSE------



                     if (@Html.Raw(Json.Encode(ViewData["FSE_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["FSE_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc")) { var FSE_REAL_ACUM = 1; } else { var PESO_FSE_VN_REAL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["FSE_REAL_ACUM"]))) / @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_REAL_ACUM"]))); };
                         if (@Html.Raw(Json.Encode(ViewData["FSE_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["FSE_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc")) { var FSE_ANTE_ACUM = 1; } else { var PESO_FSE_VN_ANTE_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANTE_ACUM"]))) / @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANTE_ACUM"]))); };
                             if (@Html.Raw(Json.Encode(ViewData["FSE_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["FSE_ANTE_ACUM"]))==("calc") ) { var FSE_REAL_ACUM = 1; } else {var FSE_REAL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["FSE_REAL_ACUM"]))) };
                             if (@Html.Raw(Json.Encode(ViewData["FSE_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["FSE_ANTE_ACUM"]))==("calc") ) { var FSE_ANTE_ACUM = 1; } else {var FSE_ANTE_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANTE_ACUM"]))) };



                            if (PESO_FSE_VN_ANTE_ACUM>PESO_FSE_VN_REAL_ACUM && FSE_ANTE_ACUM>FSE_REAL_ACUM) { $("#semaforo_fse").addClass('semaforo verde');} else {
                                if (PESO_FSE_VN_ANTE_ACUM<PESO_FSE_VN_REAL_ACUM && FSE_ANTE_ACUM<FSE_REAL_ACUM) { $("#semaforo_fse").addClass('semaforo vermelho');} else  { $("#semaforo_fse").addClass('semaforo amarelo');}}


                            //---------------------------------------NOTA TA: ALTERO AS CORES DO SEMAFORO DEM_GASTOS_PESSOAL------



                             if (@Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc")) { var GASTOS_PESSOAL_REAL_ACUM = 1; } else { var PESO_GASTOS_PESSOAL_VN_REAL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REAL_ACUM"]))) / @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_REAL_ACUM"]))); };
                                 if (@Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc")) { var GASTOS_PESSOAL_ANTE_ACUM = 1; } else { var PESO_GASTOS_PESSOAL_VN_ANTE_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANTE_ACUM"]))) / @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANTE_ACUM"]))); };
                                     if (@Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_ANTE_ACUM"]))==("calc") ) { var GASTOS_PESSOAL_REAL_ACUM = 1; } else {var GASTOS_PESSOAL_REAL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REAL_ACUM"]))) };
                                     if (@Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_ANTE_ACUM"]))==("calc") ) { var GASTOS_PESSOAL_ANTE_ACUM = 1; } else {var GASTOS_PESSOAL_ANTE_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANTE_ACUM"]))) };



                                    if (PESO_GASTOS_PESSOAL_VN_ANTE_ACUM>PESO_GASTOS_PESSOAL_VN_REAL_ACUM && GASTOS_PESSOAL_ANTE_ACUM>GASTOS_PESSOAL_REAL_ACUM) { $("#semaforo_gastos_pessoal").addClass('semaforo verde');} else {
                                        if (PESO_GASTOS_PESSOAL_VN_ANTE_ACUM<PESO_GASTOS_PESSOAL_VN_REAL_ACUM && GASTOS_PESSOAL_ANTE_ACUM<GASTOS_PESSOAL_REAL_ACUM) { $("#semaforo_gastos_pessoal").addClass('semaforo vermelho');} else  { $("#semaforo_gastos_pessoal").addClass('semaforo amarelo');}}


                                    //---------------------------------------NOTA TA: ALTERO AS CORES DO SEMAFORO BALANCO_RESUMIDO------



                                     if (@Html.Raw(Json.Encode(ViewData["IND_AUTOM_FINANC_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_AUTOM_FINANC_ANTE_ACUM"]))==("calc") ) { var IND_AUTOM_FINANC_REAL_ACUM = 1; } else { var IND_AUTOM_FINANC_REAL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_REAL_ACUM"]))) ; };
                                     if (@Html.Raw(Json.Encode(ViewData["IND_AUTOM_FINANC_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_AUTOM_FINANC_ANTE_ACUM"]))==("calc") ) { var IND_AUTOM_FINANC_ANTE_ACUM = 1; } else { var IND_AUTOM_FINANC_ANTE_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANTE_ACUM"]))) ; };
                                     if (@Html.Raw(Json.Encode(ViewData["IND_TESOUR_LIQU_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_TESOUR_LIQU_ANTE_ACUM"]))==("calc") ) { var IND_TESOUR_LIQU_REAL_ACUM = 1; } else {var IND_TESOUR_LIQU_REAL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_REAL_ACUM"]))) };
                                     if (@Html.Raw(Json.Encode(ViewData["IND_TESOUR_LIQU_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_TESOUR_LIQU_ANTE_ACUM"]))==("calc") ) { var IND_TESOUR_LIQU_ANTE_ACUM = 1; } else {var IND_TESOUR_LIQU_ANTE_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANTE_ACUM"]))) };



                                    if (IND_AUTOM_FINANC_REAL_ACUM>IND_AUTOM_FINANC_ANTE_ACUM && IND_TESOUR_LIQU_REAL_ACUM>IND_TESOUR_LIQU_ANTE_ACUM) { $("#semaforo_balanco_resumido").addClass('semaforo verde');} else {
                                        if (IND_AUTOM_FINANC_REAL_ACUM<IND_AUTOM_FINANC_ANTE_ACUM && IND_TESOUR_LIQU_REAL_ACUM<IND_TESOUR_LIQU_ANTE_ACUM) { $("#semaforo_balanco_resumido").addClass('semaforo vermelho');} else  { $("#semaforo_balanco_resumido").addClass('semaforo amarelo');}}


                                    //---------------------------------------NOTA TA: ALTERO AS CORES DO SEMAFORO CFLOW------


                                     if (@Html.Raw(Json.Encode(ViewData["CFLOW_FLUX_CAIXA_BRUTO_REAL_ACUM"]))=="calc" ) { var CFLOW_FLUX_CAIXA_BRUTO_REAL_ACUM = 1 ;} else { var CFLOW_FLUX_CAIXA_BRUTO_REAL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_REAL_ACUM"]))) ; };
                                     if (@Html.Raw(Json.Encode(ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANTE_ACUM"]))=="calc"  ) { var CFLOW_FLUX_CAIXA_BRUTO_ANTE_ACUM = 1 ;} else { var CFLOW_FLUX_CAIXA_BRUTO_ANTE_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANTE_ACUM"]))) ; };
                                     if (@Html.Raw(Json.Encode(ViewData["CFLOW_FLUX_CAIXA_TOTAL_REAL_ACUM"]))=="calc"  ) { var CFLOW_FLUX_CAIXA_TOTAL_REAL_ACUM = 1 ;} else {var CFLOW_FLUX_CAIXA_TOTAL_REAL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_REAL_ACUM"]))) };
                                    if (@Html.Raw(Json.Encode(ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANTE_ACUM"]))=="calc"  ) { var CFLOW_FLUX_CAIXA_TOTAL_ANTE_ACUM = 1 ;} else {var CFLOW_FLUX_CAIXA_TOTAL_ANTE_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANTE_ACUM"]))) };




                                    if (CFLOW_FLUX_CAIXA_BRUTO_REAL_ACUM>CFLOW_FLUX_CAIXA_BRUTO_ANTE_ACUM && CFLOW_FLUX_CAIXA_TOTAL_REAL_ACUM>CFLOW_FLUX_CAIXA_TOTAL_ANTE_ACUM) { $("#semaforo_cflow").addClass('semaforo verde');} else {
                                        if (CFLOW_FLUX_CAIXA_BRUTO_REAL_ACUM<CFLOW_FLUX_CAIXA_BRUTO_ANTE_ACUM && CFLOW_FLUX_CAIXA_TOTAL_REAL_ACUM<CFLOW_FLUX_CAIXA_TOTAL_ANTE_ACUM) { $("#semaforo_cflow").addClass('semaforo vermelho');} else  { $("#semaforo_cflow").addClass('semaforo amarelo');}}

                                     //---------------------------------------NOTA TA: ALTERO AS CORES DO SEMAFORO INDICADORES------


                                    if (@Html.Raw(Json.Encode(ViewData["IND_MARG_EBITDA_PERC_REAL_ACUM"]))=="calc" ) { var IND_MARG_EBITDA_PERC_REAL_ACUM = 1 ;} else { var IND_MARG_EBITDA_PERC_REAL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_MARG_EBITDA_PERC_REAL_ACUM"]))) ; };
                                    if (@Html.Raw(Json.Encode(ViewData["IND_MARG_EBITDA_PERC_ANTE_ACUM"]))=="calc"  ) { var IND_MARG_EBITDA_PERC_ANTE_ACUM = 1 ;} else { var IND_MARG_EBITDA_PERC_ANTE_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_MARG_EBITDA_PERC_ANTE_ACUM"]))) ; };
                                    if (@Html.Raw(Json.Encode(ViewData["IND_PASS_FINANC_EBITDA_REAL_ACUM"]))=="calc"  ) { var IND_PASS_FINANC_EBITDA_REAL_ACUM = 1 ;} else {var IND_PASS_FINANC_EBITDA_REAL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_REAL_ACUM"]))) };
                                    if (@Html.Raw(Json.Encode(ViewData["IND_PASS_FINANC_EBITDA_ANTE_ACUM"]))=="calc"  ) { var IND_PASS_FINANC_EBITDA_ANTE_ACUM = 1 ;} else {var IND_PASS_FINANC_EBITDA_ANTE_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANTE_ACUM"]))) };




                                    if (IND_MARG_EBITDA_PERC_REAL_ACUM>IND_MARG_EBITDA_PERC_ANTE_ACUM && IND_PASS_FINANC_EBITDA_REAL_ACUM>IND_PASS_FINANC_EBITDA_ANTE_ACUM) { $("#semaforo_indicadores").addClass('semaforo verde');} else {
                                        if (IND_MARG_EBITDA_PERC_REAL_ACUM<IND_MARG_EBITDA_PERC_ANTE_ACUM && IND_PASS_FINANC_EBITDA_REAL_ACUM<IND_PASS_FINANC_EBITDA_ANTE_ACUM) { $("#semaforo_indicadores").addClass('semaforo vermelho');} else  { $("#semaforo_indicadores").addClass('semaforo amarelo');}}





                                } )

    </script>


}


<script src="@Url.Content("~/Scripts/chart.js@2.8.0.js")"></script>



@*------------------------------------------------GRAFICO_DEM_RESULT_MENSAL_COMP-----------------------------------------------------------*@
<script>

    var ANO_VERSAO_REAL = @Html.Raw((string.Format("{0:0}", ViewData["ANO_VERSAO_REAL"])));
    var ANO_VERSAO_REAL_ = ANO_VERSAO_REAL.toString().substr(ANO_VERSAO_REAL.toString().length - 2,ANO_VERSAO_REAL.toString().length);

    var ANO_VERSAO_ANTE = @Html.Raw((string.Format("{0:0}", ViewData["ANO_VERSAO_ANTE"])));
    var ANO_VERSAO_ANTE_ = ANO_VERSAO_ANTE.toString().substr(ANO_VERSAO_ANTE.toString().length - 2,ANO_VERSAO_ANTE.toString().length);


    if(@ViewData["MES_ACUM_REAL"]<1){ var IND_EBITDA_ANO_N_JANEIRO_ACUM = 'nd'; var IND_EBITDA_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var IND_EBITDA_ANO_N_JANEIRO_ACUM= @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_JANEIRO_ACUM"]))); var IND_EBITDA_ANO_N_JANEIRO_ACUM_MAX_MIN = IND_EBITDA_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var IND_EBITDA_ANO_N_FEVEREIRO_ACUM = 'nd'; var IND_EBITDA_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var IND_EBITDA_ANO_N_FEVEREIRO_ACUM= @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_FEVEREIRO_ACUM"]))); var IND_EBITDA_ANO_N_FEVEREIRO_ACUM_MAX_MIN = IND_EBITDA_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var IND_EBITDA_ANO_N_MARCO_ACUM = 'nd'; var IND_EBITDA_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var IND_EBITDA_ANO_N_MARCO_ACUM= @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_MARCO_ACUM"]))); var IND_EBITDA_ANO_N_MARCO_ACUM_MAX_MIN = IND_EBITDA_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var IND_EBITDA_ANO_N_ABRIL_ACUM = 'nd'; var IND_EBITDA_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var IND_EBITDA_ANO_N_ABRIL_ACUM= @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_ABRIL_ACUM"]))); var IND_EBITDA_ANO_N_ABRIL_ACUM_MAX_MIN = IND_EBITDA_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var IND_EBITDA_ANO_N_MAIO_ACUM = 'nd'; var IND_EBITDA_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var IND_EBITDA_ANO_N_MAIO_ACUM= @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_MAIO_ACUM"]))); var IND_EBITDA_ANO_N_MAIO_ACUM_MAX_MIN = IND_EBITDA_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var IND_EBITDA_ANO_N_JUNHO_ACUM = 'nd'; var IND_EBITDA_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var IND_EBITDA_ANO_N_JUNHO_ACUM= @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_JUNHO_ACUM"]))); var IND_EBITDA_ANO_N_JUNHO_ACUM_MAX_MIN = IND_EBITDA_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var IND_EBITDA_ANO_N_JULHO_ACUM = 'nd'; var IND_EBITDA_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var IND_EBITDA_ANO_N_JULHO_ACUM= @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_JULHO_ACUM"]))); var IND_EBITDA_ANO_N_JULHO_ACUM_MAX_MIN = IND_EBITDA_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var IND_EBITDA_ANO_N_AGOSTO_ACUM = 'nd'; var IND_EBITDA_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var IND_EBITDA_ANO_N_AGOSTO_ACUM= @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_AGOSTO_ACUM"]))); var IND_EBITDA_ANO_N_AGOSTO_ACUM_MAX_MIN = IND_EBITDA_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var IND_EBITDA_ANO_N_SETEMBRO_ACUM = 'nd'; var IND_EBITDA_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var IND_EBITDA_ANO_N_SETEMBRO_ACUM= @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_SETEMBRO_ACUM"]))); var IND_EBITDA_ANO_N_SETEMBRO_ACUM_MAX_MIN = IND_EBITDA_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var IND_EBITDA_ANO_N_OUTUBRO_ACUM = 'nd'; var IND_EBITDA_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var IND_EBITDA_ANO_N_OUTUBRO_ACUM= @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_OUTUBRO_ACUM"]))); var IND_EBITDA_ANO_N_OUTUBRO_ACUM_MAX_MIN = IND_EBITDA_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var IND_EBITDA_ANO_N_NOVEMBRO_ACUM = 'nd'; var IND_EBITDA_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var IND_EBITDA_ANO_N_NOVEMBRO_ACUM= @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_NOVEMBRO_ACUM"]))); var IND_EBITDA_ANO_N_NOVEMBRO_ACUM_MAX_MIN = IND_EBITDA_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var IND_EBITDA_ANO_N_DEZEMBRO_ACUM = 'nd'; var IND_EBITDA_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var IND_EBITDA_ANO_N_DEZEMBRO_ACUM= @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_DEZEMBRO_ACUM"]))); var IND_EBITDA_ANO_N_DEZEMBRO_ACUM_MAX_MIN = IND_EBITDA_ANO_N_DEZEMBRO_ACUM };

    if(@ViewData["MES_ACUM_REAL"]<1){ var VENDAS_ANO_N_JANEIRO = 'nd'; var VENDAS_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var VENDAS_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_JANEIRO"]))); var VENDAS_ANO_N_JANEIRO_MAX_MIN = VENDAS_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var VENDAS_ANO_N_FEVEREIRO = 'nd'; var VENDAS_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var VENDAS_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_FEVEREIRO"]))); var VENDAS_ANO_N_FEVEREIRO_MAX_MIN = VENDAS_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var VENDAS_ANO_N_MARCO = 'nd'; var VENDAS_ANO_N_MARCO_MAX_MIN = 0;  } else { var VENDAS_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_MARCO"]))); var VENDAS_ANO_N_MARCO_MAX_MIN = VENDAS_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var VENDAS_ANO_N_ABRIL = 'nd'; var VENDAS_ANO_N_ABRIL_MAX_MIN = 0;  } else { var VENDAS_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_ABRIL"]))); var VENDAS_ANO_N_ABRIL_MAX_MIN = VENDAS_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var VENDAS_ANO_N_MAIO = 'nd'; var VENDAS_ANO_N_MAIO_MAX_MIN = 0;  } else { var VENDAS_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_MAIO"]))); var VENDAS_ANO_N_MAIO_MAX_MIN = VENDAS_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var VENDAS_ANO_N_JUNHO = 'nd'; var VENDAS_ANO_N_JUNHO_MAX_MIN = 0;  } else { var VENDAS_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_JUNHO"]))); var VENDAS_ANO_N_JUNHO_MAX_MIN = VENDAS_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var VENDAS_ANO_N_JULHO = 'nd'; var VENDAS_ANO_N_JULHO_MAX_MIN = 0;  } else { var VENDAS_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_JULHO"]))); var VENDAS_ANO_N_JULHO_MAX_MIN = VENDAS_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var VENDAS_ANO_N_AGOSTO = 'nd'; var VENDAS_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var VENDAS_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_AGOSTO"]))); var VENDAS_ANO_N_AGOSTO_MAX_MIN = VENDAS_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var VENDAS_ANO_N_SETEMBRO = 'nd'; var VENDAS_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var VENDAS_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_SETEMBRO"]))); var VENDAS_ANO_N_SETEMBRO_MAX_MIN = VENDAS_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var VENDAS_ANO_N_OUTUBRO = 'nd'; var VENDAS_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var VENDAS_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_OUTUBRO"]))); var VENDAS_ANO_N_OUTUBRO_MAX_MIN = VENDAS_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var VENDAS_ANO_N_NOVEMBRO = 'nd'; var VENDAS_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var VENDAS_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_NOVEMBRO"]))); var VENDAS_ANO_N_NOVEMBRO_MAX_MIN = VENDAS_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var VENDAS_ANO_N_DEZEMBRO = 'nd'; var VENDAS_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var VENDAS_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_DEZEMBRO"]))); var VENDAS_ANO_N_DEZEMBRO_MAX_MIN = VENDAS_ANO_N_DEZEMBRO };


    if(@ViewData["MES_ACUM_REAL"]<1){ var PREST_SERV_ANO_N_JANEIRO = 'nd'; var PREST_SERV_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var PREST_SERV_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_JANEIRO"]))); var PREST_SERV_ANO_N_JANEIRO_MAX_MIN = PREST_SERV_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var PREST_SERV_ANO_N_FEVEREIRO = 'nd'; var PREST_SERV_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var PREST_SERV_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_FEVEREIRO"]))); var PREST_SERV_ANO_N_FEVEREIRO_MAX_MIN = PREST_SERV_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var PREST_SERV_ANO_N_MARCO = 'nd'; var PREST_SERV_ANO_N_MARCO_MAX_MIN = 0;  } else { var PREST_SERV_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_MARCO"]))); var PREST_SERV_ANO_N_MARCO_MAX_MIN = PREST_SERV_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var PREST_SERV_ANO_N_ABRIL = 'nd'; var PREST_SERV_ANO_N_ABRIL_MAX_MIN = 0;  } else { var PREST_SERV_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_ABRIL"]))); var PREST_SERV_ANO_N_ABRIL_MAX_MIN = PREST_SERV_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var PREST_SERV_ANO_N_MAIO = 'nd'; var PREST_SERV_ANO_N_MAIO_MAX_MIN = 0;  } else { var PREST_SERV_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_MAIO"]))); var PREST_SERV_ANO_N_MAIO_MAX_MIN = PREST_SERV_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var PREST_SERV_ANO_N_JUNHO = 'nd'; var PREST_SERV_ANO_N_JUNHO_MAX_MIN = 0;  } else { var PREST_SERV_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_JUNHO"]))); var PREST_SERV_ANO_N_JUNHO_MAX_MIN = PREST_SERV_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var PREST_SERV_ANO_N_JULHO = 'nd'; var PREST_SERV_ANO_N_JULHO_MAX_MIN = 0;  } else { var PREST_SERV_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_JULHO"]))); var PREST_SERV_ANO_N_JULHO_MAX_MIN = PREST_SERV_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var PREST_SERV_ANO_N_AGOSTO = 'nd'; var PREST_SERV_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var PREST_SERV_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_AGOSTO"]))); var PREST_SERV_ANO_N_AGOSTO_MAX_MIN = PREST_SERV_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var PREST_SERV_ANO_N_SETEMBRO = 'nd'; var PREST_SERV_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var PREST_SERV_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_SETEMBRO"]))); var PREST_SERV_ANO_N_SETEMBRO_MAX_MIN = PREST_SERV_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var PREST_SERV_ANO_N_OUTUBRO = 'nd'; var PREST_SERV_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var PREST_SERV_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_OUTUBRO"]))); var PREST_SERV_ANO_N_OUTUBRO_MAX_MIN = PREST_SERV_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var PREST_SERV_ANO_N_NOVEMBRO = 'nd'; var PREST_SERV_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var PREST_SERV_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_NOVEMBRO"]))); var PREST_SERV_ANO_N_NOVEMBRO_MAX_MIN = PREST_SERV_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var PREST_SERV_ANO_N_DEZEMBRO = 'nd'; var PREST_SERV_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var PREST_SERV_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_DEZEMBRO"]))); var PREST_SERV_ANO_N_DEZEMBRO_MAX_MIN = PREST_SERV_ANO_N_DEZEMBRO };


    var VENDAS_ANO_N_JANEIRO_ACUM = VENDAS_ANO_N_JANEIRO + PREST_SERV_ANO_N_JANEIRO;
    var VENDAS_ANO_N_FEVEREIRO_ACUM = VENDAS_ANO_N_FEVEREIRO + PREST_SERV_ANO_N_FEVEREIRO + VENDAS_ANO_N_JANEIRO_ACUM;
    var VENDAS_ANO_N_MARCO_ACUM = VENDAS_ANO_N_MARCO + PREST_SERV_ANO_N_MARCO + VENDAS_ANO_N_FEVEREIRO_ACUM;
    var VENDAS_ANO_N_ABRIL_ACUM = VENDAS_ANO_N_ABRIL+ PREST_SERV_ANO_N_ABRIL + VENDAS_ANO_N_MARCO_ACUM;
    var VENDAS_ANO_N_MAIO_ACUM = VENDAS_ANO_N_MAIO + PREST_SERV_ANO_N_MAIO + VENDAS_ANO_N_ABRIL_ACUM;
    var VENDAS_ANO_N_JUNHO_ACUM = VENDAS_ANO_N_JUNHO + PREST_SERV_ANO_N_JUNHO + VENDAS_ANO_N_MAIO_ACUM;
    var VENDAS_ANO_N_JULHO_ACUM = VENDAS_ANO_N_JULHO + PREST_SERV_ANO_N_JULHO + VENDAS_ANO_N_JUNHO_ACUM;
    var VENDAS_ANO_N_AGOSTO_ACUM = VENDAS_ANO_N_AGOSTO + PREST_SERV_ANO_N_AGOSTO + VENDAS_ANO_N_JULHO_ACUM;
    var VENDAS_ANO_N_SETEMBRO_ACUM = VENDAS_ANO_N_SETEMBRO + PREST_SERV_ANO_N_SETEMBRO + VENDAS_ANO_N_AGOSTO_ACUM;
    var VENDAS_ANO_N_OUTUBRO_ACUM = VENDAS_ANO_N_OUTUBRO + PREST_SERV_ANO_N_OUTUBRO + VENDAS_ANO_N_SETEMBRO_ACUM;
    var VENDAS_ANO_N_NOVEMBRO_ACUM = VENDAS_ANO_N_NOVEMBRO + PREST_SERV_ANO_N_NOVEMBRO + VENDAS_ANO_N_OUTUBRO_ACUM;
    var VENDAS_ANO_N_DEZEMBRO_ACUM = VENDAS_ANO_N_DEZEMBRO + PREST_SERV_ANO_N_DEZEMBRO + VENDAS_ANO_N_NOVEMBRO_ACUM;

    if(@ViewData["MES_ACUM_REAL"]<1){ var VENDAS_ANO_N_JANEIRO_ACUM = 'nd'; var VENDAS_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var VENDAS_ANO_N_JANEIRO_ACUM_MAX_MIN = VENDAS_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var VENDAS_ANO_N_FEVEREIRO_ACUM = 'nd'; var VENDAS_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else {  var VENDAS_ANO_N_FEVEREIRO_ACUM_MAX_MIN = VENDAS_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var VENDAS_ANO_N_MARCO_ACUM = 'nd'; var VENDAS_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else {  var VENDAS_ANO_N_MARCO_ACUM_MAX_MIN = VENDAS_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var VENDAS_ANO_N_ABRIL_ACUM = 'nd'; var VENDAS_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else {  var VENDAS_ANO_N_ABRIL_ACUM_MAX_MIN = VENDAS_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var VENDAS_ANO_N_MAIO_ACUM = 'nd'; var VENDAS_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else {  var VENDAS_ANO_N_MAIO_ACUM_MAX_MIN = VENDAS_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var VENDAS_ANO_N_JUNHO_ACUM = 'nd'; var VENDAS_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var VENDAS_ANO_N_JUNHO_ACUM_MAX_MIN = VENDAS_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var VENDAS_ANO_N_JULHO_ACUM = 'nd'; var VENDAS_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else {  var VENDAS_ANO_N_JULHO_ACUM_MAX_MIN = VENDAS_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var VENDAS_ANO_N_AGOSTO_ACUM = 'nd'; var VENDAS_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else {  var VENDAS_ANO_N_AGOSTO_ACUM_MAX_MIN = VENDAS_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var VENDAS_ANO_N_SETEMBRO_ACUM = 'nd'; var VENDAS_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var VENDAS_ANO_N_SETEMBRO_ACUM_MAX_MIN = VENDAS_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var VENDAS_ANO_N_OUTUBRO_ACUM = 'nd'; var VENDAS_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else {  var VENDAS_ANO_N_OUTUBRO_ACUM_MAX_MIN = VENDAS_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var VENDAS_ANO_N_NOVEMBRO_ACUM = 'nd'; var VENDAS_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else {  var VENDAS_ANO_N_NOVEMBRO_ACUM_MAX_MIN = VENDAS_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var VENDAS_ANO_N_DEZEMBRO_ACUM = 'nd'; var VENDAS_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else {  var VENDAS_ANO_N_DEZEMBRO_ACUM_MAX_MIN = VENDAS_ANO_N_DEZEMBRO_ACUM };


    var VENDAS_ANO_N_1_JANEIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_JANEIRO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_JANEIRO"])));
    var VENDAS_ANO_N_1_FEVEREIRO_ACUM =@Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_FEVEREIRO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_FEVEREIRO"])))+VENDAS_ANO_N_1_JANEIRO_ACUM;
    var VENDAS_ANO_N_1_MARCO_ACUM =@Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_MARCO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_MARCO"])))+VENDAS_ANO_N_1_FEVEREIRO_ACUM;
    var VENDAS_ANO_N_1_ABRIL_ACUM =@Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_ABRIL"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_ABRIL"])))+VENDAS_ANO_N_1_MARCO_ACUM;
    var VENDAS_ANO_N_1_MAIO_ACUM =@Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_MAIO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_MAIO"])))+VENDAS_ANO_N_1_ABRIL_ACUM;
    var VENDAS_ANO_N_1_JUNHO_ACUM =@Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_JUNHO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_JUNHO"])))+VENDAS_ANO_N_1_MAIO_ACUM;
    var VENDAS_ANO_N_1_JULHO_ACUM =@Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_JULHO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_JULHO"])))+VENDAS_ANO_N_1_JUNHO_ACUM;
    var VENDAS_ANO_N_1_AGOSTO_ACUM =@Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_AGOSTO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_AGOSTO"])))+VENDAS_ANO_N_1_JULHO_ACUM;
    var VENDAS_ANO_N_1_SETEMBRO_ACUM =@Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_SETEMBRO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_SETEMBRO"])))+VENDAS_ANO_N_1_AGOSTO_ACUM;
    var VENDAS_ANO_N_1_OUTUBRO_ACUM =@Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_OUTUBRO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_OUTUBRO"])))+VENDAS_ANO_N_1_SETEMBRO_ACUM;
    var VENDAS_ANO_N_1_NOVEMBRO_ACUM =@Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_NOVEMBRO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_NOVEMBRO"])))+VENDAS_ANO_N_1_OUTUBRO_ACUM;
    var VENDAS_ANO_N_1_DEZEMBRO_ACUM =@Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_DEZEMBRO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_DEZEMBRO"])))+VENDAS_ANO_N_1_NOVEMBRO_ACUM;

    var Dem_Resul_Eixo_max_princ= Math.max( IND_EBITDA_ANO_N_JANEIRO_ACUM_MAX_MIN,
                       IND_EBITDA_ANO_N_FEVEREIRO_ACUM_MAX_MIN,
                       IND_EBITDA_ANO_N_MARCO_ACUM_MAX_MIN,
                       IND_EBITDA_ANO_N_ABRIL_ACUM_MAX_MIN,
                       IND_EBITDA_ANO_N_MAIO_ACUM_MAX_MIN,
                       IND_EBITDA_ANO_N_JUNHO_ACUM_MAX_MIN,
                       IND_EBITDA_ANO_N_JULHO_ACUM_MAX_MIN,
                       IND_EBITDA_ANO_N_AGOSTO_ACUM_MAX_MIN,
                       IND_EBITDA_ANO_N_SETEMBRO_ACUM_MAX_MIN,
                       IND_EBITDA_ANO_N_OUTUBRO_ACUM_MAX_MIN,
                       IND_EBITDA_ANO_N_NOVEMBRO_ACUM_MAX_MIN,
                       IND_EBITDA_ANO_N_DEZEMBRO_ACUM_MAX_MIN,

                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_JANEIRO_ACUM"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_FEVEREIRO_ACUM"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_MARCO_ACUM"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_ABRIL_ACUM"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_MAIO_ACUM"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_JUNHO_ACUM"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_JULHO_ACUM"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_AGOSTO_ACUM"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_SETEMBRO_ACUM"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_OUTUBRO_ACUM"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_NOVEMBRO_ACUM"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_DEZEMBRO_ACUM"]))),
                             );
    var Dem_Resul_Eixo_min_princ= Math.min(  IND_EBITDA_ANO_N_JANEIRO_ACUM_MAX_MIN,
                       IND_EBITDA_ANO_N_FEVEREIRO_ACUM_MAX_MIN,
                       IND_EBITDA_ANO_N_MARCO_ACUM_MAX_MIN,
                       IND_EBITDA_ANO_N_ABRIL_ACUM_MAX_MIN,
                       IND_EBITDA_ANO_N_MAIO_ACUM_MAX_MIN,
                       IND_EBITDA_ANO_N_JUNHO_ACUM_MAX_MIN,
                       IND_EBITDA_ANO_N_JULHO_ACUM_MAX_MIN,
                       IND_EBITDA_ANO_N_AGOSTO_ACUM_MAX_MIN,
                       IND_EBITDA_ANO_N_SETEMBRO_ACUM_MAX_MIN,
                       IND_EBITDA_ANO_N_OUTUBRO_ACUM_MAX_MIN,
                       IND_EBITDA_ANO_N_NOVEMBRO_ACUM_MAX_MIN,
                       IND_EBITDA_ANO_N_DEZEMBRO_ACUM_MAX_MIN,

                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_JANEIRO_ACUM"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_FEVEREIRO_ACUM"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_MARCO_ACUM"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_ABRIL_ACUM"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_MAIO_ACUM"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_JUNHO_ACUM"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_JULHO_ACUM"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_AGOSTO_ACUM"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_SETEMBRO_ACUM"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_OUTUBRO_ACUM"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_NOVEMBRO_ACUM"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_DEZEMBRO_ACUM"]))),
                           );




    var Dem_Resul_Eixo_max_secon= Math.max(
                       VENDAS_ANO_N_JANEIRO_MAX_MIN + PREST_SERV_ANO_N_JANEIRO_MAX_MIN,
                       VENDAS_ANO_N_FEVEREIRO_MAX_MIN + PREST_SERV_ANO_N_FEVEREIRO_MAX_MIN,
                       VENDAS_ANO_N_MARCO_MAX_MIN + PREST_SERV_ANO_N_MARCO_MAX_MIN,
                       VENDAS_ANO_N_ABRIL_MAX_MIN + PREST_SERV_ANO_N_ABRIL_MAX_MIN,
                       VENDAS_ANO_N_MAIO_MAX_MIN +  PREST_SERV_ANO_N_MAIO_MAX_MIN,
                       VENDAS_ANO_N_JUNHO_MAX_MIN + PREST_SERV_ANO_N_JUNHO_MAX_MIN,
                       VENDAS_ANO_N_JULHO_MAX_MIN +  PREST_SERV_ANO_N_JULHO_MAX_MIN,
                       VENDAS_ANO_N_AGOSTO_MAX_MIN + PREST_SERV_ANO_N_AGOSTO_MAX_MIN,
                       VENDAS_ANO_N_SETEMBRO_MAX_MIN + PREST_SERV_ANO_N_SETEMBRO_MAX_MIN,
                       VENDAS_ANO_N_OUTUBRO_MAX_MIN + PREST_SERV_ANO_N_OUTUBRO_MAX_MIN,
                       VENDAS_ANO_N_NOVEMBRO_MAX_MIN + PREST_SERV_ANO_N_NOVEMBRO_MAX_MIN,
                       VENDAS_ANO_N_DEZEMBRO_MAX_MIN + PREST_SERV_ANO_N_DEZEMBRO_MAX_MIN,



                            @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_JANEIRO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_FEVEREIRO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_MARCO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_ABRIL"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_MAIO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_JUNHO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_JULHO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_AGOSTO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_SETEMBRO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_OUTUBRO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_NOVEMBRO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_DEZEMBRO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_DEZEMBRO"]))),

                            );
    var Dem_Resul_Eixo_min_secon= Math.min(
                       VENDAS_ANO_N_JANEIRO_MAX_MIN + PREST_SERV_ANO_N_JANEIRO_MAX_MIN,
                       VENDAS_ANO_N_FEVEREIRO_MAX_MIN + PREST_SERV_ANO_N_FEVEREIRO_MAX_MIN,
                       VENDAS_ANO_N_MARCO_MAX_MIN + PREST_SERV_ANO_N_MARCO_MAX_MIN,
                       VENDAS_ANO_N_ABRIL_MAX_MIN + PREST_SERV_ANO_N_ABRIL_MAX_MIN,
                       VENDAS_ANO_N_MAIO_MAX_MIN +  PREST_SERV_ANO_N_MAIO_MAX_MIN,
                       VENDAS_ANO_N_JUNHO_MAX_MIN + PREST_SERV_ANO_N_JUNHO_MAX_MIN,
                       VENDAS_ANO_N_JULHO_MAX_MIN +  PREST_SERV_ANO_N_JULHO_MAX_MIN,
                       VENDAS_ANO_N_AGOSTO_MAX_MIN + PREST_SERV_ANO_N_AGOSTO_MAX_MIN,
                       VENDAS_ANO_N_SETEMBRO_MAX_MIN + PREST_SERV_ANO_N_SETEMBRO_MAX_MIN,
                       VENDAS_ANO_N_OUTUBRO_MAX_MIN + PREST_SERV_ANO_N_OUTUBRO_MAX_MIN,
                       VENDAS_ANO_N_NOVEMBRO_MAX_MIN + PREST_SERV_ANO_N_NOVEMBRO_MAX_MIN,
                       VENDAS_ANO_N_DEZEMBRO_MAX_MIN + PREST_SERV_ANO_N_DEZEMBRO_MAX_MIN,


                           @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_JANEIRO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_FEVEREIRO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_MARCO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_ABRIL"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_MAIO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_JUNHO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_JULHO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_AGOSTO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_SETEMBRO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_OUTUBRO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_NOVEMBRO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_DEZEMBRO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_DEZEMBRO"]))),

                          );

    //NOTA TA: Aqui trato o minimo e o maximo do eixo principal
    if(Math.abs(Dem_Resul_Eixo_max_princ)>=Math.abs(Dem_Resul_Eixo_min_princ))
    {
        var Dem_Resul_Eixo_max_princ_=(Math.ceil(Dem_Resul_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(Dem_Resul_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Dem_Resul_Eixo_max_princ),0).toString().length-1);
        var Dem_Resul_Eixo_min_princ_= (Math.floor(Dem_Resul_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(Dem_Resul_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Dem_Resul_Eixo_max_princ),0).toString().length-1);
        //alert(Dem_Resul_Eixo_max_princ_);
        //alert(Dem_Resul_Eixo_min_princ_);
    }
    else
    {
        var Dem_Resul_Eixo_max_princ_=(Math.ceil(Dem_Resul_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(Dem_Resul_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Dem_Resul_Eixo_min_princ),0).toString().length-1);
        var Dem_Resul_Eixo_min_princ_= (Math.floor(Dem_Resul_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(Dem_Resul_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Dem_Resul_Eixo_min_princ),0).toString().length-1);}

    //NOTA TA: Aqui trato o minimo e o maximo do eixo secundario

    if(Math.abs(Dem_Resul_Eixo_max_secon)>=Math.abs(Dem_Resul_Eixo_min_secon))
    {
        var Dem_Resul_Eixo_max_secon_=(Math.ceil(Dem_Resul_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(Dem_Resul_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Dem_Resul_Eixo_max_secon),0).toString().length-1);
        var Dem_Resul_Eixo_min_secon_= (Math.floor(Dem_Resul_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(Dem_Resul_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Dem_Resul_Eixo_max_secon),0).toString().length-1);
        //alert(Dem_Resul_Eixo_max_secon_);
        //alert(Dem_Resul_Eixo_min_secon_);
    }
    else
    {
        var Dem_Resul_Eixo_max_secon_=(Math.ceil(Dem_Resul_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(Dem_Resul_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Dem_Resul_Eixo_min_secon),0).toString().length-1);
        var Dem_Resul_Eixo_min_secon_= (Math.floor(Dem_Resul_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(Dem_Resul_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Dem_Resul_Eixo_min_secon),0).toString().length-1);}


    if(Math.abs(Dem_Resul_Eixo_min_princ)/Math.abs(Dem_Resul_Eixo_max_princ)>=Math.abs(Dem_Resul_Eixo_min_secon)/Math.abs(Dem_Resul_Eixo_max_secon))
    { if(Dem_Resul_Eixo_max_princ > 0 && Dem_Resul_Eixo_min_princ <0 ){ var Dem_Resul_Eixo_min_secon__=(Dem_Resul_Eixo_min_princ_*Dem_Resul_Eixo_max_secon_)/Dem_Resul_Eixo_max_princ_;} else { var Dem_Resul_Eixo_min_secon__=Dem_Resul_Eixo_min_secon_;}
        if(Dem_Resul_Eixo_max_secon > 0 && Dem_Resul_Eixo_min_secon <0 ){ var Dem_Resul_Eixo_min_princ__=(Dem_Resul_Eixo_min_secon__*Dem_Resul_Eixo_max_princ_)/Dem_Resul_Eixo_max_secon_;} else { var Dem_Resul_Eixo_min_princ__=Dem_Resul_Eixo_min_princ_;}}
    else
    {if(Dem_Resul_Eixo_max_secon > 0 && Dem_Resul_Eixo_min_secon <0 ){ var Dem_Resul_Eixo_min_princ__=(Dem_Resul_Eixo_min_secon_*Dem_Resul_Eixo_max_princ_)/Dem_Resul_Eixo_max_secon_;} else { var Dem_Resul_Eixo_min_princ__=Dem_Resul_Eixo_min_princ_;}
        if(Dem_Resul_Eixo_max_princ > 0 && Dem_Resul_Eixo_min_princ <0 ){ var Dem_Resul_Eixo_min_secon__=(Dem_Resul_Eixo_min_princ__*Dem_Resul_Eixo_max_secon_)/Dem_Resul_Eixo_max_princ_;} else { var Dem_Resul_Eixo_min_secon__=Dem_Resul_Eixo_min_secon_;}
    }



    if(Math.abs(Dem_Resul_Eixo_max_princ)/Math.abs(Dem_Resul_Eixo_min_princ)>=Math.abs(Dem_Resul_Eixo_max_secon)/Math.abs(Dem_Resul_Eixo_min_secon))
    { if(Dem_Resul_Eixo_min_princ > 0 && Dem_Resul_Eixo_max_princ <0 ){ var Dem_Resul_Eixo_max_secon__=(Dem_Resul_Eixo_max_princ_*Dem_Resul_Eixo_min_secon_)/Dem_Resul_Eixo_min_princ_;} else { var Dem_Resul_Eixo_max_secon__=Dem_Resul_Eixo_max_secon_;}
        if(Dem_Resul_Eixo_min_secon > 0 && Dem_Resul_Eixo_max_secon <0 ){ var Dem_Resul_Eixo_max_princ__=(Dem_Resul_Eixo_max_secon__*Dem_Resul_Eixo_min_princ_)/Dem_Resul_Eixo_min_secon_;} else { var Dem_Resul_Eixo_max_princ__=Dem_Resul_Eixo_max_princ_;}}
    else
    {if(Dem_Resul_Eixo_min_secon > 0 && Dem_Resul_Eixo_max_secon <0 ){ var Dem_Resul_Eixo_max_princ__=(Dem_Resul_Eixo_max_secon_*Dem_Resul_Eixo_min_princ_)/Dem_Resul_Eixo_min_secon_;} else { var Dem_Resul_Eixo_max_princ__=Dem_Resul_Eixo_max_princ_;}
        if(Dem_Resul_Eixo_min_princ > 0 && Dem_Resul_Eixo_max_princ <0 ){ var Dem_Resul_Eixo_max_secon__=(Dem_Resul_Eixo_max_princ__*Dem_Resul_Eixo_min_secon_)/Dem_Resul_Eixo_min_princ_;} else { var Dem_Resul_Eixo_max_secon__=Dem_Resul_Eixo_max_secon_;}
    }


    var GRAFICO_DEM_RESULT_MENSAL_COMP=document.getElementById('GRAFICO_DEM_RESULT_MENSAL_COMP').getContext('2d');

    var GRAFICO_DEM_RESULT_MENSAL_COMP=new Chart(GRAFICO_DEM_RESULT_MENSAL_COMP, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
                {
                    label:  'Vendas(ac) ' + ANO_VERSAO_REAL_,
                    yAxisID: 'A',
                    //backgroundColor: 'rgb(255, 192, 0)',
                    borderColor: 'rgb(77 , 121 , 199)',
                    data: [
                   VENDAS_ANO_N_JANEIRO_ACUM,
                   VENDAS_ANO_N_FEVEREIRO_ACUM,
                   VENDAS_ANO_N_MARCO_ACUM,
                   VENDAS_ANO_N_ABRIL_ACUM,
                   VENDAS_ANO_N_MAIO_ACUM,
                   VENDAS_ANO_N_JUNHO_ACUM,
                   VENDAS_ANO_N_JULHO_ACUM,
                   VENDAS_ANO_N_AGOSTO_ACUM,
                   VENDAS_ANO_N_SETEMBRO_ACUM,
                   VENDAS_ANO_N_OUTUBRO_ACUM,
                   VENDAS_ANO_N_NOVEMBRO_ACUM,
                   VENDAS_ANO_N_DEZEMBRO_ACUM,
                    ],
                    type: 'line'


                },
                {
                    label: 'Vendas(ac) ' + ANO_VERSAO_ANTE_,
                    yAxisID: 'A',
                    //backgroundColor: 'rgb(0, 112, 192)',
                    borderColor: 'rgb(135, 191 , 97)',
                    data: [
                   VENDAS_ANO_N_1_JANEIRO_ACUM,
                   VENDAS_ANO_N_1_FEVEREIRO_ACUM,
                   VENDAS_ANO_N_1_MARCO_ACUM,
                   VENDAS_ANO_N_1_ABRIL_ACUM,
                   VENDAS_ANO_N_1_MAIO_ACUM,
                   VENDAS_ANO_N_1_JUNHO_ACUM,
                   VENDAS_ANO_N_1_JULHO_ACUM,
                   VENDAS_ANO_N_1_AGOSTO_ACUM,
                   VENDAS_ANO_N_1_SETEMBRO_ACUM,
                   VENDAS_ANO_N_1_OUTUBRO_ACUM,
                   VENDAS_ANO_N_1_NOVEMBRO_ACUM,
                   VENDAS_ANO_N_1_DEZEMBRO_ACUM,

                    ],
                    type: 'line'
                },
            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'VENDAS e DEM. RESULT.',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [

                    { id: 'A',
                        type: 'linear',
                        position: 'left',
                        ticks: {
                            //min: Math.round(Dem_Resul_Eixo_min_secon__,0),
                            //max:  Math.round(Dem_Resul_Eixo_max_secon__,0),
                            beginAtZero: false,
                            callback: function(value, index, values) {
                                return value.toLocaleString();
                            }
                        }
                    },



                //{    id: 'B',
                //    type: 'linear',
                //    position: 'right',
                //    ticks: {
                //        //min: Math.round(Dem_Resul_Eixo_min_secon__,0),
                //        //max:  Math.round(Dem_Resul_Eixo_max_secon__,0),
                //        beginAtZero: false,
                //        callback: function(value, index, values) {
                //            return value.toLocaleString();
                //        }
                //    }
                //}



                ]
            }
        },

    });

</script>

@*------------------------------------------------GRAFICO_DEM_RESULT_MENSAL_1-----------------------------------------------------------*@
<script>
    var GRAFICO_DEM_RESULT_MENSAL_1=document.getElementById('GRAFICO_DEM_RESULT_MENSAL_1').getContext('2d');




    //NOTA TA: Aqui começo a construção do gráfico

    var GRAFICO_DEM_RESULT_MENSAL_1=new Chart(GRAFICO_DEM_RESULT_MENSAL_1, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'EBITDA(ac) ' + ANO_VERSAO_REAL_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(0 , 0 , 75)',
                   data: [
                   IND_EBITDA_ANO_N_JANEIRO_ACUM,
                   IND_EBITDA_ANO_N_FEVEREIRO_ACUM,
                   IND_EBITDA_ANO_N_MARCO_ACUM,
                   IND_EBITDA_ANO_N_ABRIL_ACUM,
                   IND_EBITDA_ANO_N_MAIO_ACUM,
                   IND_EBITDA_ANO_N_JUNHO_ACUM,
                   IND_EBITDA_ANO_N_JULHO_ACUM,
                   IND_EBITDA_ANO_N_AGOSTO_ACUM,
                   IND_EBITDA_ANO_N_SETEMBRO_ACUM,
                   IND_EBITDA_ANO_N_OUTUBRO_ACUM,
                   IND_EBITDA_ANO_N_NOVEMBRO_ACUM,
                   IND_EBITDA_ANO_N_DEZEMBRO_ACUM,
                   ],
                   type: 'line'


               },
                {
                    label:  'Vendas(m) ' + ANO_VERSAO_REAL_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(77 , 121 , 199, 0.7)',
                    borderColor: 'rgba(77 , 121 , 199, 0.7)',
                    data: [
                  VENDAS_ANO_N_JANEIRO + PREST_SERV_ANO_N_JANEIRO,
                  VENDAS_ANO_N_FEVEREIRO + PREST_SERV_ANO_N_FEVEREIRO,
                  VENDAS_ANO_N_MARCO + PREST_SERV_ANO_N_MARCO,
                  VENDAS_ANO_N_ABRIL + PREST_SERV_ANO_N_ABRIL,
                  VENDAS_ANO_N_MAIO +  PREST_SERV_ANO_N_MAIO,
                  VENDAS_ANO_N_JUNHO + PREST_SERV_ANO_N_JUNHO,
                  VENDAS_ANO_N_JULHO +  PREST_SERV_ANO_N_JULHO,
                  VENDAS_ANO_N_AGOSTO + PREST_SERV_ANO_N_AGOSTO,
                  VENDAS_ANO_N_SETEMBRO + PREST_SERV_ANO_N_SETEMBRO,
                  VENDAS_ANO_N_OUTUBRO + PREST_SERV_ANO_N_OUTUBRO,
                  VENDAS_ANO_N_NOVEMBRO + PREST_SERV_ANO_N_NOVEMBRO,
                  VENDAS_ANO_N_DEZEMBRO + PREST_SERV_ANO_N_DEZEMBRO,                   ],
                },

            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'VENDAS e EBITDA',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                min:  Math.round(Dem_Resul_Eixo_min_princ__,0),
                                                max:  Math.round(Dem_Resul_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString();
                                                }
                                            }
                                        },

                    { id: 'B',
                        type: 'linear',
                        position: 'right',
                        ticks: {
                            min: Math.round(Dem_Resul_Eixo_min_secon__,0),
                            max:  Math.round(Dem_Resul_Eixo_max_secon__,0),
                            beginAtZero: false,
                            callback: function(value, index, values) {
                                return value.toLocaleString();
                            }
                        }
                    },






                ]
            }
        },

    });

</script>


@*------------------------------------------------GRAFICO_DEM_RESULT_MENSAL_2-----------------------------------------------------------*@
<script>
    var GRAFICO_DEM_RESULT_MENSAL_2=document.getElementById('GRAFICO_DEM_RESULT_MENSAL_2').getContext('2d');

    var GRAFICO_DEM_RESULT_MENSAL_2=new Chart(GRAFICO_DEM_RESULT_MENSAL_2, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'EBITDA(ac) ' + ANO_VERSAO_ANTE_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(0 , 75 , 0)',
                   data: [
                      @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_JANEIRO_ACUM"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_FEVEREIRO_ACUM"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_MARCO_ACUM"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_ABRIL_ACUM"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_MAIO_ACUM"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_JUNHO_ACUM"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_JULHO_ACUM"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_AGOSTO_ACUM"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_SETEMBRO_ACUM"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_OUTUBRO_ACUM"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_NOVEMBRO_ACUM"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_EBITDA_ANO_N_1_DEZEMBRO_ACUM"]))),
                   ],
                   type: 'line'


               },
                {
                    label:  'Vendas(m) ' + ANO_VERSAO_ANTE_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(135, 191 , 97,0.7)',
                    borderColor: 'rgb(135, 191 , 97,0.7)',
                    data: [
                       @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_JANEIRO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_JANEIRO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_FEVEREIRO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_FEVEREIRO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_MARCO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_MARCO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_ABRIL"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_ABRIL"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_MAIO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_MAIO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_JUNHO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_JUNHO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_JULHO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_JULHO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_AGOSTO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_AGOSTO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_SETEMBRO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_SETEMBRO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_OUTUBRO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_OUTUBRO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_NOVEMBRO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_NOVEMBRO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["VENDAS_ANO_N_1_DEZEMBRO"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PREST_SERV_ANO_N_1_DEZEMBRO"]))),
                    ],
                },

            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'VENDAS e EBITDA',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                min:  Math.round(Dem_Resul_Eixo_min_princ__,0),
                                                max:  Math.round(Dem_Resul_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString();
                                                }
                                            }
                                        },

                    { id: 'B',
                        type: 'linear',
                        position: 'right',
                        ticks: {
                            min: Math.round(Dem_Resul_Eixo_min_secon__,0),
                            max:  Math.round(Dem_Resul_Eixo_max_secon__,0),
                            beginAtZero: false,
                            callback: function(value, index, values) {
                                return value.toLocaleString();
                            }
                        }
                    },






                ]
            }
        },

    });

</script>

@*------------------------------------------------GRAFICO_BALANCO_RESUMIDOCOMP_COMP-----------------------------------------------------------*@
<script>

    if(@ViewData["MES_ACUM_REAL"]<1){ var IND_AUTOM_FINANC_ANO_N_JANEIRO = 'nd'; var IND_AUTOM_FINANC_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var IND_AUTOM_FINANC_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_JANEIRO"]))); var IND_AUTOM_FINANC_ANO_N_JANEIRO_MAX_MIN = IND_AUTOM_FINANC_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var IND_AUTOM_FINANC_ANO_N_FEVEREIRO = 'nd'; var IND_AUTOM_FINANC_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var IND_AUTOM_FINANC_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_FEVEREIRO"]))); var IND_AUTOM_FINANC_ANO_N_FEVEREIRO_MAX_MIN = IND_AUTOM_FINANC_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var IND_AUTOM_FINANC_ANO_N_MARCO = 'nd'; var IND_AUTOM_FINANC_ANO_N_MARCO_MAX_MIN = 0;  } else { var IND_AUTOM_FINANC_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_MARCO"]))); var IND_AUTOM_FINANC_ANO_N_MARCO_MAX_MIN = IND_AUTOM_FINANC_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var IND_AUTOM_FINANC_ANO_N_ABRIL = 'nd'; var IND_AUTOM_FINANC_ANO_N_ABRIL_MAX_MIN = 0;  } else { var IND_AUTOM_FINANC_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_ABRIL"]))); var IND_AUTOM_FINANC_ANO_N_ABRIL_MAX_MIN = IND_AUTOM_FINANC_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var IND_AUTOM_FINANC_ANO_N_MAIO = 'nd'; var IND_AUTOM_FINANC_ANO_N_MAIO_MAX_MIN = 0;  } else { var IND_AUTOM_FINANC_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_MAIO"]))); var IND_AUTOM_FINANC_ANO_N_MAIO_MAX_MIN = IND_AUTOM_FINANC_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var IND_AUTOM_FINANC_ANO_N_JUNHO = 'nd'; var IND_AUTOM_FINANC_ANO_N_JUNHO_MAX_MIN = 0;  } else { var IND_AUTOM_FINANC_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_JUNHO"]))); var IND_AUTOM_FINANC_ANO_N_JUNHO_MAX_MIN = IND_AUTOM_FINANC_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var IND_AUTOM_FINANC_ANO_N_JULHO = 'nd'; var IND_AUTOM_FINANC_ANO_N_JULHO_MAX_MIN = 0;  } else { var IND_AUTOM_FINANC_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_JULHO"]))); var IND_AUTOM_FINANC_ANO_N_JULHO_MAX_MIN = IND_AUTOM_FINANC_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var IND_AUTOM_FINANC_ANO_N_AGOSTO = 'nd'; var IND_AUTOM_FINANC_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var IND_AUTOM_FINANC_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_AGOSTO"]))); var IND_AUTOM_FINANC_ANO_N_AGOSTO_MAX_MIN = IND_AUTOM_FINANC_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var IND_AUTOM_FINANC_ANO_N_SETEMBRO = 'nd'; var IND_AUTOM_FINANC_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var IND_AUTOM_FINANC_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_SETEMBRO"]))); var IND_AUTOM_FINANC_ANO_N_SETEMBRO_MAX_MIN = IND_AUTOM_FINANC_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var IND_AUTOM_FINANC_ANO_N_OUTUBRO = 'nd'; var IND_AUTOM_FINANC_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var IND_AUTOM_FINANC_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_OUTUBRO"]))); var IND_AUTOM_FINANC_ANO_N_OUTUBRO_MAX_MIN = IND_AUTOM_FINANC_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var IND_AUTOM_FINANC_ANO_N_NOVEMBRO = 'nd'; var IND_AUTOM_FINANC_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var IND_AUTOM_FINANC_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_NOVEMBRO"]))); var IND_AUTOM_FINANC_ANO_N_NOVEMBRO_MAX_MIN = IND_AUTOM_FINANC_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var IND_AUTOM_FINANC_ANO_N_DEZEMBRO = 'nd'; var IND_AUTOM_FINANC_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var IND_AUTOM_FINANC_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_DEZEMBRO"]))); var IND_AUTOM_FINANC_ANO_N_DEZEMBRO_MAX_MIN = IND_AUTOM_FINANC_ANO_N_DEZEMBRO };

    if(@ViewData["MES_ACUM_REAL"]<1){ var ACTIVO_TOTAL_ANO_N_JANEIRO = 'nd'; var ACTIVO_TOTAL_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var ACTIVO_TOTAL_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_JANEIRO"]))); var ACTIVO_TOTAL_ANO_N_JANEIRO_MAX_MIN = ACTIVO_TOTAL_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var ACTIVO_TOTAL_ANO_N_FEVEREIRO = 'nd'; var ACTIVO_TOTAL_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var ACTIVO_TOTAL_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_FEVEREIRO"]))); var ACTIVO_TOTAL_ANO_N_FEVEREIRO_MAX_MIN = ACTIVO_TOTAL_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var ACTIVO_TOTAL_ANO_N_MARCO = 'nd'; var ACTIVO_TOTAL_ANO_N_MARCO_MAX_MIN = 0;  } else { var ACTIVO_TOTAL_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_MARCO"]))); var ACTIVO_TOTAL_ANO_N_MARCO_MAX_MIN = ACTIVO_TOTAL_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var ACTIVO_TOTAL_ANO_N_ABRIL = 'nd'; var ACTIVO_TOTAL_ANO_N_ABRIL_MAX_MIN = 0;  } else { var ACTIVO_TOTAL_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_ABRIL"]))); var ACTIVO_TOTAL_ANO_N_ABRIL_MAX_MIN = ACTIVO_TOTAL_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var ACTIVO_TOTAL_ANO_N_MAIO = 'nd'; var ACTIVO_TOTAL_ANO_N_MAIO_MAX_MIN = 0;  } else { var ACTIVO_TOTAL_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_MAIO"]))); var ACTIVO_TOTAL_ANO_N_MAIO_MAX_MIN = ACTIVO_TOTAL_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var ACTIVO_TOTAL_ANO_N_JUNHO = 'nd'; var ACTIVO_TOTAL_ANO_N_JUNHO_MAX_MIN = 0;  } else { var ACTIVO_TOTAL_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_JUNHO"]))); var ACTIVO_TOTAL_ANO_N_JUNHO_MAX_MIN = ACTIVO_TOTAL_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var ACTIVO_TOTAL_ANO_N_JULHO = 'nd'; var ACTIVO_TOTAL_ANO_N_JULHO_MAX_MIN = 0;  } else { var ACTIVO_TOTAL_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_JULHO"]))); var ACTIVO_TOTAL_ANO_N_JULHO_MAX_MIN = ACTIVO_TOTAL_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var ACTIVO_TOTAL_ANO_N_AGOSTO = 'nd'; var ACTIVO_TOTAL_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var ACTIVO_TOTAL_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_AGOSTO"]))); var ACTIVO_TOTAL_ANO_N_AGOSTO_MAX_MIN = ACTIVO_TOTAL_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var ACTIVO_TOTAL_ANO_N_SETEMBRO = 'nd'; var ACTIVO_TOTAL_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var ACTIVO_TOTAL_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_SETEMBRO"]))); var ACTIVO_TOTAL_ANO_N_SETEMBRO_MAX_MIN = ACTIVO_TOTAL_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var ACTIVO_TOTAL_ANO_N_OUTUBRO = 'nd'; var ACTIVO_TOTAL_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var ACTIVO_TOTAL_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_OUTUBRO"]))); var ACTIVO_TOTAL_ANO_N_OUTUBRO_MAX_MIN = ACTIVO_TOTAL_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var ACTIVO_TOTAL_ANO_N_NOVEMBRO = 'nd'; var ACTIVO_TOTAL_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var ACTIVO_TOTAL_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_NOVEMBRO"]))); var ACTIVO_TOTAL_ANO_N_NOVEMBRO_MAX_MIN = ACTIVO_TOTAL_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var ACTIVO_TOTAL_ANO_N_DEZEMBRO = 'nd'; var ACTIVO_TOTAL_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var ACTIVO_TOTAL_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_DEZEMBRO"]))); var ACTIVO_TOTAL_ANO_N_DEZEMBRO_MAX_MIN = ACTIVO_TOTAL_ANO_N_DEZEMBRO };



    var Balanco_ResumidoComp_Eixo_max_princ= Math.max( IND_AUTOM_FINANC_ANO_N_JANEIRO_MAX_MIN,
                       IND_AUTOM_FINANC_ANO_N_FEVEREIRO_MAX_MIN,
                       IND_AUTOM_FINANC_ANO_N_MARCO_MAX_MIN,
                       IND_AUTOM_FINANC_ANO_N_ABRIL_MAX_MIN,
                       IND_AUTOM_FINANC_ANO_N_MAIO_MAX_MIN,
                       IND_AUTOM_FINANC_ANO_N_JUNHO_MAX_MIN,
                       IND_AUTOM_FINANC_ANO_N_JULHO_MAX_MIN,
                       IND_AUTOM_FINANC_ANO_N_AGOSTO_MAX_MIN,
                       IND_AUTOM_FINANC_ANO_N_SETEMBRO_MAX_MIN,
                       IND_AUTOM_FINANC_ANO_N_OUTUBRO_MAX_MIN,
                       IND_AUTOM_FINANC_ANO_N_NOVEMBRO_MAX_MIN,
                       IND_AUTOM_FINANC_ANO_N_DEZEMBRO_MAX_MIN,

                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_1_JANEIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_1_FEVEREIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_1_MARCO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_1_ABRIL"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_1_MAIO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_1_JUNHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_1_JULHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_1_AGOSTO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_1_SETEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_1_OUTUBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_1_NOVEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_1_DEZEMBRO"]))),
                             );
    var Balanco_ResumidoComp_Eixo_min_princ= Math.min(  IND_AUTOM_FINANC_ANO_N_JANEIRO_MAX_MIN,
                       IND_AUTOM_FINANC_ANO_N_FEVEREIRO_MAX_MIN,
                       IND_AUTOM_FINANC_ANO_N_MARCO_MAX_MIN,
                       IND_AUTOM_FINANC_ANO_N_ABRIL_MAX_MIN,
                       IND_AUTOM_FINANC_ANO_N_MAIO_MAX_MIN,
                       IND_AUTOM_FINANC_ANO_N_JUNHO_MAX_MIN,
                       IND_AUTOM_FINANC_ANO_N_JULHO_MAX_MIN,
                       IND_AUTOM_FINANC_ANO_N_AGOSTO_MAX_MIN,
                       IND_AUTOM_FINANC_ANO_N_SETEMBRO_MAX_MIN,
                       IND_AUTOM_FINANC_ANO_N_OUTUBRO_MAX_MIN,
                       IND_AUTOM_FINANC_ANO_N_NOVEMBRO_MAX_MIN,
                       IND_AUTOM_FINANC_ANO_N_DEZEMBRO_MAX_MIN,

                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_1_JANEIRO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_1_FEVEREIRO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_1_MARCO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_1_ABRIL"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_1_MAIO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_1_JUNHO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_1_JULHO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_1_AGOSTO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_1_SETEMBRO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_1_OUTUBRO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_1_NOVEMBRO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_AUTOM_FINANC_ANO_N_1_DEZEMBRO"]))),
                           );
    var Balanco_ResumidoComp_Eixo_max_secon= Math.max(
                       ACTIVO_TOTAL_ANO_N_JANEIRO_MAX_MIN,
                       ACTIVO_TOTAL_ANO_N_FEVEREIRO_MAX_MIN ,
                       ACTIVO_TOTAL_ANO_N_MARCO_MAX_MIN ,
                       ACTIVO_TOTAL_ANO_N_ABRIL_MAX_MIN ,
                       ACTIVO_TOTAL_ANO_N_MAIO_MAX_MIN ,
                       ACTIVO_TOTAL_ANO_N_JUNHO_MAX_MIN ,
                       ACTIVO_TOTAL_ANO_N_JULHO_MAX_MIN ,
                       ACTIVO_TOTAL_ANO_N_AGOSTO_MAX_MIN ,
                       ACTIVO_TOTAL_ANO_N_SETEMBRO_MAX_MIN ,
                       ACTIVO_TOTAL_ANO_N_OUTUBRO_MAX_MIN ,
                       ACTIVO_TOTAL_ANO_N_NOVEMBRO_MAX_MIN ,
                       ACTIVO_TOTAL_ANO_N_DEZEMBRO_MAX_MIN ,



                            @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_DEZEMBRO"]))),

                            );
    var Balanco_ResumidoComp_Eixo_min_secon= Math.min(
                       ACTIVO_TOTAL_ANO_N_JANEIRO_MAX_MIN ,
                       ACTIVO_TOTAL_ANO_N_FEVEREIRO_MAX_MIN ,
                       ACTIVO_TOTAL_ANO_N_MARCO_MAX_MIN ,
                       ACTIVO_TOTAL_ANO_N_ABRIL_MAX_MIN ,
                       ACTIVO_TOTAL_ANO_N_MAIO_MAX_MIN ,
                       ACTIVO_TOTAL_ANO_N_JUNHO_MAX_MIN ,
                       ACTIVO_TOTAL_ANO_N_JULHO_MAX_MIN ,
                       ACTIVO_TOTAL_ANO_N_AGOSTO_MAX_MIN ,
                       ACTIVO_TOTAL_ANO_N_SETEMBRO_MAX_MIN ,
                       ACTIVO_TOTAL_ANO_N_OUTUBRO_MAX_MIN ,
                       ACTIVO_TOTAL_ANO_N_NOVEMBRO_MAX_MIN ,
                       ACTIVO_TOTAL_ANO_N_DEZEMBRO_MAX_MIN ,


                           @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_DEZEMBRO"]))),

                          );

    //NOTA TA: Aqui trato o minimo e o maximo do eixo principal
    if(Math.abs(Balanco_ResumidoComp_Eixo_max_princ)>=Math.abs(Balanco_ResumidoComp_Eixo_min_princ))
    {
        var Balanco_ResumidoComp_Eixo_max_princ_=(Math.ceil(Balanco_ResumidoComp_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(Balanco_ResumidoComp_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Balanco_ResumidoComp_Eixo_max_princ),0).toString().length-1);
        var Balanco_ResumidoComp_Eixo_min_princ_= (Math.floor(Balanco_ResumidoComp_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(Balanco_ResumidoComp_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Balanco_ResumidoComp_Eixo_max_princ),0).toString().length-1);
        //alert(Balanco_ResumidoComp_Eixo_max_princ_);
        //alert(Balanco_ResumidoComp_Eixo_min_princ_);
    }
    else
    {
        var Balanco_ResumidoComp_Eixo_max_princ_=(Math.ceil(Balanco_ResumidoComp_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(Balanco_ResumidoComp_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Balanco_ResumidoComp_Eixo_min_princ),0).toString().length-1);
        var Balanco_ResumidoComp_Eixo_min_princ_= (Math.floor(Balanco_ResumidoComp_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(Balanco_ResumidoComp_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Balanco_ResumidoComp_Eixo_min_princ),0).toString().length-1);}

    //NOTA TA: Aqui trato o minimo e o maximo do eixo secundario

    if(Math.abs(Balanco_ResumidoComp_Eixo_max_secon)>=Math.abs(Balanco_ResumidoComp_Eixo_min_secon))
    {
        var Balanco_ResumidoComp_Eixo_max_secon_=(Math.ceil(Balanco_ResumidoComp_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(Balanco_ResumidoComp_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Balanco_ResumidoComp_Eixo_max_secon),0).toString().length-1);
        var Balanco_ResumidoComp_Eixo_min_secon_= (Math.floor(Balanco_ResumidoComp_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(Balanco_ResumidoComp_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Balanco_ResumidoComp_Eixo_max_secon),0).toString().length-1);
        //alert(Balanco_ResumidoComp_Eixo_max_secon_);
        //alert(Balanco_ResumidoComp_Eixo_min_secon_);
    }
    else
    {
        var Balanco_ResumidoComp_Eixo_max_secon_=(Math.ceil(Balanco_ResumidoComp_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(Balanco_ResumidoComp_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Balanco_ResumidoComp_Eixo_min_secon),0).toString().length-1);
        var Balanco_ResumidoComp_Eixo_min_secon_= (Math.floor(Balanco_ResumidoComp_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(Balanco_ResumidoComp_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Balanco_ResumidoComp_Eixo_min_secon),0).toString().length-1);}


    if(Math.abs(Balanco_ResumidoComp_Eixo_min_princ)/Math.abs(Balanco_ResumidoComp_Eixo_max_princ)>=Math.abs(Balanco_ResumidoComp_Eixo_min_secon)/Math.abs(Balanco_ResumidoComp_Eixo_max_secon))
    { if(Balanco_ResumidoComp_Eixo_max_princ > 0 && Balanco_ResumidoComp_Eixo_min_princ <0 ){ var Balanco_ResumidoComp_Eixo_min_secon__=(Balanco_ResumidoComp_Eixo_min_princ_*Balanco_ResumidoComp_Eixo_max_secon_)/Balanco_ResumidoComp_Eixo_max_princ_;} else { var Balanco_ResumidoComp_Eixo_min_secon__=Balanco_ResumidoComp_Eixo_min_secon_;}
        if(Balanco_ResumidoComp_Eixo_max_secon > 0 && Balanco_ResumidoComp_Eixo_min_secon <0 ){ var Balanco_ResumidoComp_Eixo_min_princ__=(Balanco_ResumidoComp_Eixo_min_secon__*Balanco_ResumidoComp_Eixo_max_princ_)/Balanco_ResumidoComp_Eixo_max_secon_;} else { var Balanco_ResumidoComp_Eixo_min_princ__=Balanco_ResumidoComp_Eixo_min_princ_;}}
    else
    {if(Balanco_ResumidoComp_Eixo_max_secon > 0 && Balanco_ResumidoComp_Eixo_min_secon <0 ){ var Balanco_ResumidoComp_Eixo_min_princ__=(Balanco_ResumidoComp_Eixo_min_secon_*Balanco_ResumidoComp_Eixo_max_princ_)/Balanco_ResumidoComp_Eixo_max_secon_;} else { var Balanco_ResumidoComp_Eixo_min_princ__=Balanco_ResumidoComp_Eixo_min_princ_;}
        if(Balanco_ResumidoComp_Eixo_max_princ > 0 && Balanco_ResumidoComp_Eixo_min_princ <0 ){ var Balanco_ResumidoComp_Eixo_min_secon__=(Balanco_ResumidoComp_Eixo_min_princ__*Balanco_ResumidoComp_Eixo_max_secon_)/Balanco_ResumidoComp_Eixo_max_princ_;} else { var Balanco_ResumidoComp_Eixo_min_secon__=Balanco_ResumidoComp_Eixo_min_secon_;}
    }



    if(Math.abs(Balanco_ResumidoComp_Eixo_max_princ)/Math.abs(Balanco_ResumidoComp_Eixo_min_princ)>=Math.abs(Balanco_ResumidoComp_Eixo_max_secon)/Math.abs(Balanco_ResumidoComp_Eixo_min_secon))
    { if(Balanco_ResumidoComp_Eixo_min_princ > 0 && Balanco_ResumidoComp_Eixo_max_princ <0 ){ var Balanco_ResumidoComp_Eixo_max_secon__=(Balanco_ResumidoComp_Eixo_max_princ_*Balanco_ResumidoComp_Eixo_min_secon_)/Balanco_ResumidoComp_Eixo_min_princ_;} else { var Balanco_ResumidoComp_Eixo_max_secon__=Balanco_ResumidoComp_Eixo_max_secon_;}
        if(Balanco_ResumidoComp_Eixo_min_secon > 0 && Balanco_ResumidoComp_Eixo_max_secon <0 ){ var Balanco_ResumidoComp_Eixo_max_princ__=(Balanco_ResumidoComp_Eixo_max_secon__*Balanco_ResumidoComp_Eixo_min_princ_)/Balanco_ResumidoComp_Eixo_min_secon_;} else { var Balanco_ResumidoComp_Eixo_max_princ__=Balanco_ResumidoComp_Eixo_max_princ_;}}
    else
    {if(Balanco_ResumidoComp_Eixo_min_secon > 0 && Balanco_ResumidoComp_Eixo_max_secon <0 ){ var Balanco_ResumidoComp_Eixo_max_princ__=(Balanco_ResumidoComp_Eixo_max_secon_*Balanco_ResumidoComp_Eixo_min_princ_)/Balanco_ResumidoComp_Eixo_min_secon_;} else { var Balanco_ResumidoComp_Eixo_max_princ__=Balanco_ResumidoComp_Eixo_max_princ_;}
        if(Balanco_ResumidoComp_Eixo_min_princ > 0 && Balanco_ResumidoComp_Eixo_max_princ <0 ){ var Balanco_ResumidoComp_Eixo_max_secon__=(Balanco_ResumidoComp_Eixo_max_princ__*Balanco_ResumidoComp_Eixo_min_secon_)/Balanco_ResumidoComp_Eixo_min_princ_;} else { var Balanco_ResumidoComp_Eixo_max_secon__=Balanco_ResumidoComp_Eixo_max_secon_;}
    }


    var GRAFICO_BALANCO_RESUMIDOCOMP_COMP=document.getElementById('GRAFICO_BALANCO_RESUMIDOCOMP_COMP').getContext('2d');

    var GRAFICO_BALANCO_RESUMIDOCOMP_COMP=new Chart(GRAFICO_BALANCO_RESUMIDOCOMP_COMP, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
                                    {
                                        label:  'Auton ' + ANO_VERSAO_REAL_,

                                        yAxisID: 'A',
                                        //backgroundColor: 'rgb(255, 255, 255)',
                                        borderColor: 'rgb(204,102,0)',
                                        data: [
                                       IND_AUTOM_FINANC_ANO_N_JANEIRO ,
                                       IND_AUTOM_FINANC_ANO_N_FEVEREIRO ,
                                       IND_AUTOM_FINANC_ANO_N_MARCO ,
                                       IND_AUTOM_FINANC_ANO_N_ABRIL ,
                                       IND_AUTOM_FINANC_ANO_N_MAIO ,
                                       IND_AUTOM_FINANC_ANO_N_JUNHO ,
                                       IND_AUTOM_FINANC_ANO_N_JULHO ,
                                       IND_AUTOM_FINANC_ANO_N_AGOSTO ,
                                       IND_AUTOM_FINANC_ANO_N_SETEMBRO ,
                                       IND_AUTOM_FINANC_ANO_N_OUTUBRO ,
                                       IND_AUTOM_FINANC_ANO_N_NOVEMBRO ,
                                       IND_AUTOM_FINANC_ANO_N_DEZEMBRO ,
                                        ],
                                        type: 'line'


                                    },
                {
                    label:  'Ativ ' + ANO_VERSAO_REAL_,
                    yAxisID: 'B',
                    backgroundColor: 'rgb(238, 173, 0)',
                    borderColor: 'rgb(238, 173, 0)',
                    data: [
                   ACTIVO_TOTAL_ANO_N_JANEIRO ,
                   ACTIVO_TOTAL_ANO_N_FEVEREIRO ,
                   ACTIVO_TOTAL_ANO_N_MARCO ,
                   ACTIVO_TOTAL_ANO_N_ABRIL ,
                   ACTIVO_TOTAL_ANO_N_MAIO ,
                   ACTIVO_TOTAL_ANO_N_JUNHO ,
                   ACTIVO_TOTAL_ANO_N_JULHO ,
                   ACTIVO_TOTAL_ANO_N_AGOSTO ,
                   ACTIVO_TOTAL_ANO_N_SETEMBRO ,
                   ACTIVO_TOTAL_ANO_N_OUTUBRO ,
                   ACTIVO_TOTAL_ANO_N_NOVEMBRO ,
                   ACTIVO_TOTAL_ANO_N_DEZEMBRO ,
                    ],
                    type: 'bar'


                },
                {
                    label: 'Ativ ' + ANO_VERSAO_ANTE_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(135, 191 , 97, 0.7)',
                    borderColor:  'rgba(135, 191 , 97, 0.7)',
                    data: [
                         @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_JANEIRO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_FEVEREIRO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_MARCO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_ABRIL"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_MAIO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_JUNHO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_JULHO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_AGOSTO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_SETEMBRO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_OUTUBRO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_NOVEMBRO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["ACTIVO_TOTAL_ANO_N_1_DEZEMBRO"]))),


                    ],
                },
            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'ACTIVO_TOTAL e DEM. RESULT.',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [

                    { id: 'A',
                        type: 'linear',
                        position: 'left',
                        ticks: {
                            min: Math.round(Balanco_ResumidoComp_Eixo_min_princ__,0),
                            max:  Math.round(Balanco_ResumidoComp_Eixo_max_princ__,0),
                            beginAtZero: false,
                            callback: function(value, index, values) {
                                return value.toLocaleString()+ "%";
                            }
                        }
                    },



                {    id: 'B',
                    type: 'linear',
                    position: 'right',
                    ticks: {
                        min: Math.round(Balanco_ResumidoComp_Eixo_min_secon__,0),
                        max:  Math.round(Balanco_ResumidoComp_Eixo_max_secon__,0),
                        beginAtZero: false,
                        callback: function(value, index, values) {
                            return value.toLocaleString();
                        }
                    }
                }



                ]
            }
        },

    });

</script>





@*------------------------------------------------GRAFICO_BALANÇO_RESUMIDO_MENSAL_1-----------------------------------------------------------*@
<script>

    if(@ViewData["MES_ACUM_REAL"]<1){ var IND_TESOUR_LIQU_ANO_N_JANEIRO = 'nd'; var IND_TESOUR_LIQU_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var IND_TESOUR_LIQU_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_JANEIRO"]))); var IND_TESOUR_LIQU_ANO_N_JANEIRO_MAX_MIN = IND_TESOUR_LIQU_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var IND_TESOUR_LIQU_ANO_N_FEVEREIRO = 'nd'; var IND_TESOUR_LIQU_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var IND_TESOUR_LIQU_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_FEVEREIRO"]))); var IND_TESOUR_LIQU_ANO_N_FEVEREIRO_MAX_MIN = IND_TESOUR_LIQU_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var IND_TESOUR_LIQU_ANO_N_MARCO = 'nd'; var IND_TESOUR_LIQU_ANO_N_MARCO_MAX_MIN = 0;  } else { var IND_TESOUR_LIQU_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_MARCO"]))); var IND_TESOUR_LIQU_ANO_N_MARCO_MAX_MIN = IND_TESOUR_LIQU_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var IND_TESOUR_LIQU_ANO_N_ABRIL = 'nd'; var IND_TESOUR_LIQU_ANO_N_ABRIL_MAX_MIN = 0;  } else { var IND_TESOUR_LIQU_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_ABRIL"]))); var IND_TESOUR_LIQU_ANO_N_ABRIL_MAX_MIN = IND_TESOUR_LIQU_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var IND_TESOUR_LIQU_ANO_N_MAIO = 'nd'; var IND_TESOUR_LIQU_ANO_N_MAIO_MAX_MIN = 0;  } else { var IND_TESOUR_LIQU_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_MAIO"]))); var IND_TESOUR_LIQU_ANO_N_MAIO_MAX_MIN = IND_TESOUR_LIQU_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var IND_TESOUR_LIQU_ANO_N_JUNHO = 'nd'; var IND_TESOUR_LIQU_ANO_N_JUNHO_MAX_MIN = 0;  } else { var IND_TESOUR_LIQU_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_JUNHO"]))); var IND_TESOUR_LIQU_ANO_N_JUNHO_MAX_MIN = IND_TESOUR_LIQU_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var IND_TESOUR_LIQU_ANO_N_JULHO = 'nd'; var IND_TESOUR_LIQU_ANO_N_JULHO_MAX_MIN = 0;  } else { var IND_TESOUR_LIQU_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_JULHO"]))); var IND_TESOUR_LIQU_ANO_N_JULHO_MAX_MIN = IND_TESOUR_LIQU_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var IND_TESOUR_LIQU_ANO_N_AGOSTO = 'nd'; var IND_TESOUR_LIQU_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var IND_TESOUR_LIQU_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_AGOSTO"]))); var IND_TESOUR_LIQU_ANO_N_AGOSTO_MAX_MIN = IND_TESOUR_LIQU_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var IND_TESOUR_LIQU_ANO_N_SETEMBRO = 'nd'; var IND_TESOUR_LIQU_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var IND_TESOUR_LIQU_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_SETEMBRO"]))); var IND_TESOUR_LIQU_ANO_N_SETEMBRO_MAX_MIN = IND_TESOUR_LIQU_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var IND_TESOUR_LIQU_ANO_N_OUTUBRO = 'nd'; var IND_TESOUR_LIQU_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var IND_TESOUR_LIQU_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_OUTUBRO"]))); var IND_TESOUR_LIQU_ANO_N_OUTUBRO_MAX_MIN = IND_TESOUR_LIQU_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var IND_TESOUR_LIQU_ANO_N_NOVEMBRO = 'nd'; var IND_TESOUR_LIQU_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var IND_TESOUR_LIQU_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_NOVEMBRO"]))); var IND_TESOUR_LIQU_ANO_N_NOVEMBRO_MAX_MIN = IND_TESOUR_LIQU_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var IND_TESOUR_LIQU_ANO_N_DEZEMBRO = 'nd'; var IND_TESOUR_LIQU_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var IND_TESOUR_LIQU_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_DEZEMBRO"]))); var IND_TESOUR_LIQU_ANO_N_DEZEMBRO_MAX_MIN = IND_TESOUR_LIQU_ANO_N_DEZEMBRO };

    if(@ViewData["MES_ACUM_REAL"]<1){ var IND_FUNDO_MANEIO_ANO_N_JANEIRO = 'nd'; var IND_FUNDO_MANEIO_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var IND_FUNDO_MANEIO_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_JANEIRO"]))); var IND_FUNDO_MANEIO_ANO_N_JANEIRO_MAX_MIN = IND_FUNDO_MANEIO_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var IND_FUNDO_MANEIO_ANO_N_FEVEREIRO = 'nd'; var IND_FUNDO_MANEIO_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var IND_FUNDO_MANEIO_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_FEVEREIRO"]))); var IND_FUNDO_MANEIO_ANO_N_FEVEREIRO_MAX_MIN = IND_FUNDO_MANEIO_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var IND_FUNDO_MANEIO_ANO_N_MARCO = 'nd'; var IND_FUNDO_MANEIO_ANO_N_MARCO_MAX_MIN = 0;  } else { var IND_FUNDO_MANEIO_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_MARCO"]))); var IND_FUNDO_MANEIO_ANO_N_MARCO_MAX_MIN = IND_FUNDO_MANEIO_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var IND_FUNDO_MANEIO_ANO_N_ABRIL = 'nd'; var IND_FUNDO_MANEIO_ANO_N_ABRIL_MAX_MIN = 0;  } else { var IND_FUNDO_MANEIO_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_ABRIL"]))); var IND_FUNDO_MANEIO_ANO_N_ABRIL_MAX_MIN = IND_FUNDO_MANEIO_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var IND_FUNDO_MANEIO_ANO_N_MAIO = 'nd'; var IND_FUNDO_MANEIO_ANO_N_MAIO_MAX_MIN = 0;  } else { var IND_FUNDO_MANEIO_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_MAIO"]))); var IND_FUNDO_MANEIO_ANO_N_MAIO_MAX_MIN = IND_FUNDO_MANEIO_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var IND_FUNDO_MANEIO_ANO_N_JUNHO = 'nd'; var IND_FUNDO_MANEIO_ANO_N_JUNHO_MAX_MIN = 0;  } else { var IND_FUNDO_MANEIO_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_JUNHO"]))); var IND_FUNDO_MANEIO_ANO_N_JUNHO_MAX_MIN = IND_FUNDO_MANEIO_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var IND_FUNDO_MANEIO_ANO_N_JULHO = 'nd'; var IND_FUNDO_MANEIO_ANO_N_JULHO_MAX_MIN = 0;  } else { var IND_FUNDO_MANEIO_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_JULHO"]))); var IND_FUNDO_MANEIO_ANO_N_JULHO_MAX_MIN = IND_FUNDO_MANEIO_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var IND_FUNDO_MANEIO_ANO_N_AGOSTO = 'nd'; var IND_FUNDO_MANEIO_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var IND_FUNDO_MANEIO_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_AGOSTO"]))); var IND_FUNDO_MANEIO_ANO_N_AGOSTO_MAX_MIN = IND_FUNDO_MANEIO_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var IND_FUNDO_MANEIO_ANO_N_SETEMBRO = 'nd'; var IND_FUNDO_MANEIO_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var IND_FUNDO_MANEIO_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_SETEMBRO"]))); var IND_FUNDO_MANEIO_ANO_N_SETEMBRO_MAX_MIN = IND_FUNDO_MANEIO_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var IND_FUNDO_MANEIO_ANO_N_OUTUBRO = 'nd'; var IND_FUNDO_MANEIO_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var IND_FUNDO_MANEIO_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_OUTUBRO"]))); var IND_FUNDO_MANEIO_ANO_N_OUTUBRO_MAX_MIN = IND_FUNDO_MANEIO_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var IND_FUNDO_MANEIO_ANO_N_NOVEMBRO = 'nd'; var IND_FUNDO_MANEIO_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var IND_FUNDO_MANEIO_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_NOVEMBRO"]))); var IND_FUNDO_MANEIO_ANO_N_NOVEMBRO_MAX_MIN = IND_FUNDO_MANEIO_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var IND_FUNDO_MANEIO_ANO_N_DEZEMBRO = 'nd'; var IND_FUNDO_MANEIO_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var IND_FUNDO_MANEIO_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_DEZEMBRO"]))); var IND_FUNDO_MANEIO_ANO_N_DEZEMBRO_MAX_MIN = IND_FUNDO_MANEIO_ANO_N_DEZEMBRO };


    if(@ViewData["MES_ACUM_REAL"]<1){ var IND_NECESS_FUNDO_MANEIO_ANO_N_JANEIRO = 'nd'; var IND_NECESS_FUNDO_MANEIO_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var IND_NECESS_FUNDO_MANEIO_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_JANEIRO"]))); var IND_NECESS_FUNDO_MANEIO_ANO_N_JANEIRO_MAX_MIN = IND_NECESS_FUNDO_MANEIO_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var IND_NECESS_FUNDO_MANEIO_ANO_N_FEVEREIRO = 'nd'; var IND_NECESS_FUNDO_MANEIO_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var IND_NECESS_FUNDO_MANEIO_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_FEVEREIRO"]))); var IND_NECESS_FUNDO_MANEIO_ANO_N_FEVEREIRO_MAX_MIN = IND_NECESS_FUNDO_MANEIO_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var IND_NECESS_FUNDO_MANEIO_ANO_N_MARCO = 'nd'; var IND_NECESS_FUNDO_MANEIO_ANO_N_MARCO_MAX_MIN = 0;  } else { var IND_NECESS_FUNDO_MANEIO_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_MARCO"]))); var IND_NECESS_FUNDO_MANEIO_ANO_N_MARCO_MAX_MIN = IND_NECESS_FUNDO_MANEIO_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var IND_NECESS_FUNDO_MANEIO_ANO_N_ABRIL = 'nd'; var IND_NECESS_FUNDO_MANEIO_ANO_N_ABRIL_MAX_MIN = 0;  } else { var IND_NECESS_FUNDO_MANEIO_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_ABRIL"]))); var IND_NECESS_FUNDO_MANEIO_ANO_N_ABRIL_MAX_MIN = IND_NECESS_FUNDO_MANEIO_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var IND_NECESS_FUNDO_MANEIO_ANO_N_MAIO = 'nd'; var IND_NECESS_FUNDO_MANEIO_ANO_N_MAIO_MAX_MIN = 0;  } else { var IND_NECESS_FUNDO_MANEIO_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_MAIO"]))); var IND_NECESS_FUNDO_MANEIO_ANO_N_MAIO_MAX_MIN = IND_NECESS_FUNDO_MANEIO_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var IND_NECESS_FUNDO_MANEIO_ANO_N_JUNHO = 'nd'; var IND_NECESS_FUNDO_MANEIO_ANO_N_JUNHO_MAX_MIN = 0;  } else { var IND_NECESS_FUNDO_MANEIO_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_JUNHO"]))); var IND_NECESS_FUNDO_MANEIO_ANO_N_JUNHO_MAX_MIN = IND_NECESS_FUNDO_MANEIO_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var IND_NECESS_FUNDO_MANEIO_ANO_N_JULHO = 'nd'; var IND_NECESS_FUNDO_MANEIO_ANO_N_JULHO_MAX_MIN = 0;  } else { var IND_NECESS_FUNDO_MANEIO_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_JULHO"]))); var IND_NECESS_FUNDO_MANEIO_ANO_N_JULHO_MAX_MIN = IND_NECESS_FUNDO_MANEIO_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var IND_NECESS_FUNDO_MANEIO_ANO_N_AGOSTO = 'nd'; var IND_NECESS_FUNDO_MANEIO_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var IND_NECESS_FUNDO_MANEIO_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_AGOSTO"]))); var IND_NECESS_FUNDO_MANEIO_ANO_N_AGOSTO_MAX_MIN = IND_NECESS_FUNDO_MANEIO_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var IND_NECESS_FUNDO_MANEIO_ANO_N_SETEMBRO = 'nd'; var IND_NECESS_FUNDO_MANEIO_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var IND_NECESS_FUNDO_MANEIO_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_SETEMBRO"]))); var IND_NECESS_FUNDO_MANEIO_ANO_N_SETEMBRO_MAX_MIN = IND_NECESS_FUNDO_MANEIO_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var IND_NECESS_FUNDO_MANEIO_ANO_N_OUTUBRO = 'nd'; var IND_NECESS_FUNDO_MANEIO_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var IND_NECESS_FUNDO_MANEIO_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_OUTUBRO"]))); var IND_NECESS_FUNDO_MANEIO_ANO_N_OUTUBRO_MAX_MIN = IND_NECESS_FUNDO_MANEIO_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var IND_NECESS_FUNDO_MANEIO_ANO_N_NOVEMBRO = 'nd'; var IND_NECESS_FUNDO_MANEIO_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var IND_NECESS_FUNDO_MANEIO_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_NOVEMBRO"]))); var IND_NECESS_FUNDO_MANEIO_ANO_N_NOVEMBRO_MAX_MIN = IND_NECESS_FUNDO_MANEIO_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var IND_NECESS_FUNDO_MANEIO_ANO_N_DEZEMBRO = 'nd'; var IND_NECESS_FUNDO_MANEIO_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var IND_NECESS_FUNDO_MANEIO_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_DEZEMBRO"]))); var IND_NECESS_FUNDO_MANEIO_ANO_N_DEZEMBRO_MAX_MIN = IND_NECESS_FUNDO_MANEIO_ANO_N_DEZEMBRO };



    var Balanco_Resumido_Eixo_max_princ= Math.max( IND_TESOUR_LIQU_ANO_N_JANEIRO_MAX_MIN,
                       IND_TESOUR_LIQU_ANO_N_FEVEREIRO_MAX_MIN,
                       IND_TESOUR_LIQU_ANO_N_MARCO_MAX_MIN,
                       IND_TESOUR_LIQU_ANO_N_ABRIL_MAX_MIN,
                       IND_TESOUR_LIQU_ANO_N_MAIO_MAX_MIN,
                       IND_TESOUR_LIQU_ANO_N_JUNHO_MAX_MIN,
                       IND_TESOUR_LIQU_ANO_N_JULHO_MAX_MIN,
                       IND_TESOUR_LIQU_ANO_N_AGOSTO_MAX_MIN,
                       IND_TESOUR_LIQU_ANO_N_SETEMBRO_MAX_MIN,
                       IND_TESOUR_LIQU_ANO_N_OUTUBRO_MAX_MIN,
                       IND_TESOUR_LIQU_ANO_N_NOVEMBRO_MAX_MIN,
                       IND_TESOUR_LIQU_ANO_N_DEZEMBRO_MAX_MIN,

                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_JANEIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_FEVEREIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_MARCO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_ABRIL"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_MAIO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_JUNHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_JULHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_AGOSTO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_SETEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_OUTUBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_NOVEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_DEZEMBRO"]))),
                             );
    var Balanco_Resumido_Eixo_min_princ= Math.min(  IND_TESOUR_LIQU_ANO_N_JANEIRO_MAX_MIN,
                       IND_TESOUR_LIQU_ANO_N_FEVEREIRO_MAX_MIN,
                       IND_TESOUR_LIQU_ANO_N_MARCO_MAX_MIN,
                       IND_TESOUR_LIQU_ANO_N_ABRIL_MAX_MIN,
                       IND_TESOUR_LIQU_ANO_N_MAIO_MAX_MIN,
                       IND_TESOUR_LIQU_ANO_N_JUNHO_MAX_MIN,
                       IND_TESOUR_LIQU_ANO_N_JULHO_MAX_MIN,
                       IND_TESOUR_LIQU_ANO_N_AGOSTO_MAX_MIN,
                       IND_TESOUR_LIQU_ANO_N_SETEMBRO_MAX_MIN,
                       IND_TESOUR_LIQU_ANO_N_OUTUBRO_MAX_MIN,
                       IND_TESOUR_LIQU_ANO_N_NOVEMBRO_MAX_MIN,
                       IND_TESOUR_LIQU_ANO_N_DEZEMBRO_MAX_MIN,

                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_JANEIRO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_FEVEREIRO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_MARCO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_ABRIL"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_MAIO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_JUNHO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_JULHO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_AGOSTO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_SETEMBRO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_OUTUBRO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_NOVEMBRO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_DEZEMBRO"]))),
                           );
    var Balanco_Resumido_Eixo_max_secon= Math.max(
                       IND_FUNDO_MANEIO_ANO_N_JANEIRO_MAX_MIN , IND_NECESS_FUNDO_MANEIO_ANO_N_JANEIRO_MAX_MIN,
                       IND_FUNDO_MANEIO_ANO_N_FEVEREIRO_MAX_MIN , IND_NECESS_FUNDO_MANEIO_ANO_N_FEVEREIRO_MAX_MIN,
                       IND_FUNDO_MANEIO_ANO_N_MARCO_MAX_MIN , IND_NECESS_FUNDO_MANEIO_ANO_N_MARCO_MAX_MIN,
                       IND_FUNDO_MANEIO_ANO_N_ABRIL_MAX_MIN , IND_NECESS_FUNDO_MANEIO_ANO_N_ABRIL_MAX_MIN,
                       IND_FUNDO_MANEIO_ANO_N_MAIO_MAX_MIN ,  IND_NECESS_FUNDO_MANEIO_ANO_N_MAIO_MAX_MIN,
                       IND_FUNDO_MANEIO_ANO_N_JUNHO_MAX_MIN , IND_NECESS_FUNDO_MANEIO_ANO_N_JUNHO_MAX_MIN,
                       IND_FUNDO_MANEIO_ANO_N_JULHO_MAX_MIN ,  IND_NECESS_FUNDO_MANEIO_ANO_N_JULHO_MAX_MIN,
                       IND_FUNDO_MANEIO_ANO_N_AGOSTO_MAX_MIN , IND_NECESS_FUNDO_MANEIO_ANO_N_AGOSTO_MAX_MIN,
                       IND_FUNDO_MANEIO_ANO_N_SETEMBRO_MAX_MIN , IND_NECESS_FUNDO_MANEIO_ANO_N_SETEMBRO_MAX_MIN,
                       IND_FUNDO_MANEIO_ANO_N_OUTUBRO_MAX_MIN , IND_NECESS_FUNDO_MANEIO_ANO_N_OUTUBRO_MAX_MIN,
                       IND_FUNDO_MANEIO_ANO_N_NOVEMBRO_MAX_MIN , IND_NECESS_FUNDO_MANEIO_ANO_N_NOVEMBRO_MAX_MIN,
                       IND_FUNDO_MANEIO_ANO_N_DEZEMBRO_MAX_MIN , IND_NECESS_FUNDO_MANEIO_ANO_N_DEZEMBRO_MAX_MIN,



                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_JANEIRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_FEVEREIRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_MARCO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_ABRIL"]))),@Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_MAIO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_JUNHO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_JULHO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_AGOSTO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_SETEMBRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_OUTUBRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_NOVEMBRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_DEZEMBRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_DEZEMBRO"]))),

                            );
    var Balanco_Resumido_Eixo_min_secon= Math.min(
                       IND_FUNDO_MANEIO_ANO_N_JANEIRO_MAX_MIN , IND_NECESS_FUNDO_MANEIO_ANO_N_JANEIRO_MAX_MIN,
                       IND_FUNDO_MANEIO_ANO_N_FEVEREIRO_MAX_MIN , IND_NECESS_FUNDO_MANEIO_ANO_N_FEVEREIRO_MAX_MIN,
                       IND_FUNDO_MANEIO_ANO_N_MARCO_MAX_MIN , IND_NECESS_FUNDO_MANEIO_ANO_N_MARCO_MAX_MIN,
                       IND_FUNDO_MANEIO_ANO_N_ABRIL_MAX_MIN , IND_NECESS_FUNDO_MANEIO_ANO_N_ABRIL_MAX_MIN,
                       IND_FUNDO_MANEIO_ANO_N_MAIO_MAX_MIN ,  IND_NECESS_FUNDO_MANEIO_ANO_N_MAIO_MAX_MIN,
                       IND_FUNDO_MANEIO_ANO_N_JUNHO_MAX_MIN , IND_NECESS_FUNDO_MANEIO_ANO_N_JUNHO_MAX_MIN,
                       IND_FUNDO_MANEIO_ANO_N_JULHO_MAX_MIN ,  IND_NECESS_FUNDO_MANEIO_ANO_N_JULHO_MAX_MIN,
                       IND_FUNDO_MANEIO_ANO_N_AGOSTO_MAX_MIN , IND_NECESS_FUNDO_MANEIO_ANO_N_AGOSTO_MAX_MIN,
                       IND_FUNDO_MANEIO_ANO_N_SETEMBRO_MAX_MIN , IND_NECESS_FUNDO_MANEIO_ANO_N_SETEMBRO_MAX_MIN,
                       IND_FUNDO_MANEIO_ANO_N_OUTUBRO_MAX_MIN , IND_NECESS_FUNDO_MANEIO_ANO_N_OUTUBRO_MAX_MIN,
                       IND_FUNDO_MANEIO_ANO_N_NOVEMBRO_MAX_MIN , IND_NECESS_FUNDO_MANEIO_ANO_N_NOVEMBRO_MAX_MIN,
                       IND_FUNDO_MANEIO_ANO_N_DEZEMBRO_MAX_MIN , IND_NECESS_FUNDO_MANEIO_ANO_N_DEZEMBRO_MAX_MIN,


                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_JANEIRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_FEVEREIRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_MARCO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_ABRIL"]))),@Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_MAIO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_JUNHO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_JULHO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_AGOSTO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_SETEMBRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_OUTUBRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_NOVEMBRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_DEZEMBRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_DEZEMBRO"]))),

                          );

    //NOTA TA: Aqui trato o minimo e o maximo do eixo principal
    if(Math.abs(Balanco_Resumido_Eixo_max_princ)>=Math.abs(Balanco_Resumido_Eixo_min_princ))
    {
        var Balanco_Resumido_Eixo_max_princ_=(Math.ceil(Balanco_Resumido_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(Balanco_Resumido_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Balanco_Resumido_Eixo_max_princ),0).toString().length-1);
        var Balanco_Resumido_Eixo_min_princ_= (Math.floor(Balanco_Resumido_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(Balanco_Resumido_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Balanco_Resumido_Eixo_max_princ),0).toString().length-1);
        //alert(Balanco_Resumido_Eixo_max_princ_);
        //alert(Balanco_Resumido_Eixo_min_princ_);
    }
    else
    {
        var Balanco_Resumido_Eixo_max_princ_=(Math.ceil(Balanco_Resumido_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(Balanco_Resumido_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Balanco_Resumido_Eixo_min_princ),0).toString().length-1);
        var Balanco_Resumido_Eixo_min_princ_= (Math.floor(Balanco_Resumido_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(Balanco_Resumido_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Balanco_Resumido_Eixo_min_princ),0).toString().length-1);}

    //NOTA TA: Aqui trato o minimo e o maximo do eixo secundario

    if(Math.abs(Balanco_Resumido_Eixo_max_secon)>=Math.abs(Balanco_Resumido_Eixo_min_secon))
    {
        var Balanco_Resumido_Eixo_max_secon_=(Math.ceil(Balanco_Resumido_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(Balanco_Resumido_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Balanco_Resumido_Eixo_max_secon),0).toString().length-1);
        var Balanco_Resumido_Eixo_min_secon_= (Math.floor(Balanco_Resumido_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(Balanco_Resumido_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Balanco_Resumido_Eixo_max_secon),0).toString().length-1);
        //alert(Balanco_Resumido_Eixo_max_secon_);
        //alert(Balanco_Resumido_Eixo_min_secon_);
    }
    else
    {
        var Balanco_Resumido_Eixo_max_secon_=(Math.ceil(Balanco_Resumido_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(Balanco_Resumido_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Balanco_Resumido_Eixo_min_secon),0).toString().length-1);
        var Balanco_Resumido_Eixo_min_secon_= (Math.floor(Balanco_Resumido_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(Balanco_Resumido_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Balanco_Resumido_Eixo_min_secon),0).toString().length-1);}


    if(Math.abs(Balanco_Resumido_Eixo_min_princ)/Math.abs(Balanco_Resumido_Eixo_max_princ)>=Math.abs(Balanco_Resumido_Eixo_min_secon)/Math.abs(Balanco_Resumido_Eixo_max_secon))
    { if(Balanco_Resumido_Eixo_max_princ > 0 && Balanco_Resumido_Eixo_min_princ <0 ){ var Balanco_Resumido_Eixo_min_secon__=(Balanco_Resumido_Eixo_min_princ_*Balanco_Resumido_Eixo_max_secon_)/Balanco_Resumido_Eixo_max_princ_;} else { var Balanco_Resumido_Eixo_min_secon__=Balanco_Resumido_Eixo_min_secon_;}
        if(Balanco_Resumido_Eixo_max_secon > 0 && Balanco_Resumido_Eixo_min_secon <0 ){ var Balanco_Resumido_Eixo_min_princ__=(Balanco_Resumido_Eixo_min_secon__*Balanco_Resumido_Eixo_max_princ_)/Balanco_Resumido_Eixo_max_secon_;} else { var Balanco_Resumido_Eixo_min_princ__=Balanco_Resumido_Eixo_min_princ_;}}
    else
    {if(Balanco_Resumido_Eixo_max_secon > 0 && Balanco_Resumido_Eixo_min_secon <0 ){ var Balanco_Resumido_Eixo_min_princ__=(Balanco_Resumido_Eixo_min_secon_*Balanco_Resumido_Eixo_max_princ_)/Balanco_Resumido_Eixo_max_secon_;} else { var Balanco_Resumido_Eixo_min_princ__=Balanco_Resumido_Eixo_min_princ_;}
        if(Balanco_Resumido_Eixo_max_princ > 0 && Balanco_Resumido_Eixo_min_princ <0 ){ var Balanco_Resumido_Eixo_min_secon__=(Balanco_Resumido_Eixo_min_princ__*Balanco_Resumido_Eixo_max_secon_)/Balanco_Resumido_Eixo_max_princ_;} else { var Balanco_Resumido_Eixo_min_secon__=Balanco_Resumido_Eixo_min_secon_;}
    }



    if(Math.abs(Balanco_Resumido_Eixo_max_princ)/Math.abs(Balanco_Resumido_Eixo_min_princ)>=Math.abs(Balanco_Resumido_Eixo_max_secon)/Math.abs(Balanco_Resumido_Eixo_min_secon))
    { if(Balanco_Resumido_Eixo_min_princ > 0 && Balanco_Resumido_Eixo_max_princ <0 ){ var Balanco_Resumido_Eixo_max_secon__=(Balanco_Resumido_Eixo_max_princ_*Balanco_Resumido_Eixo_min_secon_)/Balanco_Resumido_Eixo_min_princ_;} else { var Balanco_Resumido_Eixo_max_secon__=Balanco_Resumido_Eixo_max_secon_;}
        if(Balanco_Resumido_Eixo_min_secon > 0 && Balanco_Resumido_Eixo_max_secon <0 ){ var Balanco_Resumido_Eixo_max_princ__=(Balanco_Resumido_Eixo_max_secon__*Balanco_Resumido_Eixo_min_princ_)/Balanco_Resumido_Eixo_min_secon_;} else { var Balanco_Resumido_Eixo_max_princ__=Balanco_Resumido_Eixo_max_princ_;}}
    else
    {if(Balanco_Resumido_Eixo_min_secon > 0 && Balanco_Resumido_Eixo_max_secon <0 ){ var Balanco_Resumido_Eixo_max_princ__=(Balanco_Resumido_Eixo_max_secon_*Balanco_Resumido_Eixo_min_princ_)/Balanco_Resumido_Eixo_min_secon_;} else { var Balanco_Resumido_Eixo_max_princ__=Balanco_Resumido_Eixo_max_princ_;}
        if(Balanco_Resumido_Eixo_min_princ > 0 && Balanco_Resumido_Eixo_max_princ <0 ){ var Balanco_Resumido_Eixo_max_secon__=(Balanco_Resumido_Eixo_max_princ__*Balanco_Resumido_Eixo_min_secon_)/Balanco_Resumido_Eixo_min_princ_;} else { var Balanco_Resumido_Eixo_max_secon__=Balanco_Resumido_Eixo_max_secon_;}
    }


    var GRAFICO_BALANCO_RESUMIDO_MENSAL_1=document.getElementById('GRAFICO_BALANCO_RESUMIDO_MENSAL_1').getContext('2d');

    var GRAFICO_BALANCO_RESUMIDO_MENSAL_1=new Chart(GRAFICO_BALANCO_RESUMIDO_MENSAL_1, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'Tesour ' + ANO_VERSAO_REAL_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(238, 173, 0)',
                   data: [
                   IND_TESOUR_LIQU_ANO_N_JANEIRO,
                   IND_TESOUR_LIQU_ANO_N_FEVEREIRO,
                   IND_TESOUR_LIQU_ANO_N_MARCO,
                   IND_TESOUR_LIQU_ANO_N_ABRIL,
                   IND_TESOUR_LIQU_ANO_N_MAIO,
                   IND_TESOUR_LIQU_ANO_N_JUNHO,
                   IND_TESOUR_LIQU_ANO_N_JULHO,
                   IND_TESOUR_LIQU_ANO_N_AGOSTO,
                   IND_TESOUR_LIQU_ANO_N_SETEMBRO,
                   IND_TESOUR_LIQU_ANO_N_OUTUBRO,
                   IND_TESOUR_LIQU_ANO_N_NOVEMBRO,
                   IND_TESOUR_LIQU_ANO_N_DEZEMBRO,
                   ],
                   type: 'line'


               },
                {
                    label:  'FM ' + ANO_VERSAO_REAL_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(238, 173, 0, 0.7)',
                    borderColor: 'rgba(238, 173, 0, 0.7)',
                    data: [
                  IND_FUNDO_MANEIO_ANO_N_JANEIRO ,
                  IND_FUNDO_MANEIO_ANO_N_FEVEREIRO ,
                  IND_FUNDO_MANEIO_ANO_N_MARCO ,
                  IND_FUNDO_MANEIO_ANO_N_ABRIL,
                  IND_FUNDO_MANEIO_ANO_N_MAIO ,
                  IND_FUNDO_MANEIO_ANO_N_JUNHO ,
                  IND_FUNDO_MANEIO_ANO_N_JULHO ,
                  IND_FUNDO_MANEIO_ANO_N_AGOSTO ,
                  IND_FUNDO_MANEIO_ANO_N_SETEMBRO ,
                  IND_FUNDO_MANEIO_ANO_N_OUTUBRO ,
                  IND_FUNDO_MANEIO_ANO_N_NOVEMBRO ,
                  IND_FUNDO_MANEIO_ANO_N_DEZEMBRO ,                   ],
                },
                                    {
                                        label:  'NFM ' + ANO_VERSAO_REAL_,
                                        yAxisID: 'B',
                                        backgroundColor: 'rgba(255, 255, 0, 0.7)',
                                        borderColor: 'rgba(255, 255, 0, 0.7)',
                                        data: [
                                           IND_NECESS_FUNDO_MANEIO_ANO_N_JANEIRO,
                                           IND_NECESS_FUNDO_MANEIO_ANO_N_FEVEREIRO,
                                           IND_NECESS_FUNDO_MANEIO_ANO_N_MARCO,
                                           IND_NECESS_FUNDO_MANEIO_ANO_N_ABRIL,
                                           IND_NECESS_FUNDO_MANEIO_ANO_N_MAIO,
                                           IND_NECESS_FUNDO_MANEIO_ANO_N_JUNHO,
                                           IND_NECESS_FUNDO_MANEIO_ANO_N_JULHO,
                                           IND_NECESS_FUNDO_MANEIO_ANO_N_AGOSTO,
                                           IND_NECESS_FUNDO_MANEIO_ANO_N_SETEMBRO,
                                           IND_NECESS_FUNDO_MANEIO_ANO_N_OUTUBRO,
                                           IND_NECESS_FUNDO_MANEIO_ANO_N_NOVEMBRO,
                                           IND_NECESS_FUNDO_MANEIO_ANO_N_DEZEMBRO,                   ],
                                    },

            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'FUNDO DE MANEIO E TESOURARIA',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                min:  Math.round(Balanco_Resumido_Eixo_min_princ__,0),
                                                max:  Math.round(Balanco_Resumido_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString();
                                                }
                                            }
                                        },

                    { id: 'B',
                        type: 'linear',
                        position: 'right',
                        ticks: {
                            min: Math.round(Balanco_Resumido_Eixo_min_secon__,0),
                            max:  Math.round(Balanco_Resumido_Eixo_max_secon__,0),
                            beginAtZero: false,
                            callback: function(value, index, values) {
                                return value.toLocaleString();
                            }
                        }
                    },






                ]
            }
        },

    });

</script>

@*------------------------------------------------GRAFICO_BALANÇO_RESUMIDO_MENSAL_2-----------------------------------------------------------*@
<script>


    var GRAFICO_BALANCO_RESUMIDO_MENSAL_2=document.getElementById('GRAFICO_BALANCO_RESUMIDO_MENSAL_2').getContext('2d');

    var GRAFICO_BALANCO_RESUMIDO_MENSAL_2=new Chart(GRAFICO_BALANCO_RESUMIDO_MENSAL_2, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'Tesour ' + ANO_VERSAO_ANTE_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(135, 191 , 97)',
                   data: [
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_JANEIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_FEVEREIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_MARCO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_ABRIL"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_MAIO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_JUNHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_JULHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_AGOSTO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_SETEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_OUTUBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_NOVEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_TESOUR_LIQU_ANO_N_1_DEZEMBRO"]))),
                   ],
                   type: 'line'


               },
                {
                    label:  'FM ' + ANO_VERSAO_ANTE_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(0 , 75 , 0, 0.7)',
                    borderColor: 'rgba(0 , 75 , 0, 0.7)',
                    data: [
                      @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_JANEIRO"]))),
                      @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_FEVEREIRO"]))),
                      @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_MARCO"]))),
                      @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_ABRIL"]))),
                      @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_MAIO"]))),
                      @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_JUNHO"]))),
                      @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_JULHO"]))),
                      @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_AGOSTO"]))),
                      @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_SETEMBRO"]))),
                      @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_OUTUBRO"]))),
                      @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_NOVEMBRO"]))),
                      @Html.Raw((string.Format("{0:0}", @ViewData["IND_FUNDO_MANEIO_ANO_N_1_DEZEMBRO"]))),
                    ],
                },
                                    {
                                        label:  'NFM ' + ANO_VERSAO_ANTE_,
                                        yAxisID: 'B',
                                        backgroundColor: 'rgba(135, 191 , 97, 0.7)',
                                        borderColor: 'rgba(135, 191 , 97, 0.7)',
                                        data: [
                                               @Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_JANEIRO"]))),
                                               @Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_FEVEREIRO"]))),
                                               @Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_MARCO"]))),
                                               @Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_ABRIL"]))),
                                               @Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_MAIO"]))),
                                               @Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_JUNHO"]))),
                                               @Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_JULHO"]))),
                                               @Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_AGOSTO"]))),
                                               @Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_SETEMBRO"]))),
                                               @Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_OUTUBRO"]))),
                                               @Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_NOVEMBRO"]))),
                                               @Html.Raw((string.Format("{0:0}", @ViewData["IND_NECESS_FUNDO_MANEIO_ANO_N_1_DEZEMBRO"]))),
                                        ],
                                    },

            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'FUNDO DE MANEIO E TESOURARIA',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                min:  Math.round(Balanco_Resumido_Eixo_min_princ__,0),
                                                max:  Math.round(Balanco_Resumido_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString();
                                                }
                                            }
                                        },

                    { id: 'B',
                        type: 'linear',
                        position: 'right',
                        ticks: {
                            min: Math.round(Balanco_Resumido_Eixo_min_secon__,0),
                            max:  Math.round(Balanco_Resumido_Eixo_max_secon__,0),
                            beginAtZero: false,
                            callback: function(value, index, values) {
                                return value.toLocaleString();
                            }
                        }
                    },






                ]
            }
        },

    });

</script>


@*------------------------------------------------GRAFICO_FSE_MENSAL_1-----------------------------------------------------------*@
<script>

    if(@ViewData["MES_ACUM_REAL"]<1){ var IND_VN_ANO_N_JANEIRO = 'nd'; var IND_VN_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JANEIRO"]))); var IND_VN_ANO_N_JANEIRO_MAX_MIN = IND_VN_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var IND_VN_ANO_N_FEVEREIRO = 'nd'; var IND_VN_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_FEVEREIRO"]))); var IND_VN_ANO_N_FEVEREIRO_MAX_MIN = IND_VN_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var IND_VN_ANO_N_MARCO = 'nd'; var IND_VN_ANO_N_MARCO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_MARCO"]))); var IND_VN_ANO_N_MARCO_MAX_MIN = IND_VN_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var IND_VN_ANO_N_ABRIL = 'nd'; var IND_VN_ANO_N_ABRIL_MAX_MIN = 0;  } else { var IND_VN_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_ABRIL"]))); var IND_VN_ANO_N_ABRIL_MAX_MIN = IND_VN_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var IND_VN_ANO_N_MAIO = 'nd'; var IND_VN_ANO_N_MAIO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_MAIO"]))); var IND_VN_ANO_N_MAIO_MAX_MIN = IND_VN_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var IND_VN_ANO_N_JUNHO = 'nd'; var IND_VN_ANO_N_JUNHO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JUNHO"]))); var IND_VN_ANO_N_JUNHO_MAX_MIN = IND_VN_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var IND_VN_ANO_N_JULHO = 'nd'; var IND_VN_ANO_N_JULHO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JULHO"]))); var IND_VN_ANO_N_JULHO_MAX_MIN = IND_VN_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var IND_VN_ANO_N_AGOSTO = 'nd'; var IND_VN_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_AGOSTO"]))); var IND_VN_ANO_N_AGOSTO_MAX_MIN = IND_VN_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var IND_VN_ANO_N_SETEMBRO = 'nd'; var IND_VN_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_SETEMBRO"]))); var IND_VN_ANO_N_SETEMBRO_MAX_MIN = IND_VN_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var IND_VN_ANO_N_OUTUBRO = 'nd'; var IND_VN_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_OUTUBRO"]))); var IND_VN_ANO_N_OUTUBRO_MAX_MIN = IND_VN_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var IND_VN_ANO_N_NOVEMBRO = 'nd'; var IND_VN_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_NOVEMBRO"]))); var IND_VN_ANO_N_NOVEMBRO_MAX_MIN = IND_VN_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var IND_VN_ANO_N_DEZEMBRO = 'nd'; var IND_VN_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_DEZEMBRO"]))); var IND_VN_ANO_N_DEZEMBRO_MAX_MIN = IND_VN_ANO_N_DEZEMBRO };

    if(@ViewData["MES_ACUM_REAL"]<1){ var FSE_ANO_N_JANEIRO = 'nd'; var FSE_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var FSE_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_JANEIRO"]))); var FSE_ANO_N_JANEIRO_MAX_MIN = FSE_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var FSE_ANO_N_FEVEREIRO = 'nd'; var FSE_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var FSE_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_FEVEREIRO"]))); var FSE_ANO_N_FEVEREIRO_MAX_MIN = FSE_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var FSE_ANO_N_MARCO = 'nd'; var FSE_ANO_N_MARCO_MAX_MIN = 0;  } else { var FSE_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_MARCO"]))); var FSE_ANO_N_MARCO_MAX_MIN = FSE_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var FSE_ANO_N_ABRIL = 'nd'; var FSE_ANO_N_ABRIL_MAX_MIN = 0;  } else { var FSE_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_ABRIL"]))); var FSE_ANO_N_ABRIL_MAX_MIN = FSE_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var FSE_ANO_N_MAIO = 'nd'; var FSE_ANO_N_MAIO_MAX_MIN = 0;  } else { var FSE_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_MAIO"]))); var FSE_ANO_N_MAIO_MAX_MIN = FSE_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var FSE_ANO_N_JUNHO = 'nd'; var FSE_ANO_N_JUNHO_MAX_MIN = 0;  } else { var FSE_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_JUNHO"]))); var FSE_ANO_N_JUNHO_MAX_MIN = FSE_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var FSE_ANO_N_JULHO = 'nd'; var FSE_ANO_N_JULHO_MAX_MIN = 0;  } else { var FSE_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_JULHO"]))); var FSE_ANO_N_JULHO_MAX_MIN = FSE_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var FSE_ANO_N_AGOSTO = 'nd'; var FSE_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var FSE_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_AGOSTO"]))); var FSE_ANO_N_AGOSTO_MAX_MIN = FSE_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var FSE_ANO_N_SETEMBRO = 'nd'; var FSE_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var FSE_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_SETEMBRO"]))); var FSE_ANO_N_SETEMBRO_MAX_MIN = FSE_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var FSE_ANO_N_OUTUBRO = 'nd'; var FSE_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var FSE_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_OUTUBRO"]))); var FSE_ANO_N_OUTUBRO_MAX_MIN = FSE_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var FSE_ANO_N_NOVEMBRO = 'nd'; var FSE_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var FSE_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_NOVEMBRO"]))); var FSE_ANO_N_NOVEMBRO_MAX_MIN = FSE_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var FSE_ANO_N_DEZEMBRO = 'nd'; var FSE_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var FSE_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_DEZEMBRO"]))); var FSE_ANO_N_DEZEMBRO_MAX_MIN = FSE_ANO_N_DEZEMBRO };

    var IND_VN_ANO_N_JANEIRO_ACUM = IND_VN_ANO_N_JANEIRO;
    var IND_VN_ANO_N_FEVEREIRO_ACUM = IND_VN_ANO_N_FEVEREIRO + IND_VN_ANO_N_JANEIRO_ACUM;
    var IND_VN_ANO_N_MARCO_ACUM = IND_VN_ANO_N_MARCO + IND_VN_ANO_N_FEVEREIRO_ACUM;
    var IND_VN_ANO_N_ABRIL_ACUM = IND_VN_ANO_N_ABRIL + IND_VN_ANO_N_MARCO_ACUM;
    var IND_VN_ANO_N_MAIO_ACUM = IND_VN_ANO_N_MAIO + IND_VN_ANO_N_ABRIL_ACUM;
    var IND_VN_ANO_N_JUNHO_ACUM = IND_VN_ANO_N_JUNHO + IND_VN_ANO_N_MAIO_ACUM;
    var IND_VN_ANO_N_JULHO_ACUM = IND_VN_ANO_N_JULHO + IND_VN_ANO_N_JUNHO_ACUM;
    var IND_VN_ANO_N_AGOSTO_ACUM = IND_VN_ANO_N_AGOSTO + IND_VN_ANO_N_JULHO_ACUM;
    var IND_VN_ANO_N_SETEMBRO_ACUM = IND_VN_ANO_N_SETEMBRO + IND_VN_ANO_N_AGOSTO_ACUM;
    var IND_VN_ANO_N_OUTUBRO_ACUM = IND_VN_ANO_N_OUTUBRO + IND_VN_ANO_N_SETEMBRO_ACUM;
    var IND_VN_ANO_N_NOVEMBRO_ACUM = IND_VN_ANO_N_NOVEMBRO + IND_VN_ANO_N_OUTUBRO_ACUM;
    var IND_VN_ANO_N_DEZEMBRO_ACUM = IND_VN_ANO_N_DEZEMBRO + IND_VN_ANO_N_NOVEMBRO_ACUM;

    var FSE_ANO_N_JANEIRO_ACUM = FSE_ANO_N_JANEIRO;
    var FSE_ANO_N_FEVEREIRO_ACUM = FSE_ANO_N_FEVEREIRO + FSE_ANO_N_JANEIRO_ACUM;
    var FSE_ANO_N_MARCO_ACUM = FSE_ANO_N_MARCO + FSE_ANO_N_FEVEREIRO_ACUM;
    var FSE_ANO_N_ABRIL_ACUM = FSE_ANO_N_ABRIL + FSE_ANO_N_MARCO_ACUM;
    var FSE_ANO_N_MAIO_ACUM = FSE_ANO_N_MAIO + FSE_ANO_N_ABRIL_ACUM;
    var FSE_ANO_N_JUNHO_ACUM = FSE_ANO_N_JUNHO + FSE_ANO_N_MAIO_ACUM;
    var FSE_ANO_N_JULHO_ACUM = FSE_ANO_N_JULHO + FSE_ANO_N_JUNHO_ACUM;
    var FSE_ANO_N_AGOSTO_ACUM = FSE_ANO_N_AGOSTO + FSE_ANO_N_JULHO_ACUM;
    var FSE_ANO_N_SETEMBRO_ACUM = FSE_ANO_N_SETEMBRO + FSE_ANO_N_AGOSTO_ACUM;
    var FSE_ANO_N_OUTUBRO_ACUM = FSE_ANO_N_OUTUBRO + FSE_ANO_N_SETEMBRO_ACUM;
    var FSE_ANO_N_NOVEMBRO_ACUM = FSE_ANO_N_NOVEMBRO + FSE_ANO_N_OUTUBRO_ACUM;
    var FSE_ANO_N_DEZEMBRO_ACUM = FSE_ANO_N_DEZEMBRO + FSE_ANO_N_NOVEMBRO_ACUM;



    if(@ViewData["MES_ACUM_REAL"]<1){ var PESO_FSE_VN_ANO_N_JANEIRO_ACUM = 'nd'; var PESO_FSE_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var PESO_FSE_VN_ANO_N_JANEIRO_ACUM= FSE_ANO_N_JANEIRO_ACUM/IND_VN_ANO_N_JANEIRO_ACUM*100; var PESO_FSE_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = PESO_FSE_VN_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var PESO_FSE_VN_ANO_N_FEVEREIRO_ACUM = 'nd'; var PESO_FSE_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var PESO_FSE_VN_ANO_N_FEVEREIRO_ACUM= FSE_ANO_N_FEVEREIRO_ACUM/IND_VN_ANO_N_FEVEREIRO_ACUM*100; var PESO_FSE_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = PESO_FSE_VN_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var PESO_FSE_VN_ANO_N_MARCO_ACUM = 'nd'; var PESO_FSE_VN_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var PESO_FSE_VN_ANO_N_MARCO_ACUM= FSE_ANO_N_MARCO_ACUM/IND_VN_ANO_N_MARCO_ACUM*100; var PESO_FSE_VN_ANO_N_MARCO_ACUM_MAX_MIN = PESO_FSE_VN_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var PESO_FSE_VN_ANO_N_ABRIL_ACUM = 'nd'; var PESO_FSE_VN_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var PESO_FSE_VN_ANO_N_ABRIL_ACUM= FSE_ANO_N_ABRIL_ACUM/IND_VN_ANO_N_ABRIL_ACUM*100; var PESO_FSE_VN_ANO_N_ABRIL_ACUM_MAX_MIN = PESO_FSE_VN_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var PESO_FSE_VN_ANO_N_MAIO_ACUM = 'nd'; var PESO_FSE_VN_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var PESO_FSE_VN_ANO_N_MAIO_ACUM= FSE_ANO_N_MAIO_ACUM/IND_VN_ANO_N_MAIO_ACUM*100; var PESO_FSE_VN_ANO_N_MAIO_ACUM_MAX_MIN = PESO_FSE_VN_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var PESO_FSE_VN_ANO_N_JUNHO_ACUM = 'nd'; var PESO_FSE_VN_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var PESO_FSE_VN_ANO_N_JUNHO_ACUM= FSE_ANO_N_JUNHO_ACUM/IND_VN_ANO_N_JUNHO_ACUM*100; var PESO_FSE_VN_ANO_N_JUNHO_ACUM_MAX_MIN = PESO_FSE_VN_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var PESO_FSE_VN_ANO_N_JULHO_ACUM = 'nd'; var PESO_FSE_VN_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var PESO_FSE_VN_ANO_N_JULHO_ACUM= FSE_ANO_N_JULHO_ACUM/IND_VN_ANO_N_JULHO_ACUM*100; var PESO_FSE_VN_ANO_N_JULHO_ACUM_MAX_MIN = PESO_FSE_VN_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var PESO_FSE_VN_ANO_N_AGOSTO_ACUM = 'nd'; var PESO_FSE_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var PESO_FSE_VN_ANO_N_AGOSTO_ACUM= FSE_ANO_N_AGOSTO_ACUM/IND_VN_ANO_N_AGOSTO_ACUM*100; var PESO_FSE_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = PESO_FSE_VN_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var PESO_FSE_VN_ANO_N_SETEMBRO_ACUM = 'nd'; var PESO_FSE_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_FSE_VN_ANO_N_SETEMBRO_ACUM= FSE_ANO_N_SETEMBRO_ACUM/IND_VN_ANO_N_SETEMBRO_ACUM*100; var PESO_FSE_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = PESO_FSE_VN_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var PESO_FSE_VN_ANO_N_OUTUBRO_ACUM = 'nd'; var PESO_FSE_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var PESO_FSE_VN_ANO_N_OUTUBRO_ACUM= FSE_ANO_N_OUTUBRO_ACUM/IND_VN_ANO_N_OUTUBRO_ACUM*100; var PESO_FSE_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = PESO_FSE_VN_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var PESO_FSE_VN_ANO_N_NOVEMBRO_ACUM = 'nd'; var PESO_FSE_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_FSE_VN_ANO_N_NOVEMBRO_ACUM= FSE_ANO_N_NOVEMBRO_ACUM/IND_VN_ANO_N_NOVEMBRO_ACUM*100; var PESO_FSE_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = PESO_FSE_VN_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var PESO_FSE_VN_ANO_N_DEZEMBRO_ACUM = 'nd'; var PESO_FSE_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_FSE_VN_ANO_N_DEZEMBRO_ACUM= FSE_ANO_N_DEZEMBRO_ACUM/IND_VN_ANO_N_DEZEMBRO_ACUM*100; var PESO_FSE_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = PESO_FSE_VN_ANO_N_DEZEMBRO_ACUM };



    var IND_VN_ANO_N_1_JANEIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JANEIRO"])));
    var IND_VN_ANO_N_1_FEVEREIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_FEVEREIRO"]))) + IND_VN_ANO_N_1_JANEIRO_ACUM;
    var IND_VN_ANO_N_1_MARCO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_MARCO"]))) + IND_VN_ANO_N_1_FEVEREIRO_ACUM;
    var IND_VN_ANO_N_1_ABRIL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_ABRIL"]))) + IND_VN_ANO_N_1_MARCO_ACUM;
    var IND_VN_ANO_N_1_MAIO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_MAIO"]))) + IND_VN_ANO_N_1_ABRIL_ACUM;
    var IND_VN_ANO_N_1_JUNHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JUNHO"]))) + IND_VN_ANO_N_1_MAIO_ACUM;
    var IND_VN_ANO_N_1_JULHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JULHO"]))) + IND_VN_ANO_N_1_JUNHO_ACUM;
    var IND_VN_ANO_N_1_AGOSTO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_AGOSTO"]))) + IND_VN_ANO_N_1_JULHO_ACUM;
    var IND_VN_ANO_N_1_SETEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_SETEMBRO"]))) + IND_VN_ANO_N_1_AGOSTO_ACUM;
    var IND_VN_ANO_N_1_OUTUBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_OUTUBRO"]))) + IND_VN_ANO_N_1_SETEMBRO_ACUM;
    var IND_VN_ANO_N_1_NOVEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_NOVEMBRO"]))) + IND_VN_ANO_N_1_OUTUBRO_ACUM;
    var IND_VN_ANO_N_1_DEZEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_DEZEMBRO"]))) + IND_VN_ANO_N_1_NOVEMBRO_ACUM;


    var FSE_ANO_N_1_JANEIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_JANEIRO"])));
    var FSE_ANO_N_1_FEVEREIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_FEVEREIRO"]))) + FSE_ANO_N_1_JANEIRO_ACUM;
    var FSE_ANO_N_1_MARCO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_MARCO"]))) + FSE_ANO_N_1_FEVEREIRO_ACUM;
    var FSE_ANO_N_1_ABRIL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_ABRIL"]))) + FSE_ANO_N_1_MARCO_ACUM;
    var FSE_ANO_N_1_MAIO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_MAIO"]))) + FSE_ANO_N_1_ABRIL_ACUM;
    var FSE_ANO_N_1_JUNHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_JUNHO"]))) + FSE_ANO_N_1_MAIO_ACUM;
    var FSE_ANO_N_1_JULHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_JULHO"]))) + FSE_ANO_N_1_JUNHO_ACUM;
    var FSE_ANO_N_1_AGOSTO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_AGOSTO"]))) + FSE_ANO_N_1_JULHO_ACUM;
    var FSE_ANO_N_1_SETEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_SETEMBRO"]))) + FSE_ANO_N_1_AGOSTO_ACUM;
    var FSE_ANO_N_1_OUTUBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_OUTUBRO"]))) + FSE_ANO_N_1_SETEMBRO_ACUM;
    var FSE_ANO_N_1_NOVEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_NOVEMBRO"]))) + FSE_ANO_N_1_OUTUBRO_ACUM;
    var FSE_ANO_N_1_DEZEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_DEZEMBRO"]))) + FSE_ANO_N_1_NOVEMBRO_ACUM;


    var Fse_Mensal_Eixo_max_princ= Math.max(
                       PESO_FSE_VN_ANO_N_JANEIRO_ACUM_MAX_MIN,
                       PESO_FSE_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN,
                       PESO_FSE_VN_ANO_N_MARCO_ACUM_MAX_MIN,
                       PESO_FSE_VN_ANO_N_ABRIL_ACUM_MAX_MIN,
                       PESO_FSE_VN_ANO_N_MAIO_ACUM_MAX_MIN,
                       PESO_FSE_VN_ANO_N_JUNHO_ACUM_MAX_MIN,
                       PESO_FSE_VN_ANO_N_JULHO_ACUM_MAX_MIN,
                       PESO_FSE_VN_ANO_N_AGOSTO_ACUM_MAX_MIN,
                       PESO_FSE_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN,
                       PESO_FSE_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN,
                       PESO_FSE_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN,
                       PESO_FSE_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN,

                       FSE_ANO_N_1_JANEIRO_ACUM/IND_VN_ANO_N_1_JANEIRO_ACUM*100,
                       FSE_ANO_N_1_FEVEREIRO_ACUM/IND_VN_ANO_N_1_FEVEREIRO_ACUM*100,
                       FSE_ANO_N_1_MARCO_ACUM/IND_VN_ANO_N_1_MARCO_ACUM*100,
                       FSE_ANO_N_1_ABRIL_ACUM/IND_VN_ANO_N_1_ABRIL_ACUM*100,
                       FSE_ANO_N_1_MAIO_ACUM/IND_VN_ANO_N_1_MAIO_ACUM*100,
                       FSE_ANO_N_1_JUNHO_ACUM/IND_VN_ANO_N_1_JUNHO_ACUM*100,
                       FSE_ANO_N_1_JULHO_ACUM/IND_VN_ANO_N_1_JULHO_ACUM*100,
                       FSE_ANO_N_1_AGOSTO_ACUM/IND_VN_ANO_N_1_AGOSTO_ACUM*100,
                       FSE_ANO_N_1_SETEMBRO_ACUM/IND_VN_ANO_N_1_SETEMBRO_ACUM*100,
                       FSE_ANO_N_1_OUTUBRO_ACUM/IND_VN_ANO_N_1_OUTUBRO_ACUM*100,
                       FSE_ANO_N_1_NOVEMBRO_ACUM/IND_VN_ANO_N_1_NOVEMBRO_ACUM*100,
                       FSE_ANO_N_1_DEZEMBRO_ACUM/IND_VN_ANO_N_1_DEZEMBRO_ACUM*100,
                             );
    var Fse_Mensal_Eixo_min_princ= Math.min(

                       PESO_FSE_VN_ANO_N_JANEIRO_ACUM_MAX_MIN,
                       PESO_FSE_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN,
                       PESO_FSE_VN_ANO_N_MARCO_ACUM_MAX_MIN,
                       PESO_FSE_VN_ANO_N_ABRIL_ACUM_MAX_MIN,
                       PESO_FSE_VN_ANO_N_MAIO_ACUM_MAX_MIN,
                       PESO_FSE_VN_ANO_N_JUNHO_ACUM_MAX_MIN,
                       PESO_FSE_VN_ANO_N_JULHO_ACUM_MAX_MIN,
                       PESO_FSE_VN_ANO_N_AGOSTO_ACUM_MAX_MIN,
                       PESO_FSE_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN,
                       PESO_FSE_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN,
                       PESO_FSE_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN,
                       PESO_FSE_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN,

                       FSE_ANO_N_1_JANEIRO_ACUM/IND_VN_ANO_N_1_JANEIRO_ACUM*100,
                       FSE_ANO_N_1_FEVEREIRO_ACUM/IND_VN_ANO_N_1_FEVEREIRO_ACUM*100,
                       FSE_ANO_N_1_MARCO_ACUM/IND_VN_ANO_N_1_MARCO_ACUM*100,
                       FSE_ANO_N_1_ABRIL_ACUM/IND_VN_ANO_N_1_ABRIL_ACUM*100,
                       FSE_ANO_N_1_MAIO_ACUM/IND_VN_ANO_N_1_MAIO_ACUM*100,
                       FSE_ANO_N_1_JUNHO_ACUM/IND_VN_ANO_N_1_JUNHO_ACUM*100,
                       FSE_ANO_N_1_JULHO_ACUM/IND_VN_ANO_N_1_JULHO_ACUM*100,
                       FSE_ANO_N_1_AGOSTO_ACUM/IND_VN_ANO_N_1_AGOSTO_ACUM*100,
                       FSE_ANO_N_1_SETEMBRO_ACUM/IND_VN_ANO_N_1_SETEMBRO_ACUM*100,
                       FSE_ANO_N_1_OUTUBRO_ACUM/IND_VN_ANO_N_1_OUTUBRO_ACUM*100,
                       FSE_ANO_N_1_NOVEMBRO_ACUM/IND_VN_ANO_N_1_NOVEMBRO_ACUM*100,
                       FSE_ANO_N_1_DEZEMBRO_ACUM/IND_VN_ANO_N_1_DEZEMBRO_ACUM*100,
                           );
    var Fse_Mensal_Eixo_max_secon= Math.max(
                       FSE_ANO_N_JANEIRO_MAX_MIN ,
                       FSE_ANO_N_FEVEREIRO_MAX_MIN ,
                       FSE_ANO_N_MARCO_MAX_MIN ,
                       FSE_ANO_N_ABRIL_MAX_MIN ,
                       FSE_ANO_N_MAIO_MAX_MIN ,
                       FSE_ANO_N_JUNHO_MAX_MIN ,
                       FSE_ANO_N_JULHO_MAX_MIN ,
                       FSE_ANO_N_AGOSTO_MAX_MIN ,
                       FSE_ANO_N_SETEMBRO_MAX_MIN ,
                       FSE_ANO_N_OUTUBRO_MAX_MIN ,
                       FSE_ANO_N_NOVEMBRO_MAX_MIN ,
                       FSE_ANO_N_DEZEMBRO_MAX_MIN ,



                            @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_DEZEMBRO"]))),

                            );
    var Fse_Mensal_Eixo_min_secon= Math.min(
                       FSE_ANO_N_JANEIRO_MAX_MIN ,
                       FSE_ANO_N_FEVEREIRO_MAX_MIN ,
                       FSE_ANO_N_MARCO_MAX_MIN ,
                       FSE_ANO_N_ABRIL_MAX_MIN ,
                       FSE_ANO_N_MAIO_MAX_MIN ,
                       FSE_ANO_N_JUNHO_MAX_MIN ,
                       FSE_ANO_N_JULHO_MAX_MIN ,
                       FSE_ANO_N_AGOSTO_MAX_MIN ,
                       FSE_ANO_N_SETEMBRO_MAX_MIN ,
                       FSE_ANO_N_OUTUBRO_MAX_MIN ,
                       FSE_ANO_N_NOVEMBRO_MAX_MIN ,
                       FSE_ANO_N_DEZEMBRO_MAX_MIN ,


                           @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_DEZEMBRO"]))),

                          );

    //NOTA TA: Aqui trato o minimo e o maximo do eixo principal
    if(Math.abs(Fse_Mensal_Eixo_max_princ)>=Math.abs(Fse_Mensal_Eixo_min_princ))
    {
        var Fse_Mensal_Eixo_max_princ_=(Math.ceil(Fse_Mensal_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(Fse_Mensal_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Fse_Mensal_Eixo_max_princ),0).toString().length-1);
        var Fse_Mensal_Eixo_min_princ_= (Math.floor(Fse_Mensal_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(Fse_Mensal_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Fse_Mensal_Eixo_max_princ),0).toString().length-1);
        //alert(Fse_Mensal_Eixo_max_princ_);
        //alert(Fse_Mensal_Eixo_min_princ_);
    }
    else
    {
        var Fse_Mensal_Eixo_max_princ_=(Math.ceil(Fse_Mensal_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(Fse_Mensal_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Fse_Mensal_Eixo_min_princ),0).toString().length-1);
        var Fse_Mensal_Eixo_min_princ_= (Math.floor(Fse_Mensal_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(Fse_Mensal_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Fse_Mensal_Eixo_min_princ),0).toString().length-1);}

    //NOTA TA: Aqui trato o minimo e o maximo do eixo secundario

    if(Math.abs(Fse_Mensal_Eixo_max_secon)>=Math.abs(Fse_Mensal_Eixo_min_secon))
    {
        var Fse_Mensal_Eixo_max_secon_=(Math.ceil(Fse_Mensal_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(Fse_Mensal_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Fse_Mensal_Eixo_max_secon),0).toString().length-1);
        var Fse_Mensal_Eixo_min_secon_= (Math.floor(Fse_Mensal_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(Fse_Mensal_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Fse_Mensal_Eixo_max_secon),0).toString().length-1);
        //alert(Fse_Mensal_Eixo_max_secon_);
        //alert(Fse_Mensal_Eixo_min_secon_);
    }
    else
    {
        var Fse_Mensal_Eixo_max_secon_=(Math.ceil(Fse_Mensal_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(Fse_Mensal_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Fse_Mensal_Eixo_min_secon),0).toString().length-1);
        var Fse_Mensal_Eixo_min_secon_= (Math.floor(Fse_Mensal_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(Fse_Mensal_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(Fse_Mensal_Eixo_min_secon),0).toString().length-1);}


    if(Math.abs(Fse_Mensal_Eixo_min_princ)/Math.abs(Fse_Mensal_Eixo_max_princ)>=Math.abs(Fse_Mensal_Eixo_min_secon)/Math.abs(Fse_Mensal_Eixo_max_secon))
    { if(Fse_Mensal_Eixo_max_princ > 0 && Fse_Mensal_Eixo_min_princ <0 ){ var Fse_Mensal_Eixo_min_secon__=(Fse_Mensal_Eixo_min_princ_*Fse_Mensal_Eixo_max_secon_)/Fse_Mensal_Eixo_max_princ_;} else { var Fse_Mensal_Eixo_min_secon__=Fse_Mensal_Eixo_min_secon_;}
        if(Fse_Mensal_Eixo_max_secon > 0 && Fse_Mensal_Eixo_min_secon <0 ){ var Fse_Mensal_Eixo_min_princ__=(Fse_Mensal_Eixo_min_secon__*Fse_Mensal_Eixo_max_princ_)/Fse_Mensal_Eixo_max_secon_;} else { var Fse_Mensal_Eixo_min_princ__=Fse_Mensal_Eixo_min_princ_;}}
    else
    {if(Fse_Mensal_Eixo_max_secon > 0 && Fse_Mensal_Eixo_min_secon <0 ){ var Fse_Mensal_Eixo_min_princ__=(Fse_Mensal_Eixo_min_secon_*Fse_Mensal_Eixo_max_princ_)/Fse_Mensal_Eixo_max_secon_;} else { var Fse_Mensal_Eixo_min_princ__=Fse_Mensal_Eixo_min_princ_;}
        if(Fse_Mensal_Eixo_max_princ > 0 && Fse_Mensal_Eixo_min_princ <0 ){ var Fse_Mensal_Eixo_min_secon__=(Fse_Mensal_Eixo_min_princ__*Fse_Mensal_Eixo_max_secon_)/Fse_Mensal_Eixo_max_princ_;} else { var Fse_Mensal_Eixo_min_secon__=Fse_Mensal_Eixo_min_secon_;}
    }



    if(Math.abs(Fse_Mensal_Eixo_max_princ)/Math.abs(Fse_Mensal_Eixo_min_princ)>=Math.abs(Fse_Mensal_Eixo_max_secon)/Math.abs(Fse_Mensal_Eixo_min_secon))
    { if(Fse_Mensal_Eixo_min_princ > 0 && Fse_Mensal_Eixo_max_princ <0 ){ var Fse_Mensal_Eixo_max_secon__=(Fse_Mensal_Eixo_max_princ_*Fse_Mensal_Eixo_min_secon_)/Fse_Mensal_Eixo_min_princ_;} else { var Fse_Mensal_Eixo_max_secon__=Fse_Mensal_Eixo_max_secon_;}
        if(Fse_Mensal_Eixo_min_secon > 0 && Fse_Mensal_Eixo_max_secon <0 ){ var Fse_Mensal_Eixo_max_princ__=(Fse_Mensal_Eixo_max_secon__*Fse_Mensal_Eixo_min_princ_)/Fse_Mensal_Eixo_min_secon_;} else { var Fse_Mensal_Eixo_max_princ__=Fse_Mensal_Eixo_max_princ_;}}
    else
    {if(Fse_Mensal_Eixo_min_secon > 0 && Fse_Mensal_Eixo_max_secon <0 ){ var Fse_Mensal_Eixo_max_princ__=(Fse_Mensal_Eixo_max_secon_*Fse_Mensal_Eixo_min_princ_)/Fse_Mensal_Eixo_min_secon_;} else { var Fse_Mensal_Eixo_max_princ__=Fse_Mensal_Eixo_max_princ_;}
        if(Fse_Mensal_Eixo_min_princ > 0 && Fse_Mensal_Eixo_max_princ <0 ){ var Fse_Mensal_Eixo_max_secon__=(Fse_Mensal_Eixo_max_princ__*Fse_Mensal_Eixo_min_secon_)/Fse_Mensal_Eixo_min_princ_;} else { var Fse_Mensal_Eixo_max_secon__=Fse_Mensal_Eixo_max_secon_;}
    }


    var GRAFICO_FSE_MENSAL_1=document.getElementById('GRAFICO_FSE_MENSAL_1').getContext('2d');

    var GRAFICO_FSE_MENSAL_1=new Chart(GRAFICO_FSE_MENSAL_1, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'Peso FSE vs VN(ac) ' + ANO_VERSAO_REAL_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(126,42,0)',
                   data: [
                   PESO_FSE_VN_ANO_N_JANEIRO_ACUM,
                   PESO_FSE_VN_ANO_N_FEVEREIRO_ACUM,
                   PESO_FSE_VN_ANO_N_MARCO_ACUM,
                   PESO_FSE_VN_ANO_N_ABRIL_ACUM,
                   PESO_FSE_VN_ANO_N_MAIO_ACUM,
                   PESO_FSE_VN_ANO_N_JUNHO_ACUM,
                   PESO_FSE_VN_ANO_N_JULHO_ACUM,
                   PESO_FSE_VN_ANO_N_AGOSTO_ACUM,
                   PESO_FSE_VN_ANO_N_SETEMBRO_ACUM,
                   PESO_FSE_VN_ANO_N_OUTUBRO_ACUM,
                   PESO_FSE_VN_ANO_N_NOVEMBRO_ACUM,
                   PESO_FSE_VN_ANO_N_DEZEMBRO_ACUM,
                   ],
                   type: 'line'


               },
                {
                    label:  'FSE´S(m) ' + ANO_VERSAO_REAL_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(126,42,0,0.6)',
                    borderColor: 'rgba(126,42,0,0.6)',
                    data: [
                  FSE_ANO_N_JANEIRO ,
                  FSE_ANO_N_FEVEREIRO ,
                  FSE_ANO_N_MARCO ,
                  FSE_ANO_N_ABRIL,
                  FSE_ANO_N_MAIO ,
                  FSE_ANO_N_JUNHO ,
                  FSE_ANO_N_JULHO ,
                  FSE_ANO_N_AGOSTO ,
                  FSE_ANO_N_SETEMBRO ,
                  FSE_ANO_N_OUTUBRO ,
                  FSE_ANO_N_NOVEMBRO ,
                  FSE_ANO_N_DEZEMBRO ,                   ],
                },


            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'FSE´S MENSAL_1',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                min:  Math.round(Fse_Mensal_Eixo_min_princ__,0),
                                                max:  Math.round(Fse_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString()+ "%";
                                                }
                                            }
                                        },

                    { id: 'B',
                        type: 'linear',
                        position: 'right',
                        ticks: {
                            min: Math.round(Fse_Mensal_Eixo_min_secon__,0),
                            max:  Math.round(Fse_Mensal_Eixo_max_secon__,0),
                            beginAtZero: false,
                            callback: function(value, index, values) {
                                return value.toLocaleString();
                            }
                        }
                    },






                ]
            }
        },

    });

</script>

@*------------------------------------------------GRAFICO_FSE_MENSAL_2-----------------------------------------------------------*@
<script>

    var GRAFICO_FSE_MENSAL_2=document.getElementById('GRAFICO_FSE_MENSAL_2').getContext('2d');

    var GRAFICO_FSE_MENSAL_2=new Chart(GRAFICO_FSE_MENSAL_2, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'Peso FSEvsVN(ac) ' + ANO_VERSAO_ANTE_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(135, 191 , 97)',
                   data: [
                   FSE_ANO_N_1_JANEIRO_ACUM/IND_VN_ANO_N_1_JANEIRO_ACUM*100,
                   FSE_ANO_N_1_FEVEREIRO_ACUM/IND_VN_ANO_N_1_FEVEREIRO_ACUM*100,
                   FSE_ANO_N_1_MARCO_ACUM/IND_VN_ANO_N_1_MARCO_ACUM*100,
                   FSE_ANO_N_1_ABRIL_ACUM/IND_VN_ANO_N_1_ABRIL_ACUM*100,
                   FSE_ANO_N_1_MAIO_ACUM/IND_VN_ANO_N_1_MAIO_ACUM*100,
                   FSE_ANO_N_1_JUNHO_ACUM/IND_VN_ANO_N_1_JUNHO_ACUM*100,
                   FSE_ANO_N_1_JULHO_ACUM/IND_VN_ANO_N_1_JULHO_ACUM*100,
                   FSE_ANO_N_1_AGOSTO_ACUM/IND_VN_ANO_N_1_AGOSTO_ACUM*100,
                   FSE_ANO_N_1_SETEMBRO_ACUM/IND_VN_ANO_N_1_SETEMBRO_ACUM*100,
                   FSE_ANO_N_1_OUTUBRO_ACUM/IND_VN_ANO_N_1_OUTUBRO_ACUM*100,
                   FSE_ANO_N_1_NOVEMBRO_ACUM/IND_VN_ANO_N_1_NOVEMBRO_ACUM*100,
                   FSE_ANO_N_1_DEZEMBRO_ACUM/IND_VN_ANO_N_1_DEZEMBRO_ACUM*100,

                   ],
                   type: 'line'


               },
                {
                    label:  'FSE´S(m) ' + ANO_VERSAO_ANTE_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(135, 191 , 97,0.7',
                    borderColor: 'rgba(135, 191 , 97,0.7)',
                    data: [
                       @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_JANEIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_FEVEREIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_MARCO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_ABRIL"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_MAIO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_JUNHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_JULHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_AGOSTO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_SETEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_OUTUBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_NOVEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["FSE_ANO_N_1_DEZEMBRO"]))),
                    ],
                },


            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'FSE´S MENSAL_1',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                min:  Math.round(Fse_Mensal_Eixo_min_princ__,0),
                                                max:  Math.round(Fse_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString()+ "%";
                                                }
                                            }
                                        },

                    { id: 'B',
                        type: 'linear',
                        position: 'right',
                        ticks: {
                            min: Math.round(Fse_Mensal_Eixo_min_secon__,0),
                            max:  Math.round(Fse_Mensal_Eixo_max_secon__,0),
                            beginAtZero: false,
                            callback: function(value, index, values) {
                                return value.toLocaleString();
                            }
                        }
                    },






                ]
            }
        },

    });

</script>


@*------------------------------------------------GRAFICO_FSE_ACUMULADO_COMP-----------------------------------------------------------*@
<script>

    if(@ViewData["MES_ACUM_REAL"]<1){ var VAR_VN_ANO_N_JANEIRO_ACUM = 'nd'; var VAR_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JANEIRO_ACUM= IND_VN_ANO_N_JANEIRO_ACUM/IND_VN_ANO_N_1_JANEIRO_ACUM*100-100; var VAR_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = VAR_VN_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var VAR_VN_ANO_N_FEVEREIRO_ACUM = 'nd'; var VAR_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_FEVEREIRO_ACUM= IND_VN_ANO_N_FEVEREIRO_ACUM/IND_VN_ANO_N_1_FEVEREIRO_ACUM*100-100; var VAR_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = VAR_VN_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var VAR_VN_ANO_N_MARCO_ACUM = 'nd'; var VAR_VN_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_MARCO_ACUM= IND_VN_ANO_N_MARCO_ACUM/IND_VN_ANO_N_1_MARCO_ACUM*100-100; var VAR_VN_ANO_N_MARCO_ACUM_MAX_MIN = VAR_VN_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var VAR_VN_ANO_N_ABRIL_ACUM = 'nd'; var VAR_VN_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_ABRIL_ACUM= IND_VN_ANO_N_ABRIL_ACUM/IND_VN_ANO_N_1_ABRIL_ACUM*100-100; var VAR_VN_ANO_N_ABRIL_ACUM_MAX_MIN = VAR_VN_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var VAR_VN_ANO_N_MAIO_ACUM = 'nd'; var VAR_VN_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_MAIO_ACUM= IND_VN_ANO_N_MAIO_ACUM/IND_VN_ANO_N_1_MAIO_ACUM*100-100; var VAR_VN_ANO_N_MAIO_ACUM_MAX_MIN = VAR_VN_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var VAR_VN_ANO_N_JUNHO_ACUM = 'nd'; var VAR_VN_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JUNHO_ACUM= IND_VN_ANO_N_JUNHO_ACUM/IND_VN_ANO_N_1_JUNHO_ACUM*100-100; var VAR_VN_ANO_N_JUNHO_ACUM_MAX_MIN = VAR_VN_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var VAR_VN_ANO_N_JULHO_ACUM = 'nd'; var VAR_VN_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JULHO_ACUM= IND_VN_ANO_N_JULHO_ACUM/IND_VN_ANO_N_1_JULHO_ACUM*100-100; var VAR_VN_ANO_N_JULHO_ACUM_MAX_MIN = VAR_VN_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var VAR_VN_ANO_N_AGOSTO_ACUM = 'nd'; var VAR_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_AGOSTO_ACUM= IND_VN_ANO_N_AGOSTO_ACUM/IND_VN_ANO_N_1_AGOSTO_ACUM*100-100; var VAR_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = VAR_VN_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var VAR_VN_ANO_N_SETEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_SETEMBRO_ACUM= IND_VN_ANO_N_SETEMBRO_ACUM/IND_VN_ANO_N_1_SETEMBRO_ACUM*100-100; var VAR_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var VAR_VN_ANO_N_OUTUBRO_ACUM = 'nd'; var VAR_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_OUTUBRO_ACUM= IND_VN_ANO_N_OUTUBRO_ACUM/IND_VN_ANO_N_1_OUTUBRO_ACUM*100-100; var VAR_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var VAR_VN_ANO_N_NOVEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_NOVEMBRO_ACUM= IND_VN_ANO_N_NOVEMBRO_ACUM/IND_VN_ANO_N_1_NOVEMBRO_ACUM*100-100; var VAR_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var VAR_VN_ANO_N_DEZEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_DEZEMBRO_ACUM= IND_VN_ANO_N_DEZEMBRO_ACUM/IND_VN_ANO_N_1_DEZEMBRO_ACUM*100-100; var VAR_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_DEZEMBRO_ACUM };



    if(@ViewData["MES_ACUM_REAL"]<1){ var VAR_FSE_ANO_N_JANEIRO_ACUM = 'nd'; var VAR_FSE_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var VAR_FSE_ANO_N_JANEIRO_ACUM= FSE_ANO_N_JANEIRO_ACUM/FSE_ANO_N_1_JANEIRO_ACUM*100-100; var VAR_FSE_ANO_N_JANEIRO_ACUM_MAX_MIN = VAR_FSE_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var VAR_FSE_ANO_N_FEVEREIRO_ACUM = 'nd'; var VAR_FSE_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var VAR_FSE_ANO_N_FEVEREIRO_ACUM= FSE_ANO_N_FEVEREIRO_ACUM/FSE_ANO_N_1_FEVEREIRO_ACUM*100-100; var VAR_FSE_ANO_N_FEVEREIRO_ACUM_MAX_MIN = VAR_FSE_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var VAR_FSE_ANO_N_MARCO_ACUM = 'nd'; var VAR_FSE_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var VAR_FSE_ANO_N_MARCO_ACUM= FSE_ANO_N_MARCO_ACUM/FSE_ANO_N_1_MARCO_ACUM*100-100; var VAR_FSE_ANO_N_MARCO_ACUM_MAX_MIN = VAR_FSE_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var VAR_FSE_ANO_N_ABRIL_ACUM = 'nd'; var VAR_FSE_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var VAR_FSE_ANO_N_ABRIL_ACUM= FSE_ANO_N_ABRIL_ACUM/FSE_ANO_N_1_ABRIL_ACUM*100-100; var VAR_FSE_ANO_N_ABRIL_ACUM_MAX_MIN = VAR_FSE_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var VAR_FSE_ANO_N_MAIO_ACUM = 'nd'; var VAR_FSE_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var VAR_FSE_ANO_N_MAIO_ACUM= FSE_ANO_N_MAIO_ACUM/FSE_ANO_N_1_MAIO_ACUM*100-100; var VAR_FSE_ANO_N_MAIO_ACUM_MAX_MIN = VAR_FSE_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var VAR_FSE_ANO_N_JUNHO_ACUM = 'nd'; var VAR_FSE_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var VAR_FSE_ANO_N_JUNHO_ACUM= FSE_ANO_N_JUNHO_ACUM/FSE_ANO_N_1_JUNHO_ACUM*100-100; var VAR_FSE_ANO_N_JUNHO_ACUM_MAX_MIN = VAR_FSE_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var VAR_FSE_ANO_N_JULHO_ACUM = 'nd'; var VAR_FSE_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var VAR_FSE_ANO_N_JULHO_ACUM= FSE_ANO_N_JULHO_ACUM/FSE_ANO_N_1_JULHO_ACUM*100-100; var VAR_FSE_ANO_N_JULHO_ACUM_MAX_MIN = VAR_FSE_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var VAR_FSE_ANO_N_AGOSTO_ACUM = 'nd'; var VAR_FSE_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var VAR_FSE_ANO_N_AGOSTO_ACUM= FSE_ANO_N_AGOSTO_ACUM/FSE_ANO_N_1_AGOSTO_ACUM*100-100; var VAR_FSE_ANO_N_AGOSTO_ACUM_MAX_MIN = VAR_FSE_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var VAR_FSE_ANO_N_SETEMBRO_ACUM = 'nd'; var VAR_FSE_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_FSE_ANO_N_SETEMBRO_ACUM= FSE_ANO_N_SETEMBRO_ACUM/FSE_ANO_N_1_SETEMBRO_ACUM*100-100; var VAR_FSE_ANO_N_SETEMBRO_ACUM_MAX_MIN = VAR_FSE_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var VAR_FSE_ANO_N_OUTUBRO_ACUM = 'nd'; var VAR_FSE_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var VAR_FSE_ANO_N_OUTUBRO_ACUM= FSE_ANO_N_OUTUBRO_ACUM/FSE_ANO_N_1_OUTUBRO_ACUM*100-100; var VAR_FSE_ANO_N_OUTUBRO_ACUM_MAX_MIN = VAR_FSE_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var VAR_FSE_ANO_N_NOVEMBRO_ACUM = 'nd'; var VAR_FSE_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_FSE_ANO_N_NOVEMBRO_ACUM= FSE_ANO_N_NOVEMBRO_ACUM/FSE_ANO_N_1_NOVEMBRO_ACUM*100-100; var VAR_FSE_ANO_N_NOVEMBRO_ACUM_MAX_MIN = VAR_FSE_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var VAR_FSE_ANO_N_DEZEMBRO_ACUM = 'nd'; var VAR_FSE_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_FSE_ANO_N_DEZEMBRO_ACUM= FSE_ANO_N_DEZEMBRO_ACUM/FSE_ANO_N_1_DEZEMBRO_ACUM*100-100; var VAR_FSE_ANO_N_DEZEMBRO_ACUM_MAX_MIN = VAR_FSE_ANO_N_DEZEMBRO_ACUM };



    var GRAFICO_FSE_ACUMULADO_COMP=document.getElementById('GRAFICO_FSE_ACUMULADO_COMP').getContext('2d');

    var GRAFICO_FSE_ACUMULADO_COMP=new Chart(GRAFICO_FSE_ACUMULADO_COMP, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'Var FSE(ac) ' + ANO_VERSAO_REAL_ + 'vs' + ANO_VERSAO_ANTE_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(126,42,0)',
                   data: [
                   VAR_FSE_ANO_N_JANEIRO_ACUM,
                   VAR_FSE_ANO_N_FEVEREIRO_ACUM,
                   VAR_FSE_ANO_N_MARCO_ACUM,
                   VAR_FSE_ANO_N_ABRIL_ACUM,
                   VAR_FSE_ANO_N_MAIO_ACUM,
                   VAR_FSE_ANO_N_JUNHO_ACUM,
                   VAR_FSE_ANO_N_JULHO_ACUM,
                   VAR_FSE_ANO_N_AGOSTO_ACUM,
                   VAR_FSE_ANO_N_SETEMBRO_ACUM,
                   VAR_FSE_ANO_N_OUTUBRO_ACUM,
                   VAR_FSE_ANO_N_NOVEMBRO_ACUM,
                   VAR_FSE_ANO_N_DEZEMBRO_ACUM,

                   ],
                   type: 'line'


               },
                {
                    label: 'Var VN(ac) ' + ANO_VERSAO_REAL_ + 'vs' + ANO_VERSAO_ANTE_,
                    yAxisID: 'A',
                    //backgroundColor: 'rgb(17, 121, 240)',
                    borderColor: 'rgb(77 , 121 , 199)',
                    data: [
                          VAR_VN_ANO_N_JANEIRO_ACUM,
                          VAR_VN_ANO_N_FEVEREIRO_ACUM,
                          VAR_VN_ANO_N_MARCO_ACUM,
                          VAR_VN_ANO_N_ABRIL_ACUM,
                          VAR_VN_ANO_N_MAIO_ACUM,
                          VAR_VN_ANO_N_JUNHO_ACUM,
                          VAR_VN_ANO_N_JULHO_ACUM,
                          VAR_VN_ANO_N_AGOSTO_ACUM,
                          VAR_VN_ANO_N_SETEMBRO_ACUM,
                          VAR_VN_ANO_N_OUTUBRO_ACUM,
                          VAR_VN_ANO_N_NOVEMBRO_ACUM,
                          VAR_VN_ANO_N_DEZEMBRO_ACUM,
                    ],
                    type: 'line'
                },


            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'FSE´S COMP',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                //min:  Math.round(Fse_Mensal_Eixo_min_princ__,0),
                                                //max:  Math.round(Fse_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: true,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString()+ "%";
                                                }
                                            }
                                        },

                    //{ id: 'B',
                    //type: 'linear',
                    //position: 'right',
                    //ticks: {
                    //    //min:  Math.round(Fse_Mensal_Eixo_min_princ__,0),
                    //    //max:  Math.round(Fse_Mensal_Eixo_max_princ__,0),
                    //    beginAtZero: true,
                    //    callback: function(value, index, values) {
                    //        return value.toLocaleString();
                    //        }
                    //    }
                    //},






                ]
            }
        },

    });

</script>


@*------------------------------------------------GRAFICO_GASTOS_PESSOAL_MENSAL_1-----------------------------------------------------------*@
<script>

    if(@ViewData["MES_ACUM_REAL"]<1){ var IND_VN_ANO_N_JANEIRO = 'nd'; var IND_VN_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JANEIRO"]))); var IND_VN_ANO_N_JANEIRO_MAX_MIN = IND_VN_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var IND_VN_ANO_N_FEVEREIRO = 'nd'; var IND_VN_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_FEVEREIRO"]))); var IND_VN_ANO_N_FEVEREIRO_MAX_MIN = IND_VN_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var IND_VN_ANO_N_MARCO = 'nd'; var IND_VN_ANO_N_MARCO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_MARCO"]))); var IND_VN_ANO_N_MARCO_MAX_MIN = IND_VN_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var IND_VN_ANO_N_ABRIL = 'nd'; var IND_VN_ANO_N_ABRIL_MAX_MIN = 0;  } else { var IND_VN_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_ABRIL"]))); var IND_VN_ANO_N_ABRIL_MAX_MIN = IND_VN_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var IND_VN_ANO_N_MAIO = 'nd'; var IND_VN_ANO_N_MAIO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_MAIO"]))); var IND_VN_ANO_N_MAIO_MAX_MIN = IND_VN_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var IND_VN_ANO_N_JUNHO = 'nd'; var IND_VN_ANO_N_JUNHO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JUNHO"]))); var IND_VN_ANO_N_JUNHO_MAX_MIN = IND_VN_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var IND_VN_ANO_N_JULHO = 'nd'; var IND_VN_ANO_N_JULHO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JULHO"]))); var IND_VN_ANO_N_JULHO_MAX_MIN = IND_VN_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var IND_VN_ANO_N_AGOSTO = 'nd'; var IND_VN_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_AGOSTO"]))); var IND_VN_ANO_N_AGOSTO_MAX_MIN = IND_VN_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var IND_VN_ANO_N_SETEMBRO = 'nd'; var IND_VN_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_SETEMBRO"]))); var IND_VN_ANO_N_SETEMBRO_MAX_MIN = IND_VN_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var IND_VN_ANO_N_OUTUBRO = 'nd'; var IND_VN_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_OUTUBRO"]))); var IND_VN_ANO_N_OUTUBRO_MAX_MIN = IND_VN_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var IND_VN_ANO_N_NOVEMBRO = 'nd'; var IND_VN_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_NOVEMBRO"]))); var IND_VN_ANO_N_NOVEMBRO_MAX_MIN = IND_VN_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var IND_VN_ANO_N_DEZEMBRO = 'nd'; var IND_VN_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_DEZEMBRO"]))); var IND_VN_ANO_N_DEZEMBRO_MAX_MIN = IND_VN_ANO_N_DEZEMBRO };

    if(@ViewData["MES_ACUM_REAL"]<1){ var GASTOS_PESSOAL_ANO_N_JANEIRO = 'nd'; var GASTOS_PESSOAL_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_JANEIRO"]))); var GASTOS_PESSOAL_ANO_N_JANEIRO_MAX_MIN = GASTOS_PESSOAL_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var GASTOS_PESSOAL_ANO_N_FEVEREIRO = 'nd'; var GASTOS_PESSOAL_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_FEVEREIRO"]))); var GASTOS_PESSOAL_ANO_N_FEVEREIRO_MAX_MIN = GASTOS_PESSOAL_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var GASTOS_PESSOAL_ANO_N_MARCO = 'nd'; var GASTOS_PESSOAL_ANO_N_MARCO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_MARCO"]))); var GASTOS_PESSOAL_ANO_N_MARCO_MAX_MIN = GASTOS_PESSOAL_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var GASTOS_PESSOAL_ANO_N_ABRIL = 'nd'; var GASTOS_PESSOAL_ANO_N_ABRIL_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_ABRIL"]))); var GASTOS_PESSOAL_ANO_N_ABRIL_MAX_MIN = GASTOS_PESSOAL_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var GASTOS_PESSOAL_ANO_N_MAIO = 'nd'; var GASTOS_PESSOAL_ANO_N_MAIO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_MAIO"]))); var GASTOS_PESSOAL_ANO_N_MAIO_MAX_MIN = GASTOS_PESSOAL_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var GASTOS_PESSOAL_ANO_N_JUNHO = 'nd'; var GASTOS_PESSOAL_ANO_N_JUNHO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_JUNHO"]))); var GASTOS_PESSOAL_ANO_N_JUNHO_MAX_MIN = GASTOS_PESSOAL_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var GASTOS_PESSOAL_ANO_N_JULHO = 'nd'; var GASTOS_PESSOAL_ANO_N_JULHO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_JULHO"]))); var GASTOS_PESSOAL_ANO_N_JULHO_MAX_MIN = GASTOS_PESSOAL_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var GASTOS_PESSOAL_ANO_N_AGOSTO = 'nd'; var GASTOS_PESSOAL_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_AGOSTO"]))); var GASTOS_PESSOAL_ANO_N_AGOSTO_MAX_MIN = GASTOS_PESSOAL_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var GASTOS_PESSOAL_ANO_N_SETEMBRO = 'nd'; var GASTOS_PESSOAL_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_SETEMBRO"]))); var GASTOS_PESSOAL_ANO_N_SETEMBRO_MAX_MIN = GASTOS_PESSOAL_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var GASTOS_PESSOAL_ANO_N_OUTUBRO = 'nd'; var GASTOS_PESSOAL_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_OUTUBRO"]))); var GASTOS_PESSOAL_ANO_N_OUTUBRO_MAX_MIN = GASTOS_PESSOAL_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var GASTOS_PESSOAL_ANO_N_NOVEMBRO = 'nd'; var GASTOS_PESSOAL_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_NOVEMBRO"]))); var GASTOS_PESSOAL_ANO_N_NOVEMBRO_MAX_MIN = GASTOS_PESSOAL_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var GASTOS_PESSOAL_ANO_N_DEZEMBRO = 'nd'; var GASTOS_PESSOAL_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_DEZEMBRO"]))); var GASTOS_PESSOAL_ANO_N_DEZEMBRO_MAX_MIN = GASTOS_PESSOAL_ANO_N_DEZEMBRO };

    var IND_VN_ANO_N_JANEIRO_ACUM = IND_VN_ANO_N_JANEIRO;
    var IND_VN_ANO_N_FEVEREIRO_ACUM = IND_VN_ANO_N_FEVEREIRO + IND_VN_ANO_N_JANEIRO_ACUM;
    var IND_VN_ANO_N_MARCO_ACUM = IND_VN_ANO_N_MARCO + IND_VN_ANO_N_FEVEREIRO_ACUM;
    var IND_VN_ANO_N_ABRIL_ACUM = IND_VN_ANO_N_ABRIL + IND_VN_ANO_N_MARCO_ACUM;
    var IND_VN_ANO_N_MAIO_ACUM = IND_VN_ANO_N_MAIO + IND_VN_ANO_N_ABRIL_ACUM;
    var IND_VN_ANO_N_JUNHO_ACUM = IND_VN_ANO_N_JUNHO + IND_VN_ANO_N_MAIO_ACUM;
    var IND_VN_ANO_N_JULHO_ACUM = IND_VN_ANO_N_JULHO + IND_VN_ANO_N_JUNHO_ACUM;
    var IND_VN_ANO_N_AGOSTO_ACUM = IND_VN_ANO_N_AGOSTO + IND_VN_ANO_N_JULHO_ACUM;
    var IND_VN_ANO_N_SETEMBRO_ACUM = IND_VN_ANO_N_SETEMBRO + IND_VN_ANO_N_AGOSTO_ACUM;
    var IND_VN_ANO_N_OUTUBRO_ACUM = IND_VN_ANO_N_OUTUBRO + IND_VN_ANO_N_SETEMBRO_ACUM;
    var IND_VN_ANO_N_NOVEMBRO_ACUM = IND_VN_ANO_N_NOVEMBRO + IND_VN_ANO_N_OUTUBRO_ACUM;
    var IND_VN_ANO_N_DEZEMBRO_ACUM = IND_VN_ANO_N_DEZEMBRO + IND_VN_ANO_N_NOVEMBRO_ACUM;

    var GASTOS_PESSOAL_ANO_N_JANEIRO_ACUM = GASTOS_PESSOAL_ANO_N_JANEIRO;
    var GASTOS_PESSOAL_ANO_N_FEVEREIRO_ACUM = GASTOS_PESSOAL_ANO_N_FEVEREIRO + GASTOS_PESSOAL_ANO_N_JANEIRO_ACUM;
    var GASTOS_PESSOAL_ANO_N_MARCO_ACUM = GASTOS_PESSOAL_ANO_N_MARCO + GASTOS_PESSOAL_ANO_N_FEVEREIRO_ACUM;
    var GASTOS_PESSOAL_ANO_N_ABRIL_ACUM = GASTOS_PESSOAL_ANO_N_ABRIL + GASTOS_PESSOAL_ANO_N_MARCO_ACUM;
    var GASTOS_PESSOAL_ANO_N_MAIO_ACUM = GASTOS_PESSOAL_ANO_N_MAIO + GASTOS_PESSOAL_ANO_N_ABRIL_ACUM;
    var GASTOS_PESSOAL_ANO_N_JUNHO_ACUM = GASTOS_PESSOAL_ANO_N_JUNHO + GASTOS_PESSOAL_ANO_N_MAIO_ACUM;
    var GASTOS_PESSOAL_ANO_N_JULHO_ACUM = GASTOS_PESSOAL_ANO_N_JULHO + GASTOS_PESSOAL_ANO_N_JUNHO_ACUM;
    var GASTOS_PESSOAL_ANO_N_AGOSTO_ACUM = GASTOS_PESSOAL_ANO_N_AGOSTO + GASTOS_PESSOAL_ANO_N_JULHO_ACUM;
    var GASTOS_PESSOAL_ANO_N_SETEMBRO_ACUM = GASTOS_PESSOAL_ANO_N_SETEMBRO + GASTOS_PESSOAL_ANO_N_AGOSTO_ACUM;
    var GASTOS_PESSOAL_ANO_N_OUTUBRO_ACUM = GASTOS_PESSOAL_ANO_N_OUTUBRO + GASTOS_PESSOAL_ANO_N_SETEMBRO_ACUM;
    var GASTOS_PESSOAL_ANO_N_NOVEMBRO_ACUM = GASTOS_PESSOAL_ANO_N_NOVEMBRO + GASTOS_PESSOAL_ANO_N_OUTUBRO_ACUM;
    var GASTOS_PESSOAL_ANO_N_DEZEMBRO_ACUM = GASTOS_PESSOAL_ANO_N_DEZEMBRO + GASTOS_PESSOAL_ANO_N_NOVEMBRO_ACUM;



    if(@ViewData["MES_ACUM_REAL"]<1){ var PESO_GASTOS_PESSOAL_VN_ANO_N_JANEIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_VN_ANO_N_JANEIRO_ACUM= GASTOS_PESSOAL_ANO_N_JANEIRO_ACUM/IND_VN_ANO_N_JANEIRO_ACUM*100; var PESO_GASTOS_PESSOAL_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_VN_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var PESO_GASTOS_PESSOAL_VN_ANO_N_FEVEREIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_VN_ANO_N_FEVEREIRO_ACUM= GASTOS_PESSOAL_ANO_N_FEVEREIRO_ACUM/IND_VN_ANO_N_FEVEREIRO_ACUM*100; var PESO_GASTOS_PESSOAL_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_VN_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var PESO_GASTOS_PESSOAL_VN_ANO_N_MARCO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_VN_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_VN_ANO_N_MARCO_ACUM= GASTOS_PESSOAL_ANO_N_MARCO_ACUM/IND_VN_ANO_N_MARCO_ACUM*100; var PESO_GASTOS_PESSOAL_VN_ANO_N_MARCO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_VN_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var PESO_GASTOS_PESSOAL_VN_ANO_N_ABRIL_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_VN_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_VN_ANO_N_ABRIL_ACUM= GASTOS_PESSOAL_ANO_N_ABRIL_ACUM/IND_VN_ANO_N_ABRIL_ACUM*100; var PESO_GASTOS_PESSOAL_VN_ANO_N_ABRIL_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_VN_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var PESO_GASTOS_PESSOAL_VN_ANO_N_MAIO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_VN_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_VN_ANO_N_MAIO_ACUM= GASTOS_PESSOAL_ANO_N_MAIO_ACUM/IND_VN_ANO_N_MAIO_ACUM*100; var PESO_GASTOS_PESSOAL_VN_ANO_N_MAIO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_VN_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var PESO_GASTOS_PESSOAL_VN_ANO_N_JUNHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_VN_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_VN_ANO_N_JUNHO_ACUM= GASTOS_PESSOAL_ANO_N_JUNHO_ACUM/IND_VN_ANO_N_JUNHO_ACUM*100; var PESO_GASTOS_PESSOAL_VN_ANO_N_JUNHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_VN_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var PESO_GASTOS_PESSOAL_VN_ANO_N_JULHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_VN_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_VN_ANO_N_JULHO_ACUM= GASTOS_PESSOAL_ANO_N_JULHO_ACUM/IND_VN_ANO_N_JULHO_ACUM*100; var PESO_GASTOS_PESSOAL_VN_ANO_N_JULHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_VN_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var PESO_GASTOS_PESSOAL_VN_ANO_N_AGOSTO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_VN_ANO_N_AGOSTO_ACUM= GASTOS_PESSOAL_ANO_N_AGOSTO_ACUM/IND_VN_ANO_N_AGOSTO_ACUM*100; var PESO_GASTOS_PESSOAL_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_VN_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var PESO_GASTOS_PESSOAL_VN_ANO_N_SETEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_VN_ANO_N_SETEMBRO_ACUM= GASTOS_PESSOAL_ANO_N_SETEMBRO_ACUM/IND_VN_ANO_N_SETEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_VN_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var PESO_GASTOS_PESSOAL_VN_ANO_N_OUTUBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_VN_ANO_N_OUTUBRO_ACUM= GASTOS_PESSOAL_ANO_N_OUTUBRO_ACUM/IND_VN_ANO_N_OUTUBRO_ACUM*100; var PESO_GASTOS_PESSOAL_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_VN_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var PESO_GASTOS_PESSOAL_VN_ANO_N_NOVEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_VN_ANO_N_NOVEMBRO_ACUM= GASTOS_PESSOAL_ANO_N_NOVEMBRO_ACUM/IND_VN_ANO_N_NOVEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_VN_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var PESO_GASTOS_PESSOAL_VN_ANO_N_DEZEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_VN_ANO_N_DEZEMBRO_ACUM= GASTOS_PESSOAL_ANO_N_DEZEMBRO_ACUM/IND_VN_ANO_N_DEZEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_VN_ANO_N_DEZEMBRO_ACUM };



    var IND_VN_ANO_N_1_JANEIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JANEIRO"])));
    var IND_VN_ANO_N_1_FEVEREIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_FEVEREIRO"]))) + IND_VN_ANO_N_1_JANEIRO_ACUM;
    var IND_VN_ANO_N_1_MARCO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_MARCO"]))) + IND_VN_ANO_N_1_FEVEREIRO_ACUM;
    var IND_VN_ANO_N_1_ABRIL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_ABRIL"]))) + IND_VN_ANO_N_1_MARCO_ACUM;
    var IND_VN_ANO_N_1_MAIO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_MAIO"]))) + IND_VN_ANO_N_1_ABRIL_ACUM;
    var IND_VN_ANO_N_1_JUNHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JUNHO"]))) + IND_VN_ANO_N_1_MAIO_ACUM;
    var IND_VN_ANO_N_1_JULHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JULHO"]))) + IND_VN_ANO_N_1_JUNHO_ACUM;
    var IND_VN_ANO_N_1_AGOSTO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_AGOSTO"]))) + IND_VN_ANO_N_1_JULHO_ACUM;
    var IND_VN_ANO_N_1_SETEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_SETEMBRO"]))) + IND_VN_ANO_N_1_AGOSTO_ACUM;
    var IND_VN_ANO_N_1_OUTUBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_OUTUBRO"]))) + IND_VN_ANO_N_1_SETEMBRO_ACUM;
    var IND_VN_ANO_N_1_NOVEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_NOVEMBRO"]))) + IND_VN_ANO_N_1_OUTUBRO_ACUM;
    var IND_VN_ANO_N_1_DEZEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_DEZEMBRO"]))) + IND_VN_ANO_N_1_NOVEMBRO_ACUM;


    var GASTOS_PESSOAL_ANO_N_1_JANEIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_JANEIRO"])));
    var GASTOS_PESSOAL_ANO_N_1_FEVEREIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_FEVEREIRO"]))) + GASTOS_PESSOAL_ANO_N_1_JANEIRO_ACUM;
    var GASTOS_PESSOAL_ANO_N_1_MARCO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_MARCO"]))) + GASTOS_PESSOAL_ANO_N_1_FEVEREIRO_ACUM;
    var GASTOS_PESSOAL_ANO_N_1_ABRIL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_ABRIL"]))) + GASTOS_PESSOAL_ANO_N_1_MARCO_ACUM;
    var GASTOS_PESSOAL_ANO_N_1_MAIO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_MAIO"]))) + GASTOS_PESSOAL_ANO_N_1_ABRIL_ACUM;
    var GASTOS_PESSOAL_ANO_N_1_JUNHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_JUNHO"]))) + GASTOS_PESSOAL_ANO_N_1_MAIO_ACUM;
    var GASTOS_PESSOAL_ANO_N_1_JULHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_JULHO"]))) + GASTOS_PESSOAL_ANO_N_1_JUNHO_ACUM;
    var GASTOS_PESSOAL_ANO_N_1_AGOSTO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_AGOSTO"]))) + GASTOS_PESSOAL_ANO_N_1_JULHO_ACUM;
    var GASTOS_PESSOAL_ANO_N_1_SETEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_SETEMBRO"]))) + GASTOS_PESSOAL_ANO_N_1_AGOSTO_ACUM;
    var GASTOS_PESSOAL_ANO_N_1_OUTUBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_OUTUBRO"]))) + GASTOS_PESSOAL_ANO_N_1_SETEMBRO_ACUM;
    var GASTOS_PESSOAL_ANO_N_1_NOVEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_NOVEMBRO"]))) + GASTOS_PESSOAL_ANO_N_1_OUTUBRO_ACUM;
    var GASTOS_PESSOAL_ANO_N_1_DEZEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_DEZEMBRO"]))) + GASTOS_PESSOAL_ANO_N_1_NOVEMBRO_ACUM;


    var GASTOS_PESSOAL_Mensal_Eixo_max_princ= Math.max(
                       PESO_GASTOS_PESSOAL_VN_ANO_N_JANEIRO_ACUM_MAX_MIN,
                       PESO_GASTOS_PESSOAL_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN,
                       PESO_GASTOS_PESSOAL_VN_ANO_N_MARCO_ACUM_MAX_MIN,
                       PESO_GASTOS_PESSOAL_VN_ANO_N_ABRIL_ACUM_MAX_MIN,
                       PESO_GASTOS_PESSOAL_VN_ANO_N_MAIO_ACUM_MAX_MIN,
                       PESO_GASTOS_PESSOAL_VN_ANO_N_JUNHO_ACUM_MAX_MIN,
                       PESO_GASTOS_PESSOAL_VN_ANO_N_JULHO_ACUM_MAX_MIN,
                       PESO_GASTOS_PESSOAL_VN_ANO_N_AGOSTO_ACUM_MAX_MIN,
                       PESO_GASTOS_PESSOAL_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN,
                       PESO_GASTOS_PESSOAL_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN,
                       PESO_GASTOS_PESSOAL_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN,
                       PESO_GASTOS_PESSOAL_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN,

                       GASTOS_PESSOAL_ANO_N_1_JANEIRO_ACUM/IND_VN_ANO_N_1_JANEIRO_ACUM*100,
                       GASTOS_PESSOAL_ANO_N_1_FEVEREIRO_ACUM/IND_VN_ANO_N_1_FEVEREIRO_ACUM*100,
                       GASTOS_PESSOAL_ANO_N_1_MARCO_ACUM/IND_VN_ANO_N_1_MARCO_ACUM*100,
                       GASTOS_PESSOAL_ANO_N_1_ABRIL_ACUM/IND_VN_ANO_N_1_ABRIL_ACUM*100,
                       GASTOS_PESSOAL_ANO_N_1_MAIO_ACUM/IND_VN_ANO_N_1_MAIO_ACUM*100,
                       GASTOS_PESSOAL_ANO_N_1_JUNHO_ACUM/IND_VN_ANO_N_1_JUNHO_ACUM*100,
                       GASTOS_PESSOAL_ANO_N_1_JULHO_ACUM/IND_VN_ANO_N_1_JULHO_ACUM*100,
                       GASTOS_PESSOAL_ANO_N_1_AGOSTO_ACUM/IND_VN_ANO_N_1_AGOSTO_ACUM*100,
                       GASTOS_PESSOAL_ANO_N_1_SETEMBRO_ACUM/IND_VN_ANO_N_1_SETEMBRO_ACUM*100,
                       GASTOS_PESSOAL_ANO_N_1_OUTUBRO_ACUM/IND_VN_ANO_N_1_OUTUBRO_ACUM*100,
                       GASTOS_PESSOAL_ANO_N_1_NOVEMBRO_ACUM/IND_VN_ANO_N_1_NOVEMBRO_ACUM*100,
                       GASTOS_PESSOAL_ANO_N_1_DEZEMBRO_ACUM/IND_VN_ANO_N_1_DEZEMBRO_ACUM*100,
                             );
    var GASTOS_PESSOAL_Mensal_Eixo_min_princ= Math.min(

                       PESO_GASTOS_PESSOAL_VN_ANO_N_JANEIRO_ACUM_MAX_MIN,
                       PESO_GASTOS_PESSOAL_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN,
                       PESO_GASTOS_PESSOAL_VN_ANO_N_MARCO_ACUM_MAX_MIN,
                       PESO_GASTOS_PESSOAL_VN_ANO_N_ABRIL_ACUM_MAX_MIN,
                       PESO_GASTOS_PESSOAL_VN_ANO_N_MAIO_ACUM_MAX_MIN,
                       PESO_GASTOS_PESSOAL_VN_ANO_N_JUNHO_ACUM_MAX_MIN,
                       PESO_GASTOS_PESSOAL_VN_ANO_N_JULHO_ACUM_MAX_MIN,
                       PESO_GASTOS_PESSOAL_VN_ANO_N_AGOSTO_ACUM_MAX_MIN,
                       PESO_GASTOS_PESSOAL_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN,
                       PESO_GASTOS_PESSOAL_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN,
                       PESO_GASTOS_PESSOAL_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN,
                       PESO_GASTOS_PESSOAL_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN,

                       GASTOS_PESSOAL_ANO_N_1_JANEIRO_ACUM/IND_VN_ANO_N_1_JANEIRO_ACUM*100,
                       GASTOS_PESSOAL_ANO_N_1_FEVEREIRO_ACUM/IND_VN_ANO_N_1_FEVEREIRO_ACUM*100,
                       GASTOS_PESSOAL_ANO_N_1_MARCO_ACUM/IND_VN_ANO_N_1_MARCO_ACUM*100,
                       GASTOS_PESSOAL_ANO_N_1_ABRIL_ACUM/IND_VN_ANO_N_1_ABRIL_ACUM*100,
                       GASTOS_PESSOAL_ANO_N_1_MAIO_ACUM/IND_VN_ANO_N_1_MAIO_ACUM*100,
                       GASTOS_PESSOAL_ANO_N_1_JUNHO_ACUM/IND_VN_ANO_N_1_JUNHO_ACUM*100,
                       GASTOS_PESSOAL_ANO_N_1_JULHO_ACUM/IND_VN_ANO_N_1_JULHO_ACUM*100,
                       GASTOS_PESSOAL_ANO_N_1_AGOSTO_ACUM/IND_VN_ANO_N_1_AGOSTO_ACUM*100,
                       GASTOS_PESSOAL_ANO_N_1_SETEMBRO_ACUM/IND_VN_ANO_N_1_SETEMBRO_ACUM*100,
                       GASTOS_PESSOAL_ANO_N_1_OUTUBRO_ACUM/IND_VN_ANO_N_1_OUTUBRO_ACUM*100,
                       GASTOS_PESSOAL_ANO_N_1_NOVEMBRO_ACUM/IND_VN_ANO_N_1_NOVEMBRO_ACUM*100,
                       GASTOS_PESSOAL_ANO_N_1_DEZEMBRO_ACUM/IND_VN_ANO_N_1_DEZEMBRO_ACUM*100,
                           );
    var GASTOS_PESSOAL_Mensal_Eixo_max_secon= Math.max(
                       GASTOS_PESSOAL_ANO_N_JANEIRO_MAX_MIN ,
                       GASTOS_PESSOAL_ANO_N_FEVEREIRO_MAX_MIN ,
                       GASTOS_PESSOAL_ANO_N_MARCO_MAX_MIN ,
                       GASTOS_PESSOAL_ANO_N_ABRIL_MAX_MIN ,
                       GASTOS_PESSOAL_ANO_N_MAIO_MAX_MIN ,
                       GASTOS_PESSOAL_ANO_N_JUNHO_MAX_MIN ,
                       GASTOS_PESSOAL_ANO_N_JULHO_MAX_MIN ,
                       GASTOS_PESSOAL_ANO_N_AGOSTO_MAX_MIN ,
                       GASTOS_PESSOAL_ANO_N_SETEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_ANO_N_OUTUBRO_MAX_MIN ,
                       GASTOS_PESSOAL_ANO_N_NOVEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_ANO_N_DEZEMBRO_MAX_MIN ,



                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_DEZEMBRO"]))),

                            );
    var GASTOS_PESSOAL_Mensal_Eixo_min_secon= Math.min(
                       GASTOS_PESSOAL_ANO_N_JANEIRO_MAX_MIN ,
                       GASTOS_PESSOAL_ANO_N_FEVEREIRO_MAX_MIN ,
                       GASTOS_PESSOAL_ANO_N_MARCO_MAX_MIN ,
                       GASTOS_PESSOAL_ANO_N_ABRIL_MAX_MIN ,
                       GASTOS_PESSOAL_ANO_N_MAIO_MAX_MIN ,
                       GASTOS_PESSOAL_ANO_N_JUNHO_MAX_MIN ,
                       GASTOS_PESSOAL_ANO_N_JULHO_MAX_MIN ,
                       GASTOS_PESSOAL_ANO_N_AGOSTO_MAX_MIN ,
                       GASTOS_PESSOAL_ANO_N_SETEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_ANO_N_OUTUBRO_MAX_MIN ,
                       GASTOS_PESSOAL_ANO_N_NOVEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_ANO_N_DEZEMBRO_MAX_MIN ,


                           @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_DEZEMBRO"]))),

                          );

    //NOTA TA: Aqui trato o minimo e o maximo do eixo principal
    if(Math.abs(GASTOS_PESSOAL_Mensal_Eixo_max_princ)>=Math.abs(GASTOS_PESSOAL_Mensal_Eixo_min_princ))
    {
        var GASTOS_PESSOAL_Mensal_Eixo_max_princ_=(Math.ceil(GASTOS_PESSOAL_Mensal_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_Mensal_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_Mensal_Eixo_max_princ),0).toString().length-1);
        var GASTOS_PESSOAL_Mensal_Eixo_min_princ_= (Math.floor(GASTOS_PESSOAL_Mensal_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_Mensal_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_Mensal_Eixo_max_princ),0).toString().length-1);
        //alert(GASTOS_PESSOAL_Mensal_Eixo_max_princ_);
        //alert(GASTOS_PESSOAL_Mensal_Eixo_min_princ_);
    }
    else
    {
        var GASTOS_PESSOAL_Mensal_Eixo_max_princ_=(Math.ceil(GASTOS_PESSOAL_Mensal_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_Mensal_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_Mensal_Eixo_min_princ),0).toString().length-1);
        var GASTOS_PESSOAL_Mensal_Eixo_min_princ_= (Math.floor(GASTOS_PESSOAL_Mensal_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_Mensal_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_Mensal_Eixo_min_princ),0).toString().length-1);}

    //NOTA TA: Aqui trato o minimo e o maximo do eixo secundario

    if(Math.abs(GASTOS_PESSOAL_Mensal_Eixo_max_secon)>=Math.abs(GASTOS_PESSOAL_Mensal_Eixo_min_secon))
    {
        var GASTOS_PESSOAL_Mensal_Eixo_max_secon_=(Math.ceil(GASTOS_PESSOAL_Mensal_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_Mensal_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_Mensal_Eixo_max_secon),0).toString().length-1);
        var GASTOS_PESSOAL_Mensal_Eixo_min_secon_= (Math.floor(GASTOS_PESSOAL_Mensal_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_Mensal_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_Mensal_Eixo_max_secon),0).toString().length-1);
        //alert(GASTOS_PESSOAL_Mensal_Eixo_max_secon_);
        //alert(GASTOS_PESSOAL_Mensal_Eixo_min_secon_);
    }
    else
    {
        var GASTOS_PESSOAL_Mensal_Eixo_max_secon_=(Math.ceil(GASTOS_PESSOAL_Mensal_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_Mensal_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_Mensal_Eixo_min_secon),0).toString().length-1);
        var GASTOS_PESSOAL_Mensal_Eixo_min_secon_= (Math.floor(GASTOS_PESSOAL_Mensal_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_Mensal_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_Mensal_Eixo_min_secon),0).toString().length-1);}


    if(Math.abs(GASTOS_PESSOAL_Mensal_Eixo_min_princ)/Math.abs(GASTOS_PESSOAL_Mensal_Eixo_max_princ)>=Math.abs(GASTOS_PESSOAL_Mensal_Eixo_min_secon)/Math.abs(GASTOS_PESSOAL_Mensal_Eixo_max_secon))
    { if(GASTOS_PESSOAL_Mensal_Eixo_max_princ > 0 && GASTOS_PESSOAL_Mensal_Eixo_min_princ <0 ){ var GASTOS_PESSOAL_Mensal_Eixo_min_secon__=(GASTOS_PESSOAL_Mensal_Eixo_min_princ_*GASTOS_PESSOAL_Mensal_Eixo_max_secon_)/GASTOS_PESSOAL_Mensal_Eixo_max_princ_;} else { var GASTOS_PESSOAL_Mensal_Eixo_min_secon__=GASTOS_PESSOAL_Mensal_Eixo_min_secon_;}
        if(GASTOS_PESSOAL_Mensal_Eixo_max_secon > 0 && GASTOS_PESSOAL_Mensal_Eixo_min_secon <0 ){ var GASTOS_PESSOAL_Mensal_Eixo_min_princ__=(GASTOS_PESSOAL_Mensal_Eixo_min_secon__*GASTOS_PESSOAL_Mensal_Eixo_max_princ_)/GASTOS_PESSOAL_Mensal_Eixo_max_secon_;} else { var GASTOS_PESSOAL_Mensal_Eixo_min_princ__=GASTOS_PESSOAL_Mensal_Eixo_min_princ_;}}
    else
    {if(GASTOS_PESSOAL_Mensal_Eixo_max_secon > 0 && GASTOS_PESSOAL_Mensal_Eixo_min_secon <0 ){ var GASTOS_PESSOAL_Mensal_Eixo_min_princ__=(GASTOS_PESSOAL_Mensal_Eixo_min_secon_*GASTOS_PESSOAL_Mensal_Eixo_max_princ_)/GASTOS_PESSOAL_Mensal_Eixo_max_secon_;} else { var GASTOS_PESSOAL_Mensal_Eixo_min_princ__=GASTOS_PESSOAL_Mensal_Eixo_min_princ_;}
        if(GASTOS_PESSOAL_Mensal_Eixo_max_princ > 0 && GASTOS_PESSOAL_Mensal_Eixo_min_princ <0 ){ var GASTOS_PESSOAL_Mensal_Eixo_min_secon__=(GASTOS_PESSOAL_Mensal_Eixo_min_princ__*GASTOS_PESSOAL_Mensal_Eixo_max_secon_)/GASTOS_PESSOAL_Mensal_Eixo_max_princ_;} else { var GASTOS_PESSOAL_Mensal_Eixo_min_secon__=GASTOS_PESSOAL_Mensal_Eixo_min_secon_;}
    }



    if(Math.abs(GASTOS_PESSOAL_Mensal_Eixo_max_princ)/Math.abs(GASTOS_PESSOAL_Mensal_Eixo_min_princ)>=Math.abs(GASTOS_PESSOAL_Mensal_Eixo_max_secon)/Math.abs(GASTOS_PESSOAL_Mensal_Eixo_min_secon))
    { if(GASTOS_PESSOAL_Mensal_Eixo_min_princ > 0 && GASTOS_PESSOAL_Mensal_Eixo_max_princ <0 ){ var GASTOS_PESSOAL_Mensal_Eixo_max_secon__=(GASTOS_PESSOAL_Mensal_Eixo_max_princ_*GASTOS_PESSOAL_Mensal_Eixo_min_secon_)/GASTOS_PESSOAL_Mensal_Eixo_min_princ_;} else { var GASTOS_PESSOAL_Mensal_Eixo_max_secon__=GASTOS_PESSOAL_Mensal_Eixo_max_secon_;}
        if(GASTOS_PESSOAL_Mensal_Eixo_min_secon > 0 && GASTOS_PESSOAL_Mensal_Eixo_max_secon <0 ){ var GASTOS_PESSOAL_Mensal_Eixo_max_princ__=(GASTOS_PESSOAL_Mensal_Eixo_max_secon__*GASTOS_PESSOAL_Mensal_Eixo_min_princ_)/GASTOS_PESSOAL_Mensal_Eixo_min_secon_;} else { var GASTOS_PESSOAL_Mensal_Eixo_max_princ__=GASTOS_PESSOAL_Mensal_Eixo_max_princ_;}}
    else
    {if(GASTOS_PESSOAL_Mensal_Eixo_min_secon > 0 && GASTOS_PESSOAL_Mensal_Eixo_max_secon <0 ){ var GASTOS_PESSOAL_Mensal_Eixo_max_princ__=(GASTOS_PESSOAL_Mensal_Eixo_max_secon_*GASTOS_PESSOAL_Mensal_Eixo_min_princ_)/GASTOS_PESSOAL_Mensal_Eixo_min_secon_;} else { var GASTOS_PESSOAL_Mensal_Eixo_max_princ__=GASTOS_PESSOAL_Mensal_Eixo_max_princ_;}
        if(GASTOS_PESSOAL_Mensal_Eixo_min_princ > 0 && GASTOS_PESSOAL_Mensal_Eixo_max_princ <0 ){ var GASTOS_PESSOAL_Mensal_Eixo_max_secon__=(GASTOS_PESSOAL_Mensal_Eixo_max_princ__*GASTOS_PESSOAL_Mensal_Eixo_min_secon_)/GASTOS_PESSOAL_Mensal_Eixo_min_princ_;} else { var GASTOS_PESSOAL_Mensal_Eixo_max_secon__=GASTOS_PESSOAL_Mensal_Eixo_max_secon_;}
    }


    var GRAFICO_GASTOS_PESSOAL_MENSAL_1=document.getElementById('GRAFICO_GASTOS_PESSOAL_MENSAL_1').getContext('2d');

    var GRAFICO_GASTOS_PESSOAL_MENSAL_1=new Chart(GRAFICO_GASTOS_PESSOAL_MENSAL_1, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'Peso PessoalvsVN(ac) ' + ANO_VERSAO_REAL_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(135,31,120)',
                   data: [
                   PESO_GASTOS_PESSOAL_VN_ANO_N_JANEIRO_ACUM,
                   PESO_GASTOS_PESSOAL_VN_ANO_N_FEVEREIRO_ACUM,
                   PESO_GASTOS_PESSOAL_VN_ANO_N_MARCO_ACUM,
                   PESO_GASTOS_PESSOAL_VN_ANO_N_ABRIL_ACUM,
                   PESO_GASTOS_PESSOAL_VN_ANO_N_MAIO_ACUM,
                   PESO_GASTOS_PESSOAL_VN_ANO_N_JUNHO_ACUM,
                   PESO_GASTOS_PESSOAL_VN_ANO_N_JULHO_ACUM,
                   PESO_GASTOS_PESSOAL_VN_ANO_N_AGOSTO_ACUM,
                   PESO_GASTOS_PESSOAL_VN_ANO_N_SETEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_VN_ANO_N_OUTUBRO_ACUM,
                   PESO_GASTOS_PESSOAL_VN_ANO_N_NOVEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_VN_ANO_N_DEZEMBRO_ACUM,
                   ],
                   type: 'line'


               },
                {
                    label:  'Pessoal(m) ' + ANO_VERSAO_REAL_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(135,31,120,0.7)',
                    borderColor: 'rgb(135,31,120,0.7)',
                    data: [
                  GASTOS_PESSOAL_ANO_N_JANEIRO ,
                  GASTOS_PESSOAL_ANO_N_FEVEREIRO ,
                  GASTOS_PESSOAL_ANO_N_MARCO ,
                  GASTOS_PESSOAL_ANO_N_ABRIL,
                  GASTOS_PESSOAL_ANO_N_MAIO ,
                  GASTOS_PESSOAL_ANO_N_JUNHO ,
                  GASTOS_PESSOAL_ANO_N_JULHO ,
                  GASTOS_PESSOAL_ANO_N_AGOSTO ,
                  GASTOS_PESSOAL_ANO_N_SETEMBRO ,
                  GASTOS_PESSOAL_ANO_N_OUTUBRO ,
                  GASTOS_PESSOAL_ANO_N_NOVEMBRO ,
                  GASTOS_PESSOAL_ANO_N_DEZEMBRO ,                   ],
                },


            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'Pessoal MENSAL_1',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                min:  Math.round(GASTOS_PESSOAL_Mensal_Eixo_min_princ__,0),
                                                max:  Math.round(GASTOS_PESSOAL_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString()+ "%";
                                                }
                                            }
                                        },

                    { id: 'B',
                        type: 'linear',
                        position: 'right',
                        ticks: {
                            min: Math.round(GASTOS_PESSOAL_Mensal_Eixo_min_secon__,0),
                            max:  Math.round(GASTOS_PESSOAL_Mensal_Eixo_max_secon__,0),
                            beginAtZero: false,
                            callback: function(value, index, values) {
                                return value.toLocaleString();
                            }
                        }
                    },






                ]
            }
        },

    });

</script>

@*------------------------------------------------GRAFICO_GASTOS_PESSOAL_MENSAL_2-----------------------------------------------------------*@
<script>

    var GRAFICO_GASTOS_PESSOAL_MENSAL_2=document.getElementById('GRAFICO_GASTOS_PESSOAL_MENSAL_2').getContext('2d');

    var GRAFICO_GASTOS_PESSOAL_MENSAL_2=new Chart(GRAFICO_GASTOS_PESSOAL_MENSAL_2, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'Peso PessoalvsVN(ac) ' + ANO_VERSAO_ANTE_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(135, 191 , 97)',
                   data: [
                   GASTOS_PESSOAL_ANO_N_1_JANEIRO_ACUM/IND_VN_ANO_N_1_JANEIRO_ACUM*100,
                   GASTOS_PESSOAL_ANO_N_1_FEVEREIRO_ACUM/IND_VN_ANO_N_1_FEVEREIRO_ACUM*100,
                   GASTOS_PESSOAL_ANO_N_1_MARCO_ACUM/IND_VN_ANO_N_1_MARCO_ACUM*100,
                   GASTOS_PESSOAL_ANO_N_1_ABRIL_ACUM/IND_VN_ANO_N_1_ABRIL_ACUM*100,
                   GASTOS_PESSOAL_ANO_N_1_MAIO_ACUM/IND_VN_ANO_N_1_MAIO_ACUM*100,
                   GASTOS_PESSOAL_ANO_N_1_JUNHO_ACUM/IND_VN_ANO_N_1_JUNHO_ACUM*100,
                   GASTOS_PESSOAL_ANO_N_1_JULHO_ACUM/IND_VN_ANO_N_1_JULHO_ACUM*100,
                   GASTOS_PESSOAL_ANO_N_1_AGOSTO_ACUM/IND_VN_ANO_N_1_AGOSTO_ACUM*100,
                   GASTOS_PESSOAL_ANO_N_1_SETEMBRO_ACUM/IND_VN_ANO_N_1_SETEMBRO_ACUM*100,
                   GASTOS_PESSOAL_ANO_N_1_OUTUBRO_ACUM/IND_VN_ANO_N_1_OUTUBRO_ACUM*100,
                   GASTOS_PESSOAL_ANO_N_1_NOVEMBRO_ACUM/IND_VN_ANO_N_1_NOVEMBRO_ACUM*100,
                   GASTOS_PESSOAL_ANO_N_1_DEZEMBRO_ACUM/IND_VN_ANO_N_1_DEZEMBRO_ACUM*100,

                   ],
                   type: 'line'


               },
                {
                    label:  'Pessoal(m) ' + ANO_VERSAO_ANTE_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(135, 191 , 97,0.7)',
                    borderColor: 'rgba(135, 191 , 97,0.7)',
                    data: [
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_JANEIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_FEVEREIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_MARCO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_ABRIL"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_MAIO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_JUNHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_JULHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_AGOSTO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_SETEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_OUTUBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_NOVEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ANO_N_1_DEZEMBRO"]))),
                    ],
                },


            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'Pessoal MENSAL_1',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                min:  Math.round(GASTOS_PESSOAL_Mensal_Eixo_min_princ__,0),
                                                max:  Math.round(GASTOS_PESSOAL_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString()+ "%";
                                                }
                                            }
                                        },

                    { id: 'B',
                        type: 'linear',
                        position: 'right',
                        ticks: {
                            min: Math.round(GASTOS_PESSOAL_Mensal_Eixo_min_secon__,0),
                            max:  Math.round(GASTOS_PESSOAL_Mensal_Eixo_max_secon__,0),
                            beginAtZero: false,
                            callback: function(value, index, values) {
                                return value.toLocaleString();
                            }
                        }
                    },






                ]
            }
        },

    });

</script>


@*------------------------------------------------GRAFICO_GASTOS_PESSOAL_ACUMULADO_COMP-----------------------------------------------------------*@
<script>

    if(@ViewData["MES_ACUM_REAL"]<1){ var VAR_VN_ANO_N_JANEIRO_ACUM = 'nd'; var VAR_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JANEIRO_ACUM= IND_VN_ANO_N_JANEIRO_ACUM/IND_VN_ANO_N_1_JANEIRO_ACUM*100-100; var VAR_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = VAR_VN_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var VAR_VN_ANO_N_FEVEREIRO_ACUM = 'nd'; var VAR_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_FEVEREIRO_ACUM= IND_VN_ANO_N_FEVEREIRO_ACUM/IND_VN_ANO_N_1_FEVEREIRO_ACUM*100-100; var VAR_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = VAR_VN_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var VAR_VN_ANO_N_MARCO_ACUM = 'nd'; var VAR_VN_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_MARCO_ACUM= IND_VN_ANO_N_MARCO_ACUM/IND_VN_ANO_N_1_MARCO_ACUM*100-100; var VAR_VN_ANO_N_MARCO_ACUM_MAX_MIN = VAR_VN_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var VAR_VN_ANO_N_ABRIL_ACUM = 'nd'; var VAR_VN_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_ABRIL_ACUM= IND_VN_ANO_N_ABRIL_ACUM/IND_VN_ANO_N_1_ABRIL_ACUM*100-100; var VAR_VN_ANO_N_ABRIL_ACUM_MAX_MIN = VAR_VN_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var VAR_VN_ANO_N_MAIO_ACUM = 'nd'; var VAR_VN_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_MAIO_ACUM= IND_VN_ANO_N_MAIO_ACUM/IND_VN_ANO_N_1_MAIO_ACUM*100-100; var VAR_VN_ANO_N_MAIO_ACUM_MAX_MIN = VAR_VN_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var VAR_VN_ANO_N_JUNHO_ACUM = 'nd'; var VAR_VN_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JUNHO_ACUM= IND_VN_ANO_N_JUNHO_ACUM/IND_VN_ANO_N_1_JUNHO_ACUM*100-100; var VAR_VN_ANO_N_JUNHO_ACUM_MAX_MIN = VAR_VN_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var VAR_VN_ANO_N_JULHO_ACUM = 'nd'; var VAR_VN_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JULHO_ACUM= IND_VN_ANO_N_JULHO_ACUM/IND_VN_ANO_N_1_JULHO_ACUM*100-100; var VAR_VN_ANO_N_JULHO_ACUM_MAX_MIN = VAR_VN_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var VAR_VN_ANO_N_AGOSTO_ACUM = 'nd'; var VAR_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_AGOSTO_ACUM= IND_VN_ANO_N_AGOSTO_ACUM/IND_VN_ANO_N_1_AGOSTO_ACUM*100-100; var VAR_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = VAR_VN_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var VAR_VN_ANO_N_SETEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_SETEMBRO_ACUM= IND_VN_ANO_N_SETEMBRO_ACUM/IND_VN_ANO_N_1_SETEMBRO_ACUM*100-100; var VAR_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var VAR_VN_ANO_N_OUTUBRO_ACUM = 'nd'; var VAR_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_OUTUBRO_ACUM= IND_VN_ANO_N_OUTUBRO_ACUM/IND_VN_ANO_N_1_OUTUBRO_ACUM*100-100; var VAR_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var VAR_VN_ANO_N_NOVEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_NOVEMBRO_ACUM= IND_VN_ANO_N_NOVEMBRO_ACUM/IND_VN_ANO_N_1_NOVEMBRO_ACUM*100-100; var VAR_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var VAR_VN_ANO_N_DEZEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_DEZEMBRO_ACUM= IND_VN_ANO_N_DEZEMBRO_ACUM/IND_VN_ANO_N_1_DEZEMBRO_ACUM*100-100; var VAR_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_DEZEMBRO_ACUM };



    if(@ViewData["MES_ACUM_REAL"]<1){ var VAR_GASTOS_PESSOAL_ANO_N_JANEIRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_ANO_N_JANEIRO_ACUM= GASTOS_PESSOAL_ANO_N_JANEIRO_ACUM/GASTOS_PESSOAL_ANO_N_1_JANEIRO_ACUM*100-100; var VAR_GASTOS_PESSOAL_ANO_N_JANEIRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var VAR_GASTOS_PESSOAL_ANO_N_FEVEREIRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_ANO_N_FEVEREIRO_ACUM= GASTOS_PESSOAL_ANO_N_FEVEREIRO_ACUM/GASTOS_PESSOAL_ANO_N_1_FEVEREIRO_ACUM*100-100; var VAR_GASTOS_PESSOAL_ANO_N_FEVEREIRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var VAR_GASTOS_PESSOAL_ANO_N_MARCO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_ANO_N_MARCO_ACUM= GASTOS_PESSOAL_ANO_N_MARCO_ACUM/GASTOS_PESSOAL_ANO_N_1_MARCO_ACUM*100-100; var VAR_GASTOS_PESSOAL_ANO_N_MARCO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var VAR_GASTOS_PESSOAL_ANO_N_ABRIL_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_ANO_N_ABRIL_ACUM= GASTOS_PESSOAL_ANO_N_ABRIL_ACUM/GASTOS_PESSOAL_ANO_N_1_ABRIL_ACUM*100-100; var VAR_GASTOS_PESSOAL_ANO_N_ABRIL_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var VAR_GASTOS_PESSOAL_ANO_N_MAIO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_ANO_N_MAIO_ACUM= GASTOS_PESSOAL_ANO_N_MAIO_ACUM/GASTOS_PESSOAL_ANO_N_1_MAIO_ACUM*100-100; var VAR_GASTOS_PESSOAL_ANO_N_MAIO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var VAR_GASTOS_PESSOAL_ANO_N_JUNHO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_ANO_N_JUNHO_ACUM= GASTOS_PESSOAL_ANO_N_JUNHO_ACUM/GASTOS_PESSOAL_ANO_N_1_JUNHO_ACUM*100-100; var VAR_GASTOS_PESSOAL_ANO_N_JUNHO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var VAR_GASTOS_PESSOAL_ANO_N_JULHO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_ANO_N_JULHO_ACUM= GASTOS_PESSOAL_ANO_N_JULHO_ACUM/GASTOS_PESSOAL_ANO_N_1_JULHO_ACUM*100-100; var VAR_GASTOS_PESSOAL_ANO_N_JULHO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var VAR_GASTOS_PESSOAL_ANO_N_AGOSTO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_ANO_N_AGOSTO_ACUM= GASTOS_PESSOAL_ANO_N_AGOSTO_ACUM/GASTOS_PESSOAL_ANO_N_1_AGOSTO_ACUM*100-100; var VAR_GASTOS_PESSOAL_ANO_N_AGOSTO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var VAR_GASTOS_PESSOAL_ANO_N_SETEMBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_ANO_N_SETEMBRO_ACUM= GASTOS_PESSOAL_ANO_N_SETEMBRO_ACUM/GASTOS_PESSOAL_ANO_N_1_SETEMBRO_ACUM*100-100; var VAR_GASTOS_PESSOAL_ANO_N_SETEMBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var VAR_GASTOS_PESSOAL_ANO_N_OUTUBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_ANO_N_OUTUBRO_ACUM= GASTOS_PESSOAL_ANO_N_OUTUBRO_ACUM/GASTOS_PESSOAL_ANO_N_1_OUTUBRO_ACUM*100-100; var VAR_GASTOS_PESSOAL_ANO_N_OUTUBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var VAR_GASTOS_PESSOAL_ANO_N_NOVEMBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_ANO_N_NOVEMBRO_ACUM= GASTOS_PESSOAL_ANO_N_NOVEMBRO_ACUM/GASTOS_PESSOAL_ANO_N_1_NOVEMBRO_ACUM*100-100; var VAR_GASTOS_PESSOAL_ANO_N_NOVEMBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var VAR_GASTOS_PESSOAL_ANO_N_DEZEMBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_ANO_N_DEZEMBRO_ACUM= GASTOS_PESSOAL_ANO_N_DEZEMBRO_ACUM/GASTOS_PESSOAL_ANO_N_1_DEZEMBRO_ACUM*100-100; var VAR_GASTOS_PESSOAL_ANO_N_DEZEMBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_ANO_N_DEZEMBRO_ACUM };



    var GRAFICO_GASTOS_PESSOAL_ACUMULADO_COMP=document.getElementById('GRAFICO_GASTOS_PESSOAL_ACUMULADO_COMP').getContext('2d');

    var GRAFICO_GASTOS_PESSOAL_ACUMULADO_COMP=new Chart(GRAFICO_GASTOS_PESSOAL_ACUMULADO_COMP, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'Var Pessoal(ac)' + ANO_VERSAO_REAL_ + 'vs' + ANO_VERSAO_ANTE_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(135,31,120)',
                   data: [
                   VAR_GASTOS_PESSOAL_ANO_N_JANEIRO_ACUM,
                   VAR_GASTOS_PESSOAL_ANO_N_FEVEREIRO_ACUM,
                   VAR_GASTOS_PESSOAL_ANO_N_MARCO_ACUM,
                   VAR_GASTOS_PESSOAL_ANO_N_ABRIL_ACUM,
                   VAR_GASTOS_PESSOAL_ANO_N_MAIO_ACUM,
                   VAR_GASTOS_PESSOAL_ANO_N_JUNHO_ACUM,
                   VAR_GASTOS_PESSOAL_ANO_N_JULHO_ACUM,
                   VAR_GASTOS_PESSOAL_ANO_N_AGOSTO_ACUM,
                   VAR_GASTOS_PESSOAL_ANO_N_SETEMBRO_ACUM,
                   VAR_GASTOS_PESSOAL_ANO_N_OUTUBRO_ACUM,
                   VAR_GASTOS_PESSOAL_ANO_N_NOVEMBRO_ACUM,
                   VAR_GASTOS_PESSOAL_ANO_N_DEZEMBRO_ACUM,

                   ],
                   type: 'line'


               },
                {
                    label: 'Var VN(ac)' + ANO_VERSAO_REAL_ + 'vs' + ANO_VERSAO_ANTE_,
                    yAxisID: 'A',
                    //backgroundColor: 'rgb(17, 121, 240)',
                    borderColor: 'rgb(77 , 121 , 199)',
                    data: [
                          VAR_VN_ANO_N_JANEIRO_ACUM,
                          VAR_VN_ANO_N_FEVEREIRO_ACUM,
                          VAR_VN_ANO_N_MARCO_ACUM,
                          VAR_VN_ANO_N_ABRIL_ACUM,
                          VAR_VN_ANO_N_MAIO_ACUM,
                          VAR_VN_ANO_N_JUNHO_ACUM,
                          VAR_VN_ANO_N_JULHO_ACUM,
                          VAR_VN_ANO_N_AGOSTO_ACUM,
                          VAR_VN_ANO_N_SETEMBRO_ACUM,
                          VAR_VN_ANO_N_OUTUBRO_ACUM,
                          VAR_VN_ANO_N_NOVEMBRO_ACUM,
                          VAR_VN_ANO_N_DEZEMBRO_ACUM,
                    ],
                    type: 'line'
                },


            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'Pessoal COMP',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                //min:  Math.round(GASTOS_PESSOAL_Mensal_Eixo_min_princ__,0),
                                                //max:  Math.round(GASTOS_PESSOAL_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: true,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString()+ "%";
                                                }
                                            }
                                        },

                    //{ id: 'B',
                    //type: 'linear',
                    //position: 'right',
                    //ticks: {
                    //    //min:  Math.round(GASTOS_PESSOAL_Mensal_Eixo_min_princ__,0),
                    //    //max:  Math.round(GASTOS_PESSOAL_Mensal_Eixo_max_princ__,0),
                    //    beginAtZero: true,
                    //    callback: function(value, index, values) {
                    //        return value.toLocaleString();
                    //        }
                    //    }
                    //},






                ]
            }
        },

    });

</script>

@*------------------------------------------------GRAFICO_CMVMC_MENSAL_1-----------------------------------------------------------*@
<script>

    if(@ViewData["MES_ACUM_REAL"]<1){ var IND_VN_ANO_N_JANEIRO = 'nd'; var IND_VN_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JANEIRO"]))); var IND_VN_ANO_N_JANEIRO_MAX_MIN = IND_VN_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var IND_VN_ANO_N_FEVEREIRO = 'nd'; var IND_VN_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_FEVEREIRO"]))); var IND_VN_ANO_N_FEVEREIRO_MAX_MIN = IND_VN_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var IND_VN_ANO_N_MARCO = 'nd'; var IND_VN_ANO_N_MARCO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_MARCO"]))); var IND_VN_ANO_N_MARCO_MAX_MIN = IND_VN_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var IND_VN_ANO_N_ABRIL = 'nd'; var IND_VN_ANO_N_ABRIL_MAX_MIN = 0;  } else { var IND_VN_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_ABRIL"]))); var IND_VN_ANO_N_ABRIL_MAX_MIN = IND_VN_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var IND_VN_ANO_N_MAIO = 'nd'; var IND_VN_ANO_N_MAIO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_MAIO"]))); var IND_VN_ANO_N_MAIO_MAX_MIN = IND_VN_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var IND_VN_ANO_N_JUNHO = 'nd'; var IND_VN_ANO_N_JUNHO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JUNHO"]))); var IND_VN_ANO_N_JUNHO_MAX_MIN = IND_VN_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var IND_VN_ANO_N_JULHO = 'nd'; var IND_VN_ANO_N_JULHO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JULHO"]))); var IND_VN_ANO_N_JULHO_MAX_MIN = IND_VN_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var IND_VN_ANO_N_AGOSTO = 'nd'; var IND_VN_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_AGOSTO"]))); var IND_VN_ANO_N_AGOSTO_MAX_MIN = IND_VN_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var IND_VN_ANO_N_SETEMBRO = 'nd'; var IND_VN_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_SETEMBRO"]))); var IND_VN_ANO_N_SETEMBRO_MAX_MIN = IND_VN_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var IND_VN_ANO_N_OUTUBRO = 'nd'; var IND_VN_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_OUTUBRO"]))); var IND_VN_ANO_N_OUTUBRO_MAX_MIN = IND_VN_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var IND_VN_ANO_N_NOVEMBRO = 'nd'; var IND_VN_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_NOVEMBRO"]))); var IND_VN_ANO_N_NOVEMBRO_MAX_MIN = IND_VN_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var IND_VN_ANO_N_DEZEMBRO = 'nd'; var IND_VN_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_DEZEMBRO"]))); var IND_VN_ANO_N_DEZEMBRO_MAX_MIN = IND_VN_ANO_N_DEZEMBRO };

    if(@ViewData["MES_ACUM_REAL"]<1){ var CMVMC_ANO_N_JANEIRO = 'nd'; var CMVMC_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var CMVMC_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_JANEIRO"]))); var CMVMC_ANO_N_JANEIRO_MAX_MIN = CMVMC_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var CMVMC_ANO_N_FEVEREIRO = 'nd'; var CMVMC_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var CMVMC_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_FEVEREIRO"]))); var CMVMC_ANO_N_FEVEREIRO_MAX_MIN = CMVMC_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var CMVMC_ANO_N_MARCO = 'nd'; var CMVMC_ANO_N_MARCO_MAX_MIN = 0;  } else { var CMVMC_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_MARCO"]))); var CMVMC_ANO_N_MARCO_MAX_MIN = CMVMC_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var CMVMC_ANO_N_ABRIL = 'nd'; var CMVMC_ANO_N_ABRIL_MAX_MIN = 0;  } else { var CMVMC_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_ABRIL"]))); var CMVMC_ANO_N_ABRIL_MAX_MIN = CMVMC_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var CMVMC_ANO_N_MAIO = 'nd'; var CMVMC_ANO_N_MAIO_MAX_MIN = 0;  } else { var CMVMC_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_MAIO"]))); var CMVMC_ANO_N_MAIO_MAX_MIN = CMVMC_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var CMVMC_ANO_N_JUNHO = 'nd'; var CMVMC_ANO_N_JUNHO_MAX_MIN = 0;  } else { var CMVMC_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_JUNHO"]))); var CMVMC_ANO_N_JUNHO_MAX_MIN = CMVMC_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var CMVMC_ANO_N_JULHO = 'nd'; var CMVMC_ANO_N_JULHO_MAX_MIN = 0;  } else { var CMVMC_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_JULHO"]))); var CMVMC_ANO_N_JULHO_MAX_MIN = CMVMC_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var CMVMC_ANO_N_AGOSTO = 'nd'; var CMVMC_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var CMVMC_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_AGOSTO"]))); var CMVMC_ANO_N_AGOSTO_MAX_MIN = CMVMC_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var CMVMC_ANO_N_SETEMBRO = 'nd'; var CMVMC_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var CMVMC_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_SETEMBRO"]))); var CMVMC_ANO_N_SETEMBRO_MAX_MIN = CMVMC_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var CMVMC_ANO_N_OUTUBRO = 'nd'; var CMVMC_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var CMVMC_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_OUTUBRO"]))); var CMVMC_ANO_N_OUTUBRO_MAX_MIN = CMVMC_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var CMVMC_ANO_N_NOVEMBRO = 'nd'; var CMVMC_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var CMVMC_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_NOVEMBRO"]))); var CMVMC_ANO_N_NOVEMBRO_MAX_MIN = CMVMC_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var CMVMC_ANO_N_DEZEMBRO = 'nd'; var CMVMC_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var CMVMC_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_DEZEMBRO"]))); var CMVMC_ANO_N_DEZEMBRO_MAX_MIN = CMVMC_ANO_N_DEZEMBRO };

    var IND_VN_ANO_N_JANEIRO_ACUM = IND_VN_ANO_N_JANEIRO;
    var IND_VN_ANO_N_FEVEREIRO_ACUM = IND_VN_ANO_N_FEVEREIRO + IND_VN_ANO_N_JANEIRO_ACUM;
    var IND_VN_ANO_N_MARCO_ACUM = IND_VN_ANO_N_MARCO + IND_VN_ANO_N_FEVEREIRO_ACUM;
    var IND_VN_ANO_N_ABRIL_ACUM = IND_VN_ANO_N_ABRIL + IND_VN_ANO_N_MARCO_ACUM;
    var IND_VN_ANO_N_MAIO_ACUM = IND_VN_ANO_N_MAIO + IND_VN_ANO_N_ABRIL_ACUM;
    var IND_VN_ANO_N_JUNHO_ACUM = IND_VN_ANO_N_JUNHO + IND_VN_ANO_N_MAIO_ACUM;
    var IND_VN_ANO_N_JULHO_ACUM = IND_VN_ANO_N_JULHO + IND_VN_ANO_N_JUNHO_ACUM;
    var IND_VN_ANO_N_AGOSTO_ACUM = IND_VN_ANO_N_AGOSTO + IND_VN_ANO_N_JULHO_ACUM;
    var IND_VN_ANO_N_SETEMBRO_ACUM = IND_VN_ANO_N_SETEMBRO + IND_VN_ANO_N_AGOSTO_ACUM;
    var IND_VN_ANO_N_OUTUBRO_ACUM = IND_VN_ANO_N_OUTUBRO + IND_VN_ANO_N_SETEMBRO_ACUM;
    var IND_VN_ANO_N_NOVEMBRO_ACUM = IND_VN_ANO_N_NOVEMBRO + IND_VN_ANO_N_OUTUBRO_ACUM;
    var IND_VN_ANO_N_DEZEMBRO_ACUM = IND_VN_ANO_N_DEZEMBRO + IND_VN_ANO_N_NOVEMBRO_ACUM;

    var CMVMC_ANO_N_JANEIRO_ACUM = CMVMC_ANO_N_JANEIRO;
    var CMVMC_ANO_N_FEVEREIRO_ACUM = CMVMC_ANO_N_FEVEREIRO + CMVMC_ANO_N_JANEIRO_ACUM;
    var CMVMC_ANO_N_MARCO_ACUM = CMVMC_ANO_N_MARCO + CMVMC_ANO_N_FEVEREIRO_ACUM;
    var CMVMC_ANO_N_ABRIL_ACUM = CMVMC_ANO_N_ABRIL + CMVMC_ANO_N_MARCO_ACUM;
    var CMVMC_ANO_N_MAIO_ACUM = CMVMC_ANO_N_MAIO + CMVMC_ANO_N_ABRIL_ACUM;
    var CMVMC_ANO_N_JUNHO_ACUM = CMVMC_ANO_N_JUNHO + CMVMC_ANO_N_MAIO_ACUM;
    var CMVMC_ANO_N_JULHO_ACUM = CMVMC_ANO_N_JULHO + CMVMC_ANO_N_JUNHO_ACUM;
    var CMVMC_ANO_N_AGOSTO_ACUM = CMVMC_ANO_N_AGOSTO + CMVMC_ANO_N_JULHO_ACUM;
    var CMVMC_ANO_N_SETEMBRO_ACUM = CMVMC_ANO_N_SETEMBRO + CMVMC_ANO_N_AGOSTO_ACUM;
    var CMVMC_ANO_N_OUTUBRO_ACUM = CMVMC_ANO_N_OUTUBRO + CMVMC_ANO_N_SETEMBRO_ACUM;
    var CMVMC_ANO_N_NOVEMBRO_ACUM = CMVMC_ANO_N_NOVEMBRO + CMVMC_ANO_N_OUTUBRO_ACUM;
    var CMVMC_ANO_N_DEZEMBRO_ACUM = CMVMC_ANO_N_DEZEMBRO + CMVMC_ANO_N_NOVEMBRO_ACUM;



    if(@ViewData["MES_ACUM_REAL"]<1){ var PESO_CMVMC_VN_ANO_N_JANEIRO_ACUM = 'nd'; var PESO_CMVMC_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var PESO_CMVMC_VN_ANO_N_JANEIRO_ACUM= CMVMC_ANO_N_JANEIRO_ACUM/IND_VN_ANO_N_JANEIRO_ACUM*100; var PESO_CMVMC_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = PESO_CMVMC_VN_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var PESO_CMVMC_VN_ANO_N_FEVEREIRO_ACUM = 'nd'; var PESO_CMVMC_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var PESO_CMVMC_VN_ANO_N_FEVEREIRO_ACUM= CMVMC_ANO_N_FEVEREIRO_ACUM/IND_VN_ANO_N_FEVEREIRO_ACUM*100; var PESO_CMVMC_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = PESO_CMVMC_VN_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var PESO_CMVMC_VN_ANO_N_MARCO_ACUM = 'nd'; var PESO_CMVMC_VN_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var PESO_CMVMC_VN_ANO_N_MARCO_ACUM= CMVMC_ANO_N_MARCO_ACUM/IND_VN_ANO_N_MARCO_ACUM*100; var PESO_CMVMC_VN_ANO_N_MARCO_ACUM_MAX_MIN = PESO_CMVMC_VN_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var PESO_CMVMC_VN_ANO_N_ABRIL_ACUM = 'nd'; var PESO_CMVMC_VN_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var PESO_CMVMC_VN_ANO_N_ABRIL_ACUM= CMVMC_ANO_N_ABRIL_ACUM/IND_VN_ANO_N_ABRIL_ACUM*100; var PESO_CMVMC_VN_ANO_N_ABRIL_ACUM_MAX_MIN = PESO_CMVMC_VN_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var PESO_CMVMC_VN_ANO_N_MAIO_ACUM = 'nd'; var PESO_CMVMC_VN_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var PESO_CMVMC_VN_ANO_N_MAIO_ACUM= CMVMC_ANO_N_MAIO_ACUM/IND_VN_ANO_N_MAIO_ACUM*100; var PESO_CMVMC_VN_ANO_N_MAIO_ACUM_MAX_MIN = PESO_CMVMC_VN_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var PESO_CMVMC_VN_ANO_N_JUNHO_ACUM = 'nd'; var PESO_CMVMC_VN_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var PESO_CMVMC_VN_ANO_N_JUNHO_ACUM= CMVMC_ANO_N_JUNHO_ACUM/IND_VN_ANO_N_JUNHO_ACUM*100; var PESO_CMVMC_VN_ANO_N_JUNHO_ACUM_MAX_MIN = PESO_CMVMC_VN_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var PESO_CMVMC_VN_ANO_N_JULHO_ACUM = 'nd'; var PESO_CMVMC_VN_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var PESO_CMVMC_VN_ANO_N_JULHO_ACUM= CMVMC_ANO_N_JULHO_ACUM/IND_VN_ANO_N_JULHO_ACUM*100; var PESO_CMVMC_VN_ANO_N_JULHO_ACUM_MAX_MIN = PESO_CMVMC_VN_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var PESO_CMVMC_VN_ANO_N_AGOSTO_ACUM = 'nd'; var PESO_CMVMC_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var PESO_CMVMC_VN_ANO_N_AGOSTO_ACUM= CMVMC_ANO_N_AGOSTO_ACUM/IND_VN_ANO_N_AGOSTO_ACUM*100; var PESO_CMVMC_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = PESO_CMVMC_VN_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var PESO_CMVMC_VN_ANO_N_SETEMBRO_ACUM = 'nd'; var PESO_CMVMC_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_CMVMC_VN_ANO_N_SETEMBRO_ACUM= CMVMC_ANO_N_SETEMBRO_ACUM/IND_VN_ANO_N_SETEMBRO_ACUM*100; var PESO_CMVMC_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = PESO_CMVMC_VN_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var PESO_CMVMC_VN_ANO_N_OUTUBRO_ACUM = 'nd'; var PESO_CMVMC_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var PESO_CMVMC_VN_ANO_N_OUTUBRO_ACUM= CMVMC_ANO_N_OUTUBRO_ACUM/IND_VN_ANO_N_OUTUBRO_ACUM*100; var PESO_CMVMC_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = PESO_CMVMC_VN_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var PESO_CMVMC_VN_ANO_N_NOVEMBRO_ACUM = 'nd'; var PESO_CMVMC_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_CMVMC_VN_ANO_N_NOVEMBRO_ACUM= CMVMC_ANO_N_NOVEMBRO_ACUM/IND_VN_ANO_N_NOVEMBRO_ACUM*100; var PESO_CMVMC_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = PESO_CMVMC_VN_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var PESO_CMVMC_VN_ANO_N_DEZEMBRO_ACUM = 'nd'; var PESO_CMVMC_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_CMVMC_VN_ANO_N_DEZEMBRO_ACUM= CMVMC_ANO_N_DEZEMBRO_ACUM/IND_VN_ANO_N_DEZEMBRO_ACUM*100; var PESO_CMVMC_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = PESO_CMVMC_VN_ANO_N_DEZEMBRO_ACUM };



    var IND_VN_ANO_N_1_JANEIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JANEIRO"])));
    var IND_VN_ANO_N_1_FEVEREIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_FEVEREIRO"]))) + IND_VN_ANO_N_1_JANEIRO_ACUM;
    var IND_VN_ANO_N_1_MARCO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_MARCO"]))) + IND_VN_ANO_N_1_FEVEREIRO_ACUM;
    var IND_VN_ANO_N_1_ABRIL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_ABRIL"]))) + IND_VN_ANO_N_1_MARCO_ACUM;
    var IND_VN_ANO_N_1_MAIO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_MAIO"]))) + IND_VN_ANO_N_1_ABRIL_ACUM;
    var IND_VN_ANO_N_1_JUNHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JUNHO"]))) + IND_VN_ANO_N_1_MAIO_ACUM;
    var IND_VN_ANO_N_1_JULHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JULHO"]))) + IND_VN_ANO_N_1_JUNHO_ACUM;
    var IND_VN_ANO_N_1_AGOSTO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_AGOSTO"]))) + IND_VN_ANO_N_1_JULHO_ACUM;
    var IND_VN_ANO_N_1_SETEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_SETEMBRO"]))) + IND_VN_ANO_N_1_AGOSTO_ACUM;
    var IND_VN_ANO_N_1_OUTUBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_OUTUBRO"]))) + IND_VN_ANO_N_1_SETEMBRO_ACUM;
    var IND_VN_ANO_N_1_NOVEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_NOVEMBRO"]))) + IND_VN_ANO_N_1_OUTUBRO_ACUM;
    var IND_VN_ANO_N_1_DEZEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_DEZEMBRO"]))) + IND_VN_ANO_N_1_NOVEMBRO_ACUM;


    var CMVMC_ANO_N_1_JANEIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_JANEIRO"])));
    var CMVMC_ANO_N_1_FEVEREIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_FEVEREIRO"]))) + CMVMC_ANO_N_1_JANEIRO_ACUM;
    var CMVMC_ANO_N_1_MARCO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_MARCO"]))) + CMVMC_ANO_N_1_FEVEREIRO_ACUM;
    var CMVMC_ANO_N_1_ABRIL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_ABRIL"]))) + CMVMC_ANO_N_1_MARCO_ACUM;
    var CMVMC_ANO_N_1_MAIO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_MAIO"]))) + CMVMC_ANO_N_1_ABRIL_ACUM;
    var CMVMC_ANO_N_1_JUNHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_JUNHO"]))) + CMVMC_ANO_N_1_MAIO_ACUM;
    var CMVMC_ANO_N_1_JULHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_JULHO"]))) + CMVMC_ANO_N_1_JUNHO_ACUM;
    var CMVMC_ANO_N_1_AGOSTO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_AGOSTO"]))) + CMVMC_ANO_N_1_JULHO_ACUM;
    var CMVMC_ANO_N_1_SETEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_SETEMBRO"]))) + CMVMC_ANO_N_1_AGOSTO_ACUM;
    var CMVMC_ANO_N_1_OUTUBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_OUTUBRO"]))) + CMVMC_ANO_N_1_SETEMBRO_ACUM;
    var CMVMC_ANO_N_1_NOVEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_NOVEMBRO"]))) + CMVMC_ANO_N_1_OUTUBRO_ACUM;
    var CMVMC_ANO_N_1_DEZEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_DEZEMBRO"]))) + CMVMC_ANO_N_1_NOVEMBRO_ACUM;


    var CMVMC_Mensal_Eixo_max_princ= Math.max(
                       PESO_CMVMC_VN_ANO_N_JANEIRO_ACUM_MAX_MIN,
                       PESO_CMVMC_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN,
                       PESO_CMVMC_VN_ANO_N_MARCO_ACUM_MAX_MIN,
                       PESO_CMVMC_VN_ANO_N_ABRIL_ACUM_MAX_MIN,
                       PESO_CMVMC_VN_ANO_N_MAIO_ACUM_MAX_MIN,
                       PESO_CMVMC_VN_ANO_N_JUNHO_ACUM_MAX_MIN,
                       PESO_CMVMC_VN_ANO_N_JULHO_ACUM_MAX_MIN,
                       PESO_CMVMC_VN_ANO_N_AGOSTO_ACUM_MAX_MIN,
                       PESO_CMVMC_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN,
                       PESO_CMVMC_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN,
                       PESO_CMVMC_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN,
                       PESO_CMVMC_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN,

                       CMVMC_ANO_N_1_JANEIRO_ACUM/IND_VN_ANO_N_1_JANEIRO_ACUM*100,
                       CMVMC_ANO_N_1_FEVEREIRO_ACUM/IND_VN_ANO_N_1_FEVEREIRO_ACUM*100,
                       CMVMC_ANO_N_1_MARCO_ACUM/IND_VN_ANO_N_1_MARCO_ACUM*100,
                       CMVMC_ANO_N_1_ABRIL_ACUM/IND_VN_ANO_N_1_ABRIL_ACUM*100,
                       CMVMC_ANO_N_1_MAIO_ACUM/IND_VN_ANO_N_1_MAIO_ACUM*100,
                       CMVMC_ANO_N_1_JUNHO_ACUM/IND_VN_ANO_N_1_JUNHO_ACUM*100,
                       CMVMC_ANO_N_1_JULHO_ACUM/IND_VN_ANO_N_1_JULHO_ACUM*100,
                       CMVMC_ANO_N_1_AGOSTO_ACUM/IND_VN_ANO_N_1_AGOSTO_ACUM*100,
                       CMVMC_ANO_N_1_SETEMBRO_ACUM/IND_VN_ANO_N_1_SETEMBRO_ACUM*100,
                       CMVMC_ANO_N_1_OUTUBRO_ACUM/IND_VN_ANO_N_1_OUTUBRO_ACUM*100,
                       CMVMC_ANO_N_1_NOVEMBRO_ACUM/IND_VN_ANO_N_1_NOVEMBRO_ACUM*100,
                       CMVMC_ANO_N_1_DEZEMBRO_ACUM/IND_VN_ANO_N_1_DEZEMBRO_ACUM*100,
                             );
    var CMVMC_Mensal_Eixo_min_princ= Math.min(

                       PESO_CMVMC_VN_ANO_N_JANEIRO_ACUM_MAX_MIN,
                       PESO_CMVMC_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN,
                       PESO_CMVMC_VN_ANO_N_MARCO_ACUM_MAX_MIN,
                       PESO_CMVMC_VN_ANO_N_ABRIL_ACUM_MAX_MIN,
                       PESO_CMVMC_VN_ANO_N_MAIO_ACUM_MAX_MIN,
                       PESO_CMVMC_VN_ANO_N_JUNHO_ACUM_MAX_MIN,
                       PESO_CMVMC_VN_ANO_N_JULHO_ACUM_MAX_MIN,
                       PESO_CMVMC_VN_ANO_N_AGOSTO_ACUM_MAX_MIN,
                       PESO_CMVMC_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN,
                       PESO_CMVMC_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN,
                       PESO_CMVMC_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN,
                       PESO_CMVMC_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN,

                       CMVMC_ANO_N_1_JANEIRO_ACUM/IND_VN_ANO_N_1_JANEIRO_ACUM*100,
                       CMVMC_ANO_N_1_FEVEREIRO_ACUM/IND_VN_ANO_N_1_FEVEREIRO_ACUM*100,
                       CMVMC_ANO_N_1_MARCO_ACUM/IND_VN_ANO_N_1_MARCO_ACUM*100,
                       CMVMC_ANO_N_1_ABRIL_ACUM/IND_VN_ANO_N_1_ABRIL_ACUM*100,
                       CMVMC_ANO_N_1_MAIO_ACUM/IND_VN_ANO_N_1_MAIO_ACUM*100,
                       CMVMC_ANO_N_1_JUNHO_ACUM/IND_VN_ANO_N_1_JUNHO_ACUM*100,
                       CMVMC_ANO_N_1_JULHO_ACUM/IND_VN_ANO_N_1_JULHO_ACUM*100,
                       CMVMC_ANO_N_1_AGOSTO_ACUM/IND_VN_ANO_N_1_AGOSTO_ACUM*100,
                       CMVMC_ANO_N_1_SETEMBRO_ACUM/IND_VN_ANO_N_1_SETEMBRO_ACUM*100,
                       CMVMC_ANO_N_1_OUTUBRO_ACUM/IND_VN_ANO_N_1_OUTUBRO_ACUM*100,
                       CMVMC_ANO_N_1_NOVEMBRO_ACUM/IND_VN_ANO_N_1_NOVEMBRO_ACUM*100,
                       CMVMC_ANO_N_1_DEZEMBRO_ACUM/IND_VN_ANO_N_1_DEZEMBRO_ACUM*100,
                           );
    var CMVMC_Mensal_Eixo_max_secon= Math.max(
                       CMVMC_ANO_N_JANEIRO_MAX_MIN ,
                       CMVMC_ANO_N_FEVEREIRO_MAX_MIN ,
                       CMVMC_ANO_N_MARCO_MAX_MIN ,
                       CMVMC_ANO_N_ABRIL_MAX_MIN ,
                       CMVMC_ANO_N_MAIO_MAX_MIN ,
                       CMVMC_ANO_N_JUNHO_MAX_MIN ,
                       CMVMC_ANO_N_JULHO_MAX_MIN ,
                       CMVMC_ANO_N_AGOSTO_MAX_MIN ,
                       CMVMC_ANO_N_SETEMBRO_MAX_MIN ,
                       CMVMC_ANO_N_OUTUBRO_MAX_MIN ,
                       CMVMC_ANO_N_NOVEMBRO_MAX_MIN ,
                       CMVMC_ANO_N_DEZEMBRO_MAX_MIN ,



                            @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_DEZEMBRO"]))),

                            );
    var CMVMC_Mensal_Eixo_min_secon= Math.min(
                       CMVMC_ANO_N_JANEIRO_MAX_MIN ,
                       CMVMC_ANO_N_FEVEREIRO_MAX_MIN ,
                       CMVMC_ANO_N_MARCO_MAX_MIN ,
                       CMVMC_ANO_N_ABRIL_MAX_MIN ,
                       CMVMC_ANO_N_MAIO_MAX_MIN ,
                       CMVMC_ANO_N_JUNHO_MAX_MIN ,
                       CMVMC_ANO_N_JULHO_MAX_MIN ,
                       CMVMC_ANO_N_AGOSTO_MAX_MIN ,
                       CMVMC_ANO_N_SETEMBRO_MAX_MIN ,
                       CMVMC_ANO_N_OUTUBRO_MAX_MIN ,
                       CMVMC_ANO_N_NOVEMBRO_MAX_MIN ,
                       CMVMC_ANO_N_DEZEMBRO_MAX_MIN ,


                           @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_DEZEMBRO"]))),

                          );

    //NOTA TA: Aqui trato o minimo e o maximo do eixo principal
    if(Math.abs(CMVMC_Mensal_Eixo_max_princ)>=Math.abs(CMVMC_Mensal_Eixo_min_princ))
    {
        var CMVMC_Mensal_Eixo_max_princ_=(Math.ceil(CMVMC_Mensal_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(CMVMC_Mensal_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(CMVMC_Mensal_Eixo_max_princ),0).toString().length-1);
        var CMVMC_Mensal_Eixo_min_princ_= (Math.floor(CMVMC_Mensal_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(CMVMC_Mensal_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(CMVMC_Mensal_Eixo_max_princ),0).toString().length-1);
        //alert(CMVMC_Mensal_Eixo_max_princ_);
        //alert(CMVMC_Mensal_Eixo_min_princ_);
    }
    else
    {
        var CMVMC_Mensal_Eixo_max_princ_=(Math.ceil(CMVMC_Mensal_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(CMVMC_Mensal_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(CMVMC_Mensal_Eixo_min_princ),0).toString().length-1);
        var CMVMC_Mensal_Eixo_min_princ_= (Math.floor(CMVMC_Mensal_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(CMVMC_Mensal_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(CMVMC_Mensal_Eixo_min_princ),0).toString().length-1);}

    //NOTA TA: Aqui trato o minimo e o maximo do eixo secundario

    if(Math.abs(CMVMC_Mensal_Eixo_max_secon)>=Math.abs(CMVMC_Mensal_Eixo_min_secon))
    {
        var CMVMC_Mensal_Eixo_max_secon_=(Math.ceil(CMVMC_Mensal_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(CMVMC_Mensal_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(CMVMC_Mensal_Eixo_max_secon),0).toString().length-1);
        var CMVMC_Mensal_Eixo_min_secon_= (Math.floor(CMVMC_Mensal_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(CMVMC_Mensal_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(CMVMC_Mensal_Eixo_max_secon),0).toString().length-1);
        //alert(CMVMC_Mensal_Eixo_max_secon_);
        //alert(CMVMC_Mensal_Eixo_min_secon_);
    }
    else
    {
        var CMVMC_Mensal_Eixo_max_secon_=(Math.ceil(CMVMC_Mensal_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(CMVMC_Mensal_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(CMVMC_Mensal_Eixo_min_secon),0).toString().length-1);
        var CMVMC_Mensal_Eixo_min_secon_= (Math.floor(CMVMC_Mensal_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(CMVMC_Mensal_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(CMVMC_Mensal_Eixo_min_secon),0).toString().length-1);}


    if(Math.abs(CMVMC_Mensal_Eixo_min_princ)/Math.abs(CMVMC_Mensal_Eixo_max_princ)>=Math.abs(CMVMC_Mensal_Eixo_min_secon)/Math.abs(CMVMC_Mensal_Eixo_max_secon))
    { if(CMVMC_Mensal_Eixo_max_princ > 0 && CMVMC_Mensal_Eixo_min_princ <0 ){ var CMVMC_Mensal_Eixo_min_secon__=(CMVMC_Mensal_Eixo_min_princ_*CMVMC_Mensal_Eixo_max_secon_)/CMVMC_Mensal_Eixo_max_princ_;} else { var CMVMC_Mensal_Eixo_min_secon__=CMVMC_Mensal_Eixo_min_secon_;}
        if(CMVMC_Mensal_Eixo_max_secon > 0 && CMVMC_Mensal_Eixo_min_secon <0 ){ var CMVMC_Mensal_Eixo_min_princ__=(CMVMC_Mensal_Eixo_min_secon__*CMVMC_Mensal_Eixo_max_princ_)/CMVMC_Mensal_Eixo_max_secon_;} else { var CMVMC_Mensal_Eixo_min_princ__=CMVMC_Mensal_Eixo_min_princ_;}}
    else
    {if(CMVMC_Mensal_Eixo_max_secon > 0 && CMVMC_Mensal_Eixo_min_secon <0 ){ var CMVMC_Mensal_Eixo_min_princ__=(CMVMC_Mensal_Eixo_min_secon_*CMVMC_Mensal_Eixo_max_princ_)/CMVMC_Mensal_Eixo_max_secon_;} else { var CMVMC_Mensal_Eixo_min_princ__=CMVMC_Mensal_Eixo_min_princ_;}
        if(CMVMC_Mensal_Eixo_max_princ > 0 && CMVMC_Mensal_Eixo_min_princ <0 ){ var CMVMC_Mensal_Eixo_min_secon__=(CMVMC_Mensal_Eixo_min_princ__*CMVMC_Mensal_Eixo_max_secon_)/CMVMC_Mensal_Eixo_max_princ_;} else { var CMVMC_Mensal_Eixo_min_secon__=CMVMC_Mensal_Eixo_min_secon_;}
    }



    if(Math.abs(CMVMC_Mensal_Eixo_max_princ)/Math.abs(CMVMC_Mensal_Eixo_min_princ)>=Math.abs(CMVMC_Mensal_Eixo_max_secon)/Math.abs(CMVMC_Mensal_Eixo_min_secon))
    { if(CMVMC_Mensal_Eixo_min_princ > 0 && CMVMC_Mensal_Eixo_max_princ <0 ){ var CMVMC_Mensal_Eixo_max_secon__=(CMVMC_Mensal_Eixo_max_princ_*CMVMC_Mensal_Eixo_min_secon_)/CMVMC_Mensal_Eixo_min_princ_;} else { var CMVMC_Mensal_Eixo_max_secon__=CMVMC_Mensal_Eixo_max_secon_;}
        if(CMVMC_Mensal_Eixo_min_secon > 0 && CMVMC_Mensal_Eixo_max_secon <0 ){ var CMVMC_Mensal_Eixo_max_princ__=(CMVMC_Mensal_Eixo_max_secon__*CMVMC_Mensal_Eixo_min_princ_)/CMVMC_Mensal_Eixo_min_secon_;} else { var CMVMC_Mensal_Eixo_max_princ__=CMVMC_Mensal_Eixo_max_princ_;}}
    else
    {if(CMVMC_Mensal_Eixo_min_secon > 0 && CMVMC_Mensal_Eixo_max_secon <0 ){ var CMVMC_Mensal_Eixo_max_princ__=(CMVMC_Mensal_Eixo_max_secon_*CMVMC_Mensal_Eixo_min_princ_)/CMVMC_Mensal_Eixo_min_secon_;} else { var CMVMC_Mensal_Eixo_max_princ__=CMVMC_Mensal_Eixo_max_princ_;}
        if(CMVMC_Mensal_Eixo_min_princ > 0 && CMVMC_Mensal_Eixo_max_princ <0 ){ var CMVMC_Mensal_Eixo_max_secon__=(CMVMC_Mensal_Eixo_max_princ__*CMVMC_Mensal_Eixo_min_secon_)/CMVMC_Mensal_Eixo_min_princ_;} else { var CMVMC_Mensal_Eixo_max_secon__=CMVMC_Mensal_Eixo_max_secon_;}
    }


    var GRAFICO_CMVMC_MENSAL_1=document.getElementById('GRAFICO_CMVMC_MENSAL_1').getContext('2d');

    var GRAFICO_CMVMC_MENSAL_1=new Chart(GRAFICO_CMVMC_MENSAL_1, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'Peso CMMvsVN(ac) ' + ANO_VERSAO_REAL_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(250 , 83 , 0)',
                   data: [
                   PESO_CMVMC_VN_ANO_N_JANEIRO_ACUM,
                   PESO_CMVMC_VN_ANO_N_FEVEREIRO_ACUM,
                   PESO_CMVMC_VN_ANO_N_MARCO_ACUM,
                   PESO_CMVMC_VN_ANO_N_ABRIL_ACUM,
                   PESO_CMVMC_VN_ANO_N_MAIO_ACUM,
                   PESO_CMVMC_VN_ANO_N_JUNHO_ACUM,
                   PESO_CMVMC_VN_ANO_N_JULHO_ACUM,
                   PESO_CMVMC_VN_ANO_N_AGOSTO_ACUM,
                   PESO_CMVMC_VN_ANO_N_SETEMBRO_ACUM,
                   PESO_CMVMC_VN_ANO_N_OUTUBRO_ACUM,
                   PESO_CMVMC_VN_ANO_N_NOVEMBRO_ACUM,
                   PESO_CMVMC_VN_ANO_N_DEZEMBRO_ACUM,
                   ],
                   type: 'line'


               },
                {
                    label:  'CMM(m) ' + ANO_VERSAO_REAL_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(250 , 83 , 0,0.7)',
                    borderColor: 'rgba(250 , 83 , 0,0.7)',
                    data: [
                  CMVMC_ANO_N_JANEIRO ,
                  CMVMC_ANO_N_FEVEREIRO ,
                  CMVMC_ANO_N_MARCO ,
                  CMVMC_ANO_N_ABRIL,
                  CMVMC_ANO_N_MAIO ,
                  CMVMC_ANO_N_JUNHO ,
                  CMVMC_ANO_N_JULHO ,
                  CMVMC_ANO_N_AGOSTO ,
                  CMVMC_ANO_N_SETEMBRO ,
                  CMVMC_ANO_N_OUTUBRO ,
                  CMVMC_ANO_N_NOVEMBRO ,
                  CMVMC_ANO_N_DEZEMBRO ,                   ],
                },


            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'CMVMC MENSAL_1',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                min:  Math.round(CMVMC_Mensal_Eixo_min_princ__,0),
                                                max:  Math.round(CMVMC_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString()+ "%";
                                                }
                                            }
                                        },

                    { id: 'B',
                        type: 'linear',
                        position: 'right',
                        ticks: {
                            min: Math.round(CMVMC_Mensal_Eixo_min_secon__,0),
                            max:  Math.round(CMVMC_Mensal_Eixo_max_secon__,0),
                            beginAtZero: false,
                            callback: function(value, index, values) {
                                return value.toLocaleString();
                            }
                        }
                    },






                ]
            }
        },

    });

</script>

@*------------------------------------------------GRAFICO_CMVMC_MENSAL_2-----------------------------------------------------------*@
<script>

    var GRAFICO_CMVMC_MENSAL_2=document.getElementById('GRAFICO_CMVMC_MENSAL_2').getContext('2d');

    var GRAFICO_CMVMC_MENSAL_2=new Chart(GRAFICO_CMVMC_MENSAL_2, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'Peso CMMvsVN(ac) ' + ANO_VERSAO_ANTE_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(135, 191 , 97)',
                   data: [
                   CMVMC_ANO_N_1_JANEIRO_ACUM/IND_VN_ANO_N_1_JANEIRO_ACUM*100,
                   CMVMC_ANO_N_1_FEVEREIRO_ACUM/IND_VN_ANO_N_1_FEVEREIRO_ACUM*100,
                   CMVMC_ANO_N_1_MARCO_ACUM/IND_VN_ANO_N_1_MARCO_ACUM*100,
                   CMVMC_ANO_N_1_ABRIL_ACUM/IND_VN_ANO_N_1_ABRIL_ACUM*100,
                   CMVMC_ANO_N_1_MAIO_ACUM/IND_VN_ANO_N_1_MAIO_ACUM*100,
                   CMVMC_ANO_N_1_JUNHO_ACUM/IND_VN_ANO_N_1_JUNHO_ACUM*100,
                   CMVMC_ANO_N_1_JULHO_ACUM/IND_VN_ANO_N_1_JULHO_ACUM*100,
                   CMVMC_ANO_N_1_AGOSTO_ACUM/IND_VN_ANO_N_1_AGOSTO_ACUM*100,
                   CMVMC_ANO_N_1_SETEMBRO_ACUM/IND_VN_ANO_N_1_SETEMBRO_ACUM*100,
                   CMVMC_ANO_N_1_OUTUBRO_ACUM/IND_VN_ANO_N_1_OUTUBRO_ACUM*100,
                   CMVMC_ANO_N_1_NOVEMBRO_ACUM/IND_VN_ANO_N_1_NOVEMBRO_ACUM*100,
                   CMVMC_ANO_N_1_DEZEMBRO_ACUM/IND_VN_ANO_N_1_DEZEMBRO_ACUM*100,

                   ],
                   type: 'line'


               },
                {
                    label:  'CMM(m) ' + ANO_VERSAO_ANTE_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(135, 191 , 97,0.7)',
                    borderColor: 'rgba(135, 191 , 97,0.7)',
                    data: [
                       @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_JANEIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_FEVEREIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_MARCO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_ABRIL"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_MAIO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_JUNHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_JULHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_AGOSTO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_SETEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_OUTUBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_NOVEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["CMVMC_ANO_N_1_DEZEMBRO"]))),
                    ],
                },


            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'CMM MENSAL_1',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                min:  Math.round(CMVMC_Mensal_Eixo_min_princ__,0),
                                                max:  Math.round(CMVMC_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString()+ "%";
                                                }
                                            }
                                        },

                    { id: 'B',
                        type: 'linear',
                        position: 'right',
                        ticks: {
                            min: Math.round(CMVMC_Mensal_Eixo_min_secon__,0),
                            max:  Math.round(CMVMC_Mensal_Eixo_max_secon__,0),
                            beginAtZero: false,
                            callback: function(value, index, values) {
                                return value.toLocaleString();
                            }
                        }
                    },






                ]
            }
        },

    });

</script>


@*------------------------------------------------GRAFICO_CMVMC_ACUMULADO_COMP-----------------------------------------------------------*@
<script>

    if(@ViewData["MES_ACUM_REAL"]<1){ var VAR_VN_ANO_N_JANEIRO_ACUM = 'nd'; var VAR_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JANEIRO_ACUM= IND_VN_ANO_N_JANEIRO_ACUM/IND_VN_ANO_N_1_JANEIRO_ACUM*100-100; var VAR_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = VAR_VN_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var VAR_VN_ANO_N_FEVEREIRO_ACUM = 'nd'; var VAR_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_FEVEREIRO_ACUM= IND_VN_ANO_N_FEVEREIRO_ACUM/IND_VN_ANO_N_1_FEVEREIRO_ACUM*100-100; var VAR_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = VAR_VN_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var VAR_VN_ANO_N_MARCO_ACUM = 'nd'; var VAR_VN_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_MARCO_ACUM= IND_VN_ANO_N_MARCO_ACUM/IND_VN_ANO_N_1_MARCO_ACUM*100-100; var VAR_VN_ANO_N_MARCO_ACUM_MAX_MIN = VAR_VN_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var VAR_VN_ANO_N_ABRIL_ACUM = 'nd'; var VAR_VN_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_ABRIL_ACUM= IND_VN_ANO_N_ABRIL_ACUM/IND_VN_ANO_N_1_ABRIL_ACUM*100-100; var VAR_VN_ANO_N_ABRIL_ACUM_MAX_MIN = VAR_VN_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var VAR_VN_ANO_N_MAIO_ACUM = 'nd'; var VAR_VN_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_MAIO_ACUM= IND_VN_ANO_N_MAIO_ACUM/IND_VN_ANO_N_1_MAIO_ACUM*100-100; var VAR_VN_ANO_N_MAIO_ACUM_MAX_MIN = VAR_VN_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var VAR_VN_ANO_N_JUNHO_ACUM = 'nd'; var VAR_VN_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JUNHO_ACUM= IND_VN_ANO_N_JUNHO_ACUM/IND_VN_ANO_N_1_JUNHO_ACUM*100-100; var VAR_VN_ANO_N_JUNHO_ACUM_MAX_MIN = VAR_VN_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var VAR_VN_ANO_N_JULHO_ACUM = 'nd'; var VAR_VN_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JULHO_ACUM= IND_VN_ANO_N_JULHO_ACUM/IND_VN_ANO_N_1_JULHO_ACUM*100-100; var VAR_VN_ANO_N_JULHO_ACUM_MAX_MIN = VAR_VN_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var VAR_VN_ANO_N_AGOSTO_ACUM = 'nd'; var VAR_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_AGOSTO_ACUM= IND_VN_ANO_N_AGOSTO_ACUM/IND_VN_ANO_N_1_AGOSTO_ACUM*100-100; var VAR_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = VAR_VN_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var VAR_VN_ANO_N_SETEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_SETEMBRO_ACUM= IND_VN_ANO_N_SETEMBRO_ACUM/IND_VN_ANO_N_1_SETEMBRO_ACUM*100-100; var VAR_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var VAR_VN_ANO_N_OUTUBRO_ACUM = 'nd'; var VAR_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_OUTUBRO_ACUM= IND_VN_ANO_N_OUTUBRO_ACUM/IND_VN_ANO_N_1_OUTUBRO_ACUM*100-100; var VAR_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var VAR_VN_ANO_N_NOVEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_NOVEMBRO_ACUM= IND_VN_ANO_N_NOVEMBRO_ACUM/IND_VN_ANO_N_1_NOVEMBRO_ACUM*100-100; var VAR_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var VAR_VN_ANO_N_DEZEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_DEZEMBRO_ACUM= IND_VN_ANO_N_DEZEMBRO_ACUM/IND_VN_ANO_N_1_DEZEMBRO_ACUM*100-100; var VAR_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_DEZEMBRO_ACUM };



    if(@ViewData["MES_ACUM_REAL"]<1){ var VAR_CMVMC_ANO_N_JANEIRO_ACUM = 'nd'; var VAR_CMVMC_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var VAR_CMVMC_ANO_N_JANEIRO_ACUM= CMVMC_ANO_N_JANEIRO_ACUM/CMVMC_ANO_N_1_JANEIRO_ACUM*100-100; var VAR_CMVMC_ANO_N_JANEIRO_ACUM_MAX_MIN = VAR_CMVMC_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var VAR_CMVMC_ANO_N_FEVEREIRO_ACUM = 'nd'; var VAR_CMVMC_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var VAR_CMVMC_ANO_N_FEVEREIRO_ACUM= CMVMC_ANO_N_FEVEREIRO_ACUM/CMVMC_ANO_N_1_FEVEREIRO_ACUM*100-100; var VAR_CMVMC_ANO_N_FEVEREIRO_ACUM_MAX_MIN = VAR_CMVMC_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var VAR_CMVMC_ANO_N_MARCO_ACUM = 'nd'; var VAR_CMVMC_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var VAR_CMVMC_ANO_N_MARCO_ACUM= CMVMC_ANO_N_MARCO_ACUM/CMVMC_ANO_N_1_MARCO_ACUM*100-100; var VAR_CMVMC_ANO_N_MARCO_ACUM_MAX_MIN = VAR_CMVMC_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var VAR_CMVMC_ANO_N_ABRIL_ACUM = 'nd'; var VAR_CMVMC_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var VAR_CMVMC_ANO_N_ABRIL_ACUM= CMVMC_ANO_N_ABRIL_ACUM/CMVMC_ANO_N_1_ABRIL_ACUM*100-100; var VAR_CMVMC_ANO_N_ABRIL_ACUM_MAX_MIN = VAR_CMVMC_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var VAR_CMVMC_ANO_N_MAIO_ACUM = 'nd'; var VAR_CMVMC_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var VAR_CMVMC_ANO_N_MAIO_ACUM= CMVMC_ANO_N_MAIO_ACUM/CMVMC_ANO_N_1_MAIO_ACUM*100-100; var VAR_CMVMC_ANO_N_MAIO_ACUM_MAX_MIN = VAR_CMVMC_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var VAR_CMVMC_ANO_N_JUNHO_ACUM = 'nd'; var VAR_CMVMC_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var VAR_CMVMC_ANO_N_JUNHO_ACUM= CMVMC_ANO_N_JUNHO_ACUM/CMVMC_ANO_N_1_JUNHO_ACUM*100-100; var VAR_CMVMC_ANO_N_JUNHO_ACUM_MAX_MIN = VAR_CMVMC_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var VAR_CMVMC_ANO_N_JULHO_ACUM = 'nd'; var VAR_CMVMC_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var VAR_CMVMC_ANO_N_JULHO_ACUM= CMVMC_ANO_N_JULHO_ACUM/CMVMC_ANO_N_1_JULHO_ACUM*100-100; var VAR_CMVMC_ANO_N_JULHO_ACUM_MAX_MIN = VAR_CMVMC_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var VAR_CMVMC_ANO_N_AGOSTO_ACUM = 'nd'; var VAR_CMVMC_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var VAR_CMVMC_ANO_N_AGOSTO_ACUM= CMVMC_ANO_N_AGOSTO_ACUM/CMVMC_ANO_N_1_AGOSTO_ACUM*100-100; var VAR_CMVMC_ANO_N_AGOSTO_ACUM_MAX_MIN = VAR_CMVMC_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var VAR_CMVMC_ANO_N_SETEMBRO_ACUM = 'nd'; var VAR_CMVMC_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_CMVMC_ANO_N_SETEMBRO_ACUM= CMVMC_ANO_N_SETEMBRO_ACUM/CMVMC_ANO_N_1_SETEMBRO_ACUM*100-100; var VAR_CMVMC_ANO_N_SETEMBRO_ACUM_MAX_MIN = VAR_CMVMC_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var VAR_CMVMC_ANO_N_OUTUBRO_ACUM = 'nd'; var VAR_CMVMC_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var VAR_CMVMC_ANO_N_OUTUBRO_ACUM= CMVMC_ANO_N_OUTUBRO_ACUM/CMVMC_ANO_N_1_OUTUBRO_ACUM*100-100; var VAR_CMVMC_ANO_N_OUTUBRO_ACUM_MAX_MIN = VAR_CMVMC_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var VAR_CMVMC_ANO_N_NOVEMBRO_ACUM = 'nd'; var VAR_CMVMC_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_CMVMC_ANO_N_NOVEMBRO_ACUM= CMVMC_ANO_N_NOVEMBRO_ACUM/CMVMC_ANO_N_1_NOVEMBRO_ACUM*100-100; var VAR_CMVMC_ANO_N_NOVEMBRO_ACUM_MAX_MIN = VAR_CMVMC_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var VAR_CMVMC_ANO_N_DEZEMBRO_ACUM = 'nd'; var VAR_CMVMC_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_CMVMC_ANO_N_DEZEMBRO_ACUM= CMVMC_ANO_N_DEZEMBRO_ACUM/CMVMC_ANO_N_1_DEZEMBRO_ACUM*100-100; var VAR_CMVMC_ANO_N_DEZEMBRO_ACUM_MAX_MIN = VAR_CMVMC_ANO_N_DEZEMBRO_ACUM };



    var GRAFICO_CMVMC_ACUMULADO_COMP=document.getElementById('GRAFICO_CMVMC_ACUMULADO_COMP').getContext('2d');

    var GRAFICO_CMVMC_ACUMULADO_COMP=new Chart(GRAFICO_CMVMC_ACUMULADO_COMP, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'Var CMM(ac)' + ANO_VERSAO_REAL_ + 'vs' + ANO_VERSAO_ANTE_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(250 , 83 , 0)',
                   data: [
                   VAR_CMVMC_ANO_N_JANEIRO_ACUM,
                   VAR_CMVMC_ANO_N_FEVEREIRO_ACUM,
                   VAR_CMVMC_ANO_N_MARCO_ACUM,
                   VAR_CMVMC_ANO_N_ABRIL_ACUM,
                   VAR_CMVMC_ANO_N_MAIO_ACUM,
                   VAR_CMVMC_ANO_N_JUNHO_ACUM,
                   VAR_CMVMC_ANO_N_JULHO_ACUM,
                   VAR_CMVMC_ANO_N_AGOSTO_ACUM,
                   VAR_CMVMC_ANO_N_SETEMBRO_ACUM,
                   VAR_CMVMC_ANO_N_OUTUBRO_ACUM,
                   VAR_CMVMC_ANO_N_NOVEMBRO_ACUM,
                   VAR_CMVMC_ANO_N_DEZEMBRO_ACUM,

                   ],
                   type: 'line'


               },
                {
                    label: 'Var VN(ac)' + ANO_VERSAO_REAL_ + 'vs' + ANO_VERSAO_ANTE_,
                    yAxisID: 'A',
                    //backgroundColor: 'rgb(17, 121, 240)',
                    borderColor: 'rgb(77 , 121 , 199)',
                    data: [
                          VAR_VN_ANO_N_JANEIRO_ACUM,
                          VAR_VN_ANO_N_FEVEREIRO_ACUM,
                          VAR_VN_ANO_N_MARCO_ACUM,
                          VAR_VN_ANO_N_ABRIL_ACUM,
                          VAR_VN_ANO_N_MAIO_ACUM,
                          VAR_VN_ANO_N_JUNHO_ACUM,
                          VAR_VN_ANO_N_JULHO_ACUM,
                          VAR_VN_ANO_N_AGOSTO_ACUM,
                          VAR_VN_ANO_N_SETEMBRO_ACUM,
                          VAR_VN_ANO_N_OUTUBRO_ACUM,
                          VAR_VN_ANO_N_NOVEMBRO_ACUM,
                          VAR_VN_ANO_N_DEZEMBRO_ACUM,
                    ],
                    type: 'line'
                },


            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'CMVMC COMP',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                //min:  Math.round(CMVMC_Mensal_Eixo_min_princ__,0),
                                                //max:  Math.round(CMVMC_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: true,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString()+ "%";
                                                }
                                            }
                                        },

                    //{ id: 'B',
                    //type: 'linear',
                    //position: 'right',
                    //ticks: {
                    //    //min:  Math.round(CMVMC_Mensal_Eixo_min_princ__,0),
                    //    //max:  Math.round(CMVMC_Mensal_Eixo_max_princ__,0),
                    //    beginAtZero: true,
                    //    callback: function(value, index, values) {
                    //        return value.toLocaleString();
                    //        }
                    //    }
                    //},






                ]
            }
        },

    });

</script>

@*------------------------------------------------GRAFICO_CFLOW_MENSAL_1-----------------------------------------------------------*@
<script>

    if(@ViewData["MES_ACUM_REAL"]<1){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JANEIRO = 'nd'; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JANEIRO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JANEIRO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_FEVEREIRO = 'nd'; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_FEVEREIRO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_FEVEREIRO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MARCO = 'nd'; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MARCO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MARCO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MARCO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_ABRIL = 'nd'; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_ABRIL_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_ABRIL"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_ABRIL_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MAIO = 'nd'; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MAIO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MAIO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MAIO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JUNHO = 'nd'; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JUNHO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JUNHO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JUNHO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JULHO = 'nd'; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JULHO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JULHO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JULHO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_AGOSTO = 'nd'; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_AGOSTO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_AGOSTO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_SETEMBRO = 'nd'; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_SETEMBRO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_SETEMBRO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_OUTUBRO = 'nd'; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_OUTUBRO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_OUTUBRO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_NOVEMBRO = 'nd'; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_NOVEMBRO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_NOVEMBRO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_DEZEMBRO = 'nd'; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_DEZEMBRO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_DEZEMBRO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_DEZEMBRO };

    if(@ViewData["MES_ACUM_REAL"]<1){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JANEIRO = 'nd'; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JANEIRO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JANEIRO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_FEVEREIRO = 'nd'; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_FEVEREIRO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_FEVEREIRO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MARCO = 'nd'; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MARCO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MARCO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MARCO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_ABRIL = 'nd'; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_ABRIL_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_ABRIL"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_ABRIL_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MAIO = 'nd'; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MAIO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MAIO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MAIO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JUNHO = 'nd'; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JUNHO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JUNHO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JUNHO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JULHO = 'nd'; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JULHO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JULHO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JULHO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_AGOSTO = 'nd'; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_AGOSTO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_AGOSTO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_SETEMBRO = 'nd'; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_SETEMBRO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_SETEMBRO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_OUTUBRO = 'nd'; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_OUTUBRO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_OUTUBRO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_NOVEMBRO = 'nd'; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_NOVEMBRO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_NOVEMBRO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_DEZEMBRO = 'nd'; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_DEZEMBRO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_DEZEMBRO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_DEZEMBRO };


    var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JANEIRO_ACUM = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JANEIRO;
    var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_FEVEREIRO_ACUM = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_FEVEREIRO + CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JANEIRO_ACUM;
    var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MARCO_ACUM = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MARCO + CFLOW_FLUX_CAIXA_TOTAL_ANO_N_FEVEREIRO_ACUM;
    var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_ABRIL_ACUM = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_ABRIL + CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MARCO_ACUM;
    var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MAIO_ACUM = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MAIO + CFLOW_FLUX_CAIXA_TOTAL_ANO_N_ABRIL_ACUM;
    var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JUNHO_ACUM = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JUNHO + CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MAIO_ACUM;
    var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JULHO_ACUM = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JULHO + CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JUNHO_ACUM;
    var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_AGOSTO_ACUM = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_AGOSTO + CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JULHO_ACUM;
    var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_SETEMBRO_ACUM = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_SETEMBRO + CFLOW_FLUX_CAIXA_TOTAL_ANO_N_AGOSTO_ACUM;
    var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_OUTUBRO_ACUM = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_OUTUBRO + CFLOW_FLUX_CAIXA_TOTAL_ANO_N_SETEMBRO_ACUM;
    var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_NOVEMBRO_ACUM = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_NOVEMBRO + CFLOW_FLUX_CAIXA_TOTAL_ANO_N_OUTUBRO_ACUM;
    var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_DEZEMBRO_ACUM = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_DEZEMBRO + CFLOW_FLUX_CAIXA_TOTAL_ANO_N_NOVEMBRO_ACUM;


    if(@ViewData["MES_ACUM_REAL"]<1){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JANEIRO_ACUM = 'nd'; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JANEIRO_ACUM_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_FEVEREIRO_ACUM = 'nd'; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else {  var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_FEVEREIRO_ACUM_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MARCO_ACUM = 'nd'; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else {  var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MARCO_ACUM_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_ABRIL_ACUM = 'nd'; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else {  var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_ABRIL_ACUM_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MAIO_ACUM = 'nd'; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else {  var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MAIO_ACUM_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JUNHO_ACUM = 'nd'; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else {  var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JUNHO_ACUM_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JULHO_ACUM = 'nd'; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else {  var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JULHO_ACUM_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_AGOSTO_ACUM = 'nd'; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else {  var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_AGOSTO_ACUM_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_SETEMBRO_ACUM = 'nd'; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else {  var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_SETEMBRO_ACUM_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_OUTUBRO_ACUM = 'nd'; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else {  var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_OUTUBRO_ACUM_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_NOVEMBRO_ACUM = 'nd'; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else {  var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_NOVEMBRO_ACUM_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_DEZEMBRO_ACUM = 'nd'; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else {  var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_DEZEMBRO_ACUM_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_DEZEMBRO_ACUM };

    var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JANEIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JANEIRO"])));
    var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_FEVEREIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_FEVEREIRO"]))) + CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JANEIRO_ACUM;
    var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MARCO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MARCO"]))) + CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_FEVEREIRO_ACUM;
    var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_ABRIL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_ABRIL"]))) + CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MARCO_ACUM;
    var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MAIO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MAIO"]))) + CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_ABRIL_ACUM;
    var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JUNHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JUNHO"]))) + CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MAIO_ACUM;
    var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JULHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JULHO"]))) + CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JUNHO_ACUM;
    var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_AGOSTO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_AGOSTO"]))) + CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JULHO_ACUM;
    var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_SETEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_SETEMBRO"]))) + CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_AGOSTO_ACUM;
    var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_OUTUBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_OUTUBRO"]))) + CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_SETEMBRO_ACUM;
    var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_NOVEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_NOVEMBRO"]))) + CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_OUTUBRO_ACUM;
    var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_DEZEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_DEZEMBRO"]))) + CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_NOVEMBRO_ACUM;


    var CFLOW_Eixo_max_princ= Math.max(
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JANEIRO_ACUM_MAX_MIN,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_FEVEREIRO_ACUM_MAX_MIN,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MARCO_ACUM_MAX_MIN,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_ABRIL_ACUM_MAX_MIN,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MAIO_ACUM_MAX_MIN,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JUNHO_ACUM_MAX_MIN,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JULHO_ACUM_MAX_MIN,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_AGOSTO_ACUM_MAX_MIN,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_SETEMBRO_ACUM_MAX_MIN,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_OUTUBRO_ACUM_MAX_MIN,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_NOVEMBRO_ACUM_MAX_MIN,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_DEZEMBRO_ACUM_MAX_MIN,


                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JANEIRO_ACUM,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_FEVEREIRO_ACUM,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MARCO_ACUM,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_ABRIL_ACUM,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MAIO_ACUM,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JUNHO_ACUM,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JULHO_ACUM,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_AGOSTO_ACUM,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_SETEMBRO_ACUM,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_OUTUBRO_ACUM,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_NOVEMBRO_ACUM,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_DEZEMBRO_ACUM,
                       1,
                             );
    var CFLOW_Eixo_min_princ= Math.min(
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JANEIRO_ACUM_MAX_MIN,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_FEVEREIRO_ACUM_MAX_MIN,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MARCO_ACUM_MAX_MIN,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_ABRIL_ACUM_MAX_MIN,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MAIO_ACUM_MAX_MIN,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JUNHO_ACUM_MAX_MIN,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JULHO_ACUM_MAX_MIN,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_AGOSTO_ACUM_MAX_MIN,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_SETEMBRO_ACUM_MAX_MIN,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_OUTUBRO_ACUM_MAX_MIN,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_NOVEMBRO_ACUM_MAX_MIN,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_DEZEMBRO_ACUM_MAX_MIN,

                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JANEIRO_ACUM,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_FEVEREIRO_ACUM,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MARCO_ACUM,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_ABRIL_ACUM,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MAIO_ACUM,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JUNHO_ACUM,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JULHO_ACUM,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_AGOSTO_ACUM,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_SETEMBRO_ACUM,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_OUTUBRO_ACUM,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_NOVEMBRO_ACUM,
                       CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_DEZEMBRO_ACUM,
                           );
    var CFLOW_Eixo_max_secon= Math.max(
                       CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JANEIRO_MAX_MIN , CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JANEIRO_MAX_MIN,
                       CFLOW_FLUX_CAIXA_BRUTO_ANO_N_FEVEREIRO_MAX_MIN , CFLOW_FLUX_CAIXA_TOTAL_ANO_N_FEVEREIRO_MAX_MIN,
                       CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MARCO_MAX_MIN , CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MARCO_MAX_MIN,
                       CFLOW_FLUX_CAIXA_BRUTO_ANO_N_ABRIL_MAX_MIN , CFLOW_FLUX_CAIXA_TOTAL_ANO_N_ABRIL_MAX_MIN,
                       CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MAIO_MAX_MIN ,  CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MAIO_MAX_MIN,
                       CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JUNHO_MAX_MIN , CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JUNHO_MAX_MIN,
                       CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JULHO_MAX_MIN ,  CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JULHO_MAX_MIN,
                       CFLOW_FLUX_CAIXA_BRUTO_ANO_N_AGOSTO_MAX_MIN , CFLOW_FLUX_CAIXA_TOTAL_ANO_N_AGOSTO_MAX_MIN,
                       CFLOW_FLUX_CAIXA_BRUTO_ANO_N_SETEMBRO_MAX_MIN , CFLOW_FLUX_CAIXA_TOTAL_ANO_N_SETEMBRO_MAX_MIN,
                       CFLOW_FLUX_CAIXA_BRUTO_ANO_N_OUTUBRO_MAX_MIN , CFLOW_FLUX_CAIXA_TOTAL_ANO_N_OUTUBRO_MAX_MIN,
                       CFLOW_FLUX_CAIXA_BRUTO_ANO_N_NOVEMBRO_MAX_MIN , CFLOW_FLUX_CAIXA_TOTAL_ANO_N_NOVEMBRO_MAX_MIN,
                       CFLOW_FLUX_CAIXA_BRUTO_ANO_N_DEZEMBRO_MAX_MIN , CFLOW_FLUX_CAIXA_TOTAL_ANO_N_DEZEMBRO_MAX_MIN,



                            @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JANEIRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_FEVEREIRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_MARCO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_ABRIL"]))),@Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_MAIO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JUNHO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JULHO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_AGOSTO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_SETEMBRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_OUTUBRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_NOVEMBRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_DEZEMBRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_DEZEMBRO"]))),

                            );
    var CFLOW_Eixo_min_secon= Math.min(
                       CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JANEIRO_MAX_MIN , CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JANEIRO_MAX_MIN,
                       CFLOW_FLUX_CAIXA_BRUTO_ANO_N_FEVEREIRO_MAX_MIN , CFLOW_FLUX_CAIXA_TOTAL_ANO_N_FEVEREIRO_MAX_MIN,
                       CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MARCO_MAX_MIN , CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MARCO_MAX_MIN,
                       CFLOW_FLUX_CAIXA_BRUTO_ANO_N_ABRIL_MAX_MIN , CFLOW_FLUX_CAIXA_TOTAL_ANO_N_ABRIL_MAX_MIN,
                       CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MAIO_MAX_MIN ,  CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MAIO_MAX_MIN,
                       CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JUNHO_MAX_MIN , CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JUNHO_MAX_MIN,
                       CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JULHO_MAX_MIN ,  CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JULHO_MAX_MIN,
                       CFLOW_FLUX_CAIXA_BRUTO_ANO_N_AGOSTO_MAX_MIN , CFLOW_FLUX_CAIXA_TOTAL_ANO_N_AGOSTO_MAX_MIN,
                       CFLOW_FLUX_CAIXA_BRUTO_ANO_N_SETEMBRO_MAX_MIN , CFLOW_FLUX_CAIXA_TOTAL_ANO_N_SETEMBRO_MAX_MIN,
                       CFLOW_FLUX_CAIXA_BRUTO_ANO_N_OUTUBRO_MAX_MIN , CFLOW_FLUX_CAIXA_TOTAL_ANO_N_OUTUBRO_MAX_MIN,
                       CFLOW_FLUX_CAIXA_BRUTO_ANO_N_NOVEMBRO_MAX_MIN , CFLOW_FLUX_CAIXA_TOTAL_ANO_N_NOVEMBRO_MAX_MIN,
                       CFLOW_FLUX_CAIXA_BRUTO_ANO_N_DEZEMBRO_MAX_MIN , CFLOW_FLUX_CAIXA_TOTAL_ANO_N_DEZEMBRO_MAX_MIN,


                           @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JANEIRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_FEVEREIRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_MARCO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_ABRIL"]))),@Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_MAIO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JUNHO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JULHO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_AGOSTO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_SETEMBRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_OUTUBRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_NOVEMBRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_DEZEMBRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_DEZEMBRO"]))),

                          );

    //NOTA TA: Aqui trato o minimo e o maximo do eixo principal
    if(Math.abs(CFLOW_Eixo_max_princ)>=Math.abs(CFLOW_Eixo_min_princ))
    {
        var CFLOW_Eixo_max_princ_=(Math.ceil(CFLOW_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(CFLOW_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(CFLOW_Eixo_max_princ),0).toString().length-1);
        var CFLOW_Eixo_min_princ_= (Math.floor(CFLOW_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(CFLOW_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(CFLOW_Eixo_max_princ),0).toString().length-1);
        //alert(CFLOW_Eixo_max_princ_);
        //alert(CFLOW_Eixo_min_princ_);
    }
    else
    {
        var CFLOW_Eixo_max_princ_=(Math.ceil(CFLOW_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(CFLOW_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(CFLOW_Eixo_min_princ),0).toString().length-1);
        var CFLOW_Eixo_min_princ_= (Math.floor(CFLOW_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(CFLOW_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(CFLOW_Eixo_min_princ),0).toString().length-1);}

    //NOTA TA: Aqui trato o minimo e o maximo do eixo secundario

    if(Math.abs(CFLOW_Eixo_max_secon)>=Math.abs(CFLOW_Eixo_min_secon))
    {
        var CFLOW_Eixo_max_secon_=(Math.ceil(CFLOW_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(CFLOW_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(CFLOW_Eixo_max_secon),0).toString().length-1);
        var CFLOW_Eixo_min_secon_= (Math.floor(CFLOW_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(CFLOW_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(CFLOW_Eixo_max_secon),0).toString().length-1);
        //alert(CFLOW_Eixo_max_secon_);
        //alert(CFLOW_Eixo_min_secon_);
    }
    else
    {
        var CFLOW_Eixo_max_secon_=(Math.ceil(CFLOW_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(CFLOW_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(CFLOW_Eixo_min_secon),0).toString().length-1);
        var CFLOW_Eixo_min_secon_= (Math.floor(CFLOW_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(CFLOW_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(CFLOW_Eixo_min_secon),0).toString().length-1);}


    if(Math.abs(CFLOW_Eixo_min_princ)/Math.abs(CFLOW_Eixo_max_princ)>=Math.abs(CFLOW_Eixo_min_secon)/Math.abs(CFLOW_Eixo_max_secon))
    { if(CFLOW_Eixo_max_princ > 0 && CFLOW_Eixo_min_princ <0 ){ var CFLOW_Eixo_min_secon__=(CFLOW_Eixo_min_princ_*CFLOW_Eixo_max_secon_)/CFLOW_Eixo_max_princ_;} else { var CFLOW_Eixo_min_secon__=CFLOW_Eixo_min_secon_;}
        if(CFLOW_Eixo_max_secon > 0 && CFLOW_Eixo_min_secon <0 ){ var CFLOW_Eixo_min_princ__=(CFLOW_Eixo_min_secon__*CFLOW_Eixo_max_princ_)/CFLOW_Eixo_max_secon_;} else { var CFLOW_Eixo_min_princ__=CFLOW_Eixo_min_princ_;}}
    else
    {if(CFLOW_Eixo_max_secon > 0 && CFLOW_Eixo_min_secon <0 ){ var CFLOW_Eixo_min_princ__=(CFLOW_Eixo_min_secon_*CFLOW_Eixo_max_princ_)/CFLOW_Eixo_max_secon_;} else { var CFLOW_Eixo_min_princ__=CFLOW_Eixo_min_princ_;}
        if(CFLOW_Eixo_max_princ > 0 && CFLOW_Eixo_min_princ <0 ){ var CFLOW_Eixo_min_secon__=(CFLOW_Eixo_min_princ__*CFLOW_Eixo_max_secon_)/CFLOW_Eixo_max_princ_;} else { var CFLOW_Eixo_min_secon__=CFLOW_Eixo_min_secon_;}
    }



    if(Math.abs(CFLOW_Eixo_max_princ)/Math.abs(CFLOW_Eixo_min_princ)>=Math.abs(CFLOW_Eixo_max_secon)/Math.abs(CFLOW_Eixo_min_secon))
    { if(CFLOW_Eixo_min_princ > 0 && CFLOW_Eixo_max_princ <0 ){ var CFLOW_Eixo_max_secon__=(CFLOW_Eixo_max_princ_*CFLOW_Eixo_min_secon_)/CFLOW_Eixo_min_princ_;} else { var CFLOW_Eixo_max_secon__=CFLOW_Eixo_max_secon_;}
        if(CFLOW_Eixo_min_secon > 0 && CFLOW_Eixo_max_secon <0 ){ var CFLOW_Eixo_max_princ__=(CFLOW_Eixo_max_secon__*CFLOW_Eixo_min_princ_)/CFLOW_Eixo_min_secon_;} else { var CFLOW_Eixo_max_princ__=CFLOW_Eixo_max_princ_;}}
    else
    {if(CFLOW_Eixo_min_secon > 0 && CFLOW_Eixo_max_secon <0 ){ var CFLOW_Eixo_max_princ__=(CFLOW_Eixo_max_secon_*CFLOW_Eixo_min_princ_)/CFLOW_Eixo_min_secon_;} else { var CFLOW_Eixo_max_princ__=CFLOW_Eixo_max_princ_;}
        if(CFLOW_Eixo_min_princ > 0 && CFLOW_Eixo_max_princ <0 ){ var CFLOW_Eixo_max_secon__=(CFLOW_Eixo_max_princ__*CFLOW_Eixo_min_secon_)/CFLOW_Eixo_min_princ_;} else { var CFLOW_Eixo_max_secon__=CFLOW_Eixo_max_secon_;}
    }


    var GRAFICO_CFLOW_MENSAL_1=document.getElementById('GRAFICO_CFLOW_MENSAL_1').getContext('2d');

    var GRAFICO_CFLOW_MENSAL_1=new Chart(GRAFICO_CFLOW_MENSAL_1, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'CFT(ac) ' + ANO_VERSAO_REAL_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(102, 0 , 0)',
                   data: [
                   CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JANEIRO_ACUM,
                   CFLOW_FLUX_CAIXA_TOTAL_ANO_N_FEVEREIRO_ACUM,
                   CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MARCO_ACUM,
                   CFLOW_FLUX_CAIXA_TOTAL_ANO_N_ABRIL_ACUM,
                   CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MAIO_ACUM,
                   CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JUNHO_ACUM,
                   CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JULHO_ACUM,
                   CFLOW_FLUX_CAIXA_TOTAL_ANO_N_AGOSTO_ACUM,
                   CFLOW_FLUX_CAIXA_TOTAL_ANO_N_SETEMBRO_ACUM,
                   CFLOW_FLUX_CAIXA_TOTAL_ANO_N_OUTUBRO_ACUM,
                   CFLOW_FLUX_CAIXA_TOTAL_ANO_N_NOVEMBRO_ACUM,
                   CFLOW_FLUX_CAIXA_TOTAL_ANO_N_DEZEMBRO_ACUM,
                   ],
                   type: 'line'


               },
                {
                    label:  'CFB ' + ANO_VERSAO_REAL_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(204, 0, 0, 0.5)',
                    borderColor: 'rgba(204, 0, 0, 0.5)',
                    data: [
                  CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JANEIRO ,
                  CFLOW_FLUX_CAIXA_BRUTO_ANO_N_FEVEREIRO ,
                  CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MARCO ,
                  CFLOW_FLUX_CAIXA_BRUTO_ANO_N_ABRIL,
                  CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MAIO ,
                  CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JUNHO ,
                  CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JULHO ,
                  CFLOW_FLUX_CAIXA_BRUTO_ANO_N_AGOSTO ,
                  CFLOW_FLUX_CAIXA_BRUTO_ANO_N_SETEMBRO ,
                  CFLOW_FLUX_CAIXA_BRUTO_ANO_N_OUTUBRO ,
                  CFLOW_FLUX_CAIXA_BRUTO_ANO_N_NOVEMBRO ,
                  CFLOW_FLUX_CAIXA_BRUTO_ANO_N_DEZEMBRO ,                   ],
                },
                                    {
                                        label:  'CFT(m) ' + ANO_VERSAO_REAL_,
                                        yAxisID: 'B',
                                        backgroundColor: 'rgba(102, 0 , 0, 0.9)',
                                        borderColor: 'rgba(102, 0 , 0, 0.9)',
                                        data: [
                                           CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JANEIRO,
                                           CFLOW_FLUX_CAIXA_TOTAL_ANO_N_FEVEREIRO,
                                           CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MARCO,
                                           CFLOW_FLUX_CAIXA_TOTAL_ANO_N_ABRIL,
                                           CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MAIO,
                                           CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JUNHO,
                                           CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JULHO,
                                           CFLOW_FLUX_CAIXA_TOTAL_ANO_N_AGOSTO,
                                           CFLOW_FLUX_CAIXA_TOTAL_ANO_N_SETEMBRO,
                                           CFLOW_FLUX_CAIXA_TOTAL_ANO_N_OUTUBRO,
                                           CFLOW_FLUX_CAIXA_TOTAL_ANO_N_NOVEMBRO,
                                           CFLOW_FLUX_CAIXA_TOTAL_ANO_N_DEZEMBRO,                   ],
                                    },

            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'FUNDO DE MANEIO E TESOURARIA',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                min:  Math.round(CFLOW_Eixo_min_princ__,0),
                                                max:  Math.round(CFLOW_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString();
                                                }
                                            }
                                        },

                    { id: 'B',
                        type: 'linear',
                        position: 'right',
                        ticks: {
                            min: Math.round(CFLOW_Eixo_min_secon__,0),
                            max:  Math.round(CFLOW_Eixo_max_secon__,0),
                            beginAtZero: false,
                            callback: function(value, index, values) {
                                return value.toLocaleString();
                            }
                        }
                    },






                ]
            }
        },

    });

</script>

@*------------------------------------------------GRAFICO_CFLOW_MENSAL_2-----------------------------------------------------------*@
<script>


    var GRAFICO_CFLOW_MENSAL_2=document.getElementById('GRAFICO_CFLOW_MENSAL_2').getContext('2d');

    var GRAFICO_CFLOW_MENSAL_2=new Chart(GRAFICO_CFLOW_MENSAL_2, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'CFT(ac) ' + ANO_VERSAO_ANTE_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(135, 191 , 97)',
                   data: [
                   CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JANEIRO_ACUM,
                   CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_FEVEREIRO_ACUM,
                   CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MARCO_ACUM,
                   CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_ABRIL_ACUM,
                   CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MAIO_ACUM,
                   CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JUNHO_ACUM,
                   CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JULHO_ACUM,
                   CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_AGOSTO_ACUM,
                   CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_SETEMBRO_ACUM,
                   CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_OUTUBRO_ACUM,
                   CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_NOVEMBRO_ACUM,
                   CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_DEZEMBRO_ACUM,
                   ],
                   type: 'line'


               },
                {
                    label:  'CFB ' + ANO_VERSAO_ANTE_,
                    yAxisID: 'B',
                    backgroundColor: 'rgb(0 , 75 , 0)',
                    borderColor: 'rgb(0 , 75 , 0)',
                    data: [
                       @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JANEIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_FEVEREIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_MARCO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_ABRIL"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_MAIO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JUNHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JULHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_AGOSTO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_SETEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_OUTUBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_NOVEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_DEZEMBRO"]))),
                    ],
                },
                                    {
                                        label:  'CFT(m) ' + ANO_VERSAO_ANTE_,
                                        yAxisID: 'B',
                                        backgroundColor: 'rgba(135, 191 , 97,0.7)',
                                        borderColor: 'rgba(135, 191 , 97,0.7)',
                                        data: [
                                                @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JANEIRO"]))),
                                                @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_FEVEREIRO"]))),
                                                @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MARCO"]))),
                                                @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_ABRIL"]))),
                                                @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MAIO"]))),
                                                @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JUNHO"]))),
                                                @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JULHO"]))),
                                                @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_AGOSTO"]))),
                                                @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_SETEMBRO"]))),
                                                @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_OUTUBRO"]))),
                                                @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_NOVEMBRO"]))),
                                                @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_DEZEMBRO"]))),

                                        ],
                                    },

            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'FUNDO DE MANEIO E TESOURARIA',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                min:  Math.round(CFLOW_Eixo_min_princ__,0),
                                                max:  Math.round(CFLOW_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString();
                                                }
                                            }
                                        },

                    { id: 'B',
                        type: 'linear',
                        position: 'right',
                        ticks: {
                            min: Math.round(CFLOW_Eixo_min_secon__,0),
                            max:  Math.round(CFLOW_Eixo_max_secon__,0),
                            beginAtZero: false,
                            callback: function(value, index, values) {
                                return value.toLocaleString();
                            }
                        }
                    },






                ]
            }
        },

    });

</script>


@*------------------------------------------------GRAFICO_CFLOW_MENSAL_1-----------------------------------------------------------*@
<script>

    if(@ViewData["MES_ACUM_REAL"]<1){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JANEIRO = 0; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JANEIRO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JANEIRO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_FEVEREIRO = 0; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_FEVEREIRO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_FEVEREIRO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MARCO = 0; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MARCO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MARCO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MARCO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_ABRIL = 0; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_ABRIL_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_ABRIL"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_ABRIL_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MAIO = 0; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MAIO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MAIO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MAIO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JUNHO = 0; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JUNHO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JUNHO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JUNHO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JULHO = 0; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JULHO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JULHO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JULHO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_AGOSTO = 0; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_AGOSTO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_AGOSTO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_SETEMBRO = 0; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_SETEMBRO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_SETEMBRO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_OUTUBRO = 0; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_OUTUBRO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_OUTUBRO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_NOVEMBRO = 0; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_NOVEMBRO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_NOVEMBRO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_DEZEMBRO = 0; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_DEZEMBRO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_DEZEMBRO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_DEZEMBRO };

    var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MES_ACUM = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JANEIRO+
                                                CFLOW_FLUX_CAIXA_BRUTO_ANO_N_FEVEREIRO+
                                                CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MARCO+
                                                CFLOW_FLUX_CAIXA_BRUTO_ANO_N_ABRIL+
                                                CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MAIO+
                                                CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JUNHO+
                                                CFLOW_FLUX_CAIXA_BRUTO_ANO_N_JULHO+
                                                CFLOW_FLUX_CAIXA_BRUTO_ANO_N_AGOSTO+
                                                CFLOW_FLUX_CAIXA_BRUTO_ANO_N_SETEMBRO+
                                                CFLOW_FLUX_CAIXA_BRUTO_ANO_N_OUTUBRO+
                                                CFLOW_FLUX_CAIXA_BRUTO_ANO_N_NOVEMBRO+
                                                CFLOW_FLUX_CAIXA_BRUTO_ANO_N_DEZEMBRO;


    if(@ViewData["MES_ACUM_REAL"]<1){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JANEIRO = 0; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JANEIRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JANEIRO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JANEIRO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_FEVEREIRO = 0; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_FEVEREIRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_FEVEREIRO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_FEVEREIRO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_MARCO = 0; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_MARCO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_MARCO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_MARCO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_ABRIL = 0; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_ABRIL_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_ABRIL"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_ABRIL_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_MAIO = 0; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_MAIO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_MAIO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_MAIO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JUNHO = 0; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JUNHO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JUNHO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JUNHO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JULHO = 0; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JULHO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JULHO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JULHO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_AGOSTO = 0; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_AGOSTO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_AGOSTO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_AGOSTO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_SETEMBRO = 0; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_SETEMBRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_SETEMBRO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_SETEMBRO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_OUTUBRO = 0; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_OUTUBRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_OUTUBRO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_OUTUBRO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_NOVEMBRO = 0; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_NOVEMBRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_NOVEMBRO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_NOVEMBRO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_DEZEMBRO = 0; var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_DEZEMBRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_DEZEMBRO"]))); var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_DEZEMBRO_MAX_MIN = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_DEZEMBRO };

    var CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_MES_ACUM = CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JANEIRO+
                                                CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_FEVEREIRO+
                                                CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_MARCO+
                                                CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_ABRIL+
                                                CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_MAIO+
                                                CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JUNHO+
                                                CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_JULHO+
                                                CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_AGOSTO+
                                                CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_SETEMBRO+
                                                CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_OUTUBRO+
                                                CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_NOVEMBRO+
                                                CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_DEZEMBRO;



    if(@ViewData["MES_ACUM_REAL"]<1){ var CFLOW_INV_CAP_CIRC_ANO_N_JANEIRO = 0; var CFLOW_INV_CAP_CIRC_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_CIRC_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_CIRC_ANO_N_JANEIRO"]))); var CFLOW_INV_CAP_CIRC_ANO_N_JANEIRO_MAX_MIN = CFLOW_INV_CAP_CIRC_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var CFLOW_INV_CAP_CIRC_ANO_N_FEVEREIRO = 0; var CFLOW_INV_CAP_CIRC_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_CIRC_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_CIRC_ANO_N_FEVEREIRO"]))); var CFLOW_INV_CAP_CIRC_ANO_N_FEVEREIRO_MAX_MIN = CFLOW_INV_CAP_CIRC_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var CFLOW_INV_CAP_CIRC_ANO_N_MARCO = 0; var CFLOW_INV_CAP_CIRC_ANO_N_MARCO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_CIRC_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_CIRC_ANO_N_MARCO"]))); var CFLOW_INV_CAP_CIRC_ANO_N_MARCO_MAX_MIN = CFLOW_INV_CAP_CIRC_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var CFLOW_INV_CAP_CIRC_ANO_N_ABRIL = 0; var CFLOW_INV_CAP_CIRC_ANO_N_ABRIL_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_CIRC_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_CIRC_ANO_N_ABRIL"]))); var CFLOW_INV_CAP_CIRC_ANO_N_ABRIL_MAX_MIN = CFLOW_INV_CAP_CIRC_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var CFLOW_INV_CAP_CIRC_ANO_N_MAIO = 0; var CFLOW_INV_CAP_CIRC_ANO_N_MAIO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_CIRC_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_CIRC_ANO_N_MAIO"]))); var CFLOW_INV_CAP_CIRC_ANO_N_MAIO_MAX_MIN = CFLOW_INV_CAP_CIRC_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var CFLOW_INV_CAP_CIRC_ANO_N_JUNHO = 0; var CFLOW_INV_CAP_CIRC_ANO_N_JUNHO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_CIRC_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_CIRC_ANO_N_JUNHO"]))); var CFLOW_INV_CAP_CIRC_ANO_N_JUNHO_MAX_MIN = CFLOW_INV_CAP_CIRC_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var CFLOW_INV_CAP_CIRC_ANO_N_JULHO = 0; var CFLOW_INV_CAP_CIRC_ANO_N_JULHO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_CIRC_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_CIRC_ANO_N_JULHO"]))); var CFLOW_INV_CAP_CIRC_ANO_N_JULHO_MAX_MIN = CFLOW_INV_CAP_CIRC_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var CFLOW_INV_CAP_CIRC_ANO_N_AGOSTO = 0; var CFLOW_INV_CAP_CIRC_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_CIRC_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_CIRC_ANO_N_AGOSTO"]))); var CFLOW_INV_CAP_CIRC_ANO_N_AGOSTO_MAX_MIN = CFLOW_INV_CAP_CIRC_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var CFLOW_INV_CAP_CIRC_ANO_N_SETEMBRO = 0; var CFLOW_INV_CAP_CIRC_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_CIRC_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_CIRC_ANO_N_SETEMBRO"]))); var CFLOW_INV_CAP_CIRC_ANO_N_SETEMBRO_MAX_MIN = CFLOW_INV_CAP_CIRC_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var CFLOW_INV_CAP_CIRC_ANO_N_OUTUBRO = 0; var CFLOW_INV_CAP_CIRC_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_CIRC_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_CIRC_ANO_N_OUTUBRO"]))); var CFLOW_INV_CAP_CIRC_ANO_N_OUTUBRO_MAX_MIN = CFLOW_INV_CAP_CIRC_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var CFLOW_INV_CAP_CIRC_ANO_N_NOVEMBRO = 0; var CFLOW_INV_CAP_CIRC_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_CIRC_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_CIRC_ANO_N_NOVEMBRO"]))); var CFLOW_INV_CAP_CIRC_ANO_N_NOVEMBRO_MAX_MIN = CFLOW_INV_CAP_CIRC_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var CFLOW_INV_CAP_CIRC_ANO_N_DEZEMBRO = 0; var CFLOW_INV_CAP_CIRC_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_CIRC_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_CIRC_ANO_N_DEZEMBRO"]))); var CFLOW_INV_CAP_CIRC_ANO_N_DEZEMBRO_MAX_MIN = CFLOW_INV_CAP_CIRC_ANO_N_DEZEMBRO };

    var CFLOW_INV_CAP_CIRC_ANO_N_MES_ACUM = +CFLOW_INV_CAP_CIRC_ANO_N_JANEIRO+
                                                CFLOW_INV_CAP_CIRC_ANO_N_FEVEREIRO+
                                                CFLOW_INV_CAP_CIRC_ANO_N_MARCO+
                                                CFLOW_INV_CAP_CIRC_ANO_N_ABRIL+
                                                CFLOW_INV_CAP_CIRC_ANO_N_MAIO+
                                                CFLOW_INV_CAP_CIRC_ANO_N_JUNHO+
                                                CFLOW_INV_CAP_CIRC_ANO_N_JULHO+
                                                CFLOW_INV_CAP_CIRC_ANO_N_AGOSTO+
                                                CFLOW_INV_CAP_CIRC_ANO_N_SETEMBRO+
                                                CFLOW_INV_CAP_CIRC_ANO_N_OUTUBRO+
                                                CFLOW_INV_CAP_CIRC_ANO_N_NOVEMBRO+
                                                CFLOW_INV_CAP_CIRC_ANO_N_DEZEMBRO;


    if(@ViewData["MES_ACUM_REAL"]<1){ var CFLOW_INV_CAP_CIRC_ANO_N_1_JANEIRO = 0; var CFLOW_INV_CAP_CIRC_ANO_N_1_JANEIRO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_CIRC_ANO_N_1_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_CIRC_ANO_N_1_JANEIRO"]))); var CFLOW_INV_CAP_CIRC_ANO_N_1_JANEIRO_MAX_MIN = CFLOW_INV_CAP_CIRC_ANO_N_1_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var CFLOW_INV_CAP_CIRC_ANO_N_1_FEVEREIRO = 0; var CFLOW_INV_CAP_CIRC_ANO_N_1_FEVEREIRO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_CIRC_ANO_N_1_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_CIRC_ANO_N_1_FEVEREIRO"]))); var CFLOW_INV_CAP_CIRC_ANO_N_1_FEVEREIRO_MAX_MIN = CFLOW_INV_CAP_CIRC_ANO_N_1_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var CFLOW_INV_CAP_CIRC_ANO_N_1_MARCO = 0; var CFLOW_INV_CAP_CIRC_ANO_N_1_MARCO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_CIRC_ANO_N_1_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_CIRC_ANO_N_1_MARCO"]))); var CFLOW_INV_CAP_CIRC_ANO_N_1_MARCO_MAX_MIN = CFLOW_INV_CAP_CIRC_ANO_N_1_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var CFLOW_INV_CAP_CIRC_ANO_N_1_ABRIL = 0; var CFLOW_INV_CAP_CIRC_ANO_N_1_ABRIL_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_CIRC_ANO_N_1_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_CIRC_ANO_N_1_ABRIL"]))); var CFLOW_INV_CAP_CIRC_ANO_N_1_ABRIL_MAX_MIN = CFLOW_INV_CAP_CIRC_ANO_N_1_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var CFLOW_INV_CAP_CIRC_ANO_N_1_MAIO = 0; var CFLOW_INV_CAP_CIRC_ANO_N_1_MAIO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_CIRC_ANO_N_1_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_CIRC_ANO_N_1_MAIO"]))); var CFLOW_INV_CAP_CIRC_ANO_N_1_MAIO_MAX_MIN = CFLOW_INV_CAP_CIRC_ANO_N_1_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var CFLOW_INV_CAP_CIRC_ANO_N_1_JUNHO = 0; var CFLOW_INV_CAP_CIRC_ANO_N_1_JUNHO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_CIRC_ANO_N_1_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_CIRC_ANO_N_1_JUNHO"]))); var CFLOW_INV_CAP_CIRC_ANO_N_1_JUNHO_MAX_MIN = CFLOW_INV_CAP_CIRC_ANO_N_1_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var CFLOW_INV_CAP_CIRC_ANO_N_1_JULHO = 0; var CFLOW_INV_CAP_CIRC_ANO_N_1_JULHO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_CIRC_ANO_N_1_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_CIRC_ANO_N_1_JULHO"]))); var CFLOW_INV_CAP_CIRC_ANO_N_1_JULHO_MAX_MIN = CFLOW_INV_CAP_CIRC_ANO_N_1_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var CFLOW_INV_CAP_CIRC_ANO_N_1_AGOSTO = 0; var CFLOW_INV_CAP_CIRC_ANO_N_1_AGOSTO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_CIRC_ANO_N_1_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_CIRC_ANO_N_1_AGOSTO"]))); var CFLOW_INV_CAP_CIRC_ANO_N_1_AGOSTO_MAX_MIN = CFLOW_INV_CAP_CIRC_ANO_N_1_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var CFLOW_INV_CAP_CIRC_ANO_N_1_SETEMBRO = 0; var CFLOW_INV_CAP_CIRC_ANO_N_1_SETEMBRO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_CIRC_ANO_N_1_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_CIRC_ANO_N_1_SETEMBRO"]))); var CFLOW_INV_CAP_CIRC_ANO_N_1_SETEMBRO_MAX_MIN = CFLOW_INV_CAP_CIRC_ANO_N_1_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var CFLOW_INV_CAP_CIRC_ANO_N_1_OUTUBRO = 0; var CFLOW_INV_CAP_CIRC_ANO_N_1_OUTUBRO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_CIRC_ANO_N_1_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_CIRC_ANO_N_1_OUTUBRO"]))); var CFLOW_INV_CAP_CIRC_ANO_N_1_OUTUBRO_MAX_MIN = CFLOW_INV_CAP_CIRC_ANO_N_1_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var CFLOW_INV_CAP_CIRC_ANO_N_1_NOVEMBRO = 0; var CFLOW_INV_CAP_CIRC_ANO_N_1_NOVEMBRO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_CIRC_ANO_N_1_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_CIRC_ANO_N_1_NOVEMBRO"]))); var CFLOW_INV_CAP_CIRC_ANO_N_1_NOVEMBRO_MAX_MIN = CFLOW_INV_CAP_CIRC_ANO_N_1_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var CFLOW_INV_CAP_CIRC_ANO_N_1_DEZEMBRO = 0; var CFLOW_INV_CAP_CIRC_ANO_N_1_DEZEMBRO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_CIRC_ANO_N_1_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_CIRC_ANO_N_1_DEZEMBRO"]))); var CFLOW_INV_CAP_CIRC_ANO_N_1_DEZEMBRO_MAX_MIN = CFLOW_INV_CAP_CIRC_ANO_N_1_DEZEMBRO };

    var CFLOW_INV_CAP_CIRC_ANO_N_1_MES_ACUM = +CFLOW_INV_CAP_CIRC_ANO_N_1_JANEIRO+
                                                CFLOW_INV_CAP_CIRC_ANO_N_1_FEVEREIRO+
                                                CFLOW_INV_CAP_CIRC_ANO_N_1_MARCO+
                                                CFLOW_INV_CAP_CIRC_ANO_N_1_ABRIL+
                                                CFLOW_INV_CAP_CIRC_ANO_N_1_MAIO+
                                                CFLOW_INV_CAP_CIRC_ANO_N_1_JUNHO+
                                                CFLOW_INV_CAP_CIRC_ANO_N_1_JULHO+
                                                CFLOW_INV_CAP_CIRC_ANO_N_1_AGOSTO+
                                                CFLOW_INV_CAP_CIRC_ANO_N_1_SETEMBRO+
                                                CFLOW_INV_CAP_CIRC_ANO_N_1_OUTUBRO+
                                                CFLOW_INV_CAP_CIRC_ANO_N_1_NOVEMBRO+
                                                CFLOW_INV_CAP_CIRC_ANO_N_1_DEZEMBRO;



    if(@ViewData["MES_ACUM_REAL"]<1){ var CFLOW_INV_CAP_FIXO_ANO_N_JANEIRO = 0; var CFLOW_INV_CAP_FIXO_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_FIXO_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_FIXO_ANO_N_JANEIRO"]))); var CFLOW_INV_CAP_FIXO_ANO_N_JANEIRO_MAX_MIN = CFLOW_INV_CAP_FIXO_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var CFLOW_INV_CAP_FIXO_ANO_N_FEVEREIRO = 0; var CFLOW_INV_CAP_FIXO_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_FIXO_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_FIXO_ANO_N_FEVEREIRO"]))); var CFLOW_INV_CAP_FIXO_ANO_N_FEVEREIRO_MAX_MIN = CFLOW_INV_CAP_FIXO_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var CFLOW_INV_CAP_FIXO_ANO_N_MARCO = 0; var CFLOW_INV_CAP_FIXO_ANO_N_MARCO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_FIXO_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_FIXO_ANO_N_MARCO"]))); var CFLOW_INV_CAP_FIXO_ANO_N_MARCO_MAX_MIN = CFLOW_INV_CAP_FIXO_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var CFLOW_INV_CAP_FIXO_ANO_N_ABRIL = 0; var CFLOW_INV_CAP_FIXO_ANO_N_ABRIL_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_FIXO_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_FIXO_ANO_N_ABRIL"]))); var CFLOW_INV_CAP_FIXO_ANO_N_ABRIL_MAX_MIN = CFLOW_INV_CAP_FIXO_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var CFLOW_INV_CAP_FIXO_ANO_N_MAIO = 0; var CFLOW_INV_CAP_FIXO_ANO_N_MAIO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_FIXO_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_FIXO_ANO_N_MAIO"]))); var CFLOW_INV_CAP_FIXO_ANO_N_MAIO_MAX_MIN = CFLOW_INV_CAP_FIXO_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var CFLOW_INV_CAP_FIXO_ANO_N_JUNHO = 0; var CFLOW_INV_CAP_FIXO_ANO_N_JUNHO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_FIXO_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_FIXO_ANO_N_JUNHO"]))); var CFLOW_INV_CAP_FIXO_ANO_N_JUNHO_MAX_MIN = CFLOW_INV_CAP_FIXO_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var CFLOW_INV_CAP_FIXO_ANO_N_JULHO = 0; var CFLOW_INV_CAP_FIXO_ANO_N_JULHO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_FIXO_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_FIXO_ANO_N_JULHO"]))); var CFLOW_INV_CAP_FIXO_ANO_N_JULHO_MAX_MIN = CFLOW_INV_CAP_FIXO_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var CFLOW_INV_CAP_FIXO_ANO_N_AGOSTO = 0; var CFLOW_INV_CAP_FIXO_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_FIXO_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_FIXO_ANO_N_AGOSTO"]))); var CFLOW_INV_CAP_FIXO_ANO_N_AGOSTO_MAX_MIN = CFLOW_INV_CAP_FIXO_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var CFLOW_INV_CAP_FIXO_ANO_N_SETEMBRO = 0; var CFLOW_INV_CAP_FIXO_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_FIXO_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_FIXO_ANO_N_SETEMBRO"]))); var CFLOW_INV_CAP_FIXO_ANO_N_SETEMBRO_MAX_MIN = CFLOW_INV_CAP_FIXO_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var CFLOW_INV_CAP_FIXO_ANO_N_OUTUBRO = 0; var CFLOW_INV_CAP_FIXO_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_FIXO_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_FIXO_ANO_N_OUTUBRO"]))); var CFLOW_INV_CAP_FIXO_ANO_N_OUTUBRO_MAX_MIN = CFLOW_INV_CAP_FIXO_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var CFLOW_INV_CAP_FIXO_ANO_N_NOVEMBRO = 0; var CFLOW_INV_CAP_FIXO_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_FIXO_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_FIXO_ANO_N_NOVEMBRO"]))); var CFLOW_INV_CAP_FIXO_ANO_N_NOVEMBRO_MAX_MIN = CFLOW_INV_CAP_FIXO_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var CFLOW_INV_CAP_FIXO_ANO_N_DEZEMBRO = 0; var CFLOW_INV_CAP_FIXO_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_FIXO_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_FIXO_ANO_N_DEZEMBRO"]))); var CFLOW_INV_CAP_FIXO_ANO_N_DEZEMBRO_MAX_MIN = CFLOW_INV_CAP_FIXO_ANO_N_DEZEMBRO };

    var CFLOW_INV_CAP_FIXO_ANO_N_MES_ACUM = +CFLOW_INV_CAP_FIXO_ANO_N_JANEIRO+
                                                CFLOW_INV_CAP_FIXO_ANO_N_FEVEREIRO+
                                                CFLOW_INV_CAP_FIXO_ANO_N_MARCO+
                                                CFLOW_INV_CAP_FIXO_ANO_N_ABRIL+
                                                CFLOW_INV_CAP_FIXO_ANO_N_MAIO+
                                                CFLOW_INV_CAP_FIXO_ANO_N_JUNHO+
                                                CFLOW_INV_CAP_FIXO_ANO_N_JULHO+
                                                CFLOW_INV_CAP_FIXO_ANO_N_AGOSTO+
                                                CFLOW_INV_CAP_FIXO_ANO_N_SETEMBRO+
                                                CFLOW_INV_CAP_FIXO_ANO_N_OUTUBRO+
                                                CFLOW_INV_CAP_FIXO_ANO_N_NOVEMBRO+
                                                CFLOW_INV_CAP_FIXO_ANO_N_DEZEMBRO;


    if(@ViewData["MES_ACUM_REAL"]<1){ var CFLOW_INV_CAP_FIXO_ANO_N_1_JANEIRO = 0; var CFLOW_INV_CAP_FIXO_ANO_N_1_JANEIRO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_FIXO_ANO_N_1_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_FIXO_ANO_N_1_JANEIRO"]))); var CFLOW_INV_CAP_FIXO_ANO_N_1_JANEIRO_MAX_MIN = CFLOW_INV_CAP_FIXO_ANO_N_1_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var CFLOW_INV_CAP_FIXO_ANO_N_1_FEVEREIRO = 0; var CFLOW_INV_CAP_FIXO_ANO_N_1_FEVEREIRO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_FIXO_ANO_N_1_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_FIXO_ANO_N_1_FEVEREIRO"]))); var CFLOW_INV_CAP_FIXO_ANO_N_1_FEVEREIRO_MAX_MIN = CFLOW_INV_CAP_FIXO_ANO_N_1_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var CFLOW_INV_CAP_FIXO_ANO_N_1_MARCO = 0; var CFLOW_INV_CAP_FIXO_ANO_N_1_MARCO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_FIXO_ANO_N_1_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_FIXO_ANO_N_1_MARCO"]))); var CFLOW_INV_CAP_FIXO_ANO_N_1_MARCO_MAX_MIN = CFLOW_INV_CAP_FIXO_ANO_N_1_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var CFLOW_INV_CAP_FIXO_ANO_N_1_ABRIL = 0; var CFLOW_INV_CAP_FIXO_ANO_N_1_ABRIL_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_FIXO_ANO_N_1_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_FIXO_ANO_N_1_ABRIL"]))); var CFLOW_INV_CAP_FIXO_ANO_N_1_ABRIL_MAX_MIN = CFLOW_INV_CAP_FIXO_ANO_N_1_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var CFLOW_INV_CAP_FIXO_ANO_N_1_MAIO = 0; var CFLOW_INV_CAP_FIXO_ANO_N_1_MAIO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_FIXO_ANO_N_1_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_FIXO_ANO_N_1_MAIO"]))); var CFLOW_INV_CAP_FIXO_ANO_N_1_MAIO_MAX_MIN = CFLOW_INV_CAP_FIXO_ANO_N_1_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var CFLOW_INV_CAP_FIXO_ANO_N_1_JUNHO = 0; var CFLOW_INV_CAP_FIXO_ANO_N_1_JUNHO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_FIXO_ANO_N_1_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_FIXO_ANO_N_1_JUNHO"]))); var CFLOW_INV_CAP_FIXO_ANO_N_1_JUNHO_MAX_MIN = CFLOW_INV_CAP_FIXO_ANO_N_1_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var CFLOW_INV_CAP_FIXO_ANO_N_1_JULHO = 0; var CFLOW_INV_CAP_FIXO_ANO_N_1_JULHO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_FIXO_ANO_N_1_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_FIXO_ANO_N_1_JULHO"]))); var CFLOW_INV_CAP_FIXO_ANO_N_1_JULHO_MAX_MIN = CFLOW_INV_CAP_FIXO_ANO_N_1_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var CFLOW_INV_CAP_FIXO_ANO_N_1_AGOSTO = 0; var CFLOW_INV_CAP_FIXO_ANO_N_1_AGOSTO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_FIXO_ANO_N_1_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_FIXO_ANO_N_1_AGOSTO"]))); var CFLOW_INV_CAP_FIXO_ANO_N_1_AGOSTO_MAX_MIN = CFLOW_INV_CAP_FIXO_ANO_N_1_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var CFLOW_INV_CAP_FIXO_ANO_N_1_SETEMBRO = 0; var CFLOW_INV_CAP_FIXO_ANO_N_1_SETEMBRO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_FIXO_ANO_N_1_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_FIXO_ANO_N_1_SETEMBRO"]))); var CFLOW_INV_CAP_FIXO_ANO_N_1_SETEMBRO_MAX_MIN = CFLOW_INV_CAP_FIXO_ANO_N_1_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var CFLOW_INV_CAP_FIXO_ANO_N_1_OUTUBRO = 0; var CFLOW_INV_CAP_FIXO_ANO_N_1_OUTUBRO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_FIXO_ANO_N_1_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_FIXO_ANO_N_1_OUTUBRO"]))); var CFLOW_INV_CAP_FIXO_ANO_N_1_OUTUBRO_MAX_MIN = CFLOW_INV_CAP_FIXO_ANO_N_1_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var CFLOW_INV_CAP_FIXO_ANO_N_1_NOVEMBRO = 0; var CFLOW_INV_CAP_FIXO_ANO_N_1_NOVEMBRO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_FIXO_ANO_N_1_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_FIXO_ANO_N_1_NOVEMBRO"]))); var CFLOW_INV_CAP_FIXO_ANO_N_1_NOVEMBRO_MAX_MIN = CFLOW_INV_CAP_FIXO_ANO_N_1_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var CFLOW_INV_CAP_FIXO_ANO_N_1_DEZEMBRO = 0; var CFLOW_INV_CAP_FIXO_ANO_N_1_DEZEMBRO_MAX_MIN = 0;  } else { var CFLOW_INV_CAP_FIXO_ANO_N_1_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_CAP_FIXO_ANO_N_1_DEZEMBRO"]))); var CFLOW_INV_CAP_FIXO_ANO_N_1_DEZEMBRO_MAX_MIN = CFLOW_INV_CAP_FIXO_ANO_N_1_DEZEMBRO };

    var CFLOW_INV_CAP_FIXO_ANO_N_1_MES_ACUM = +CFLOW_INV_CAP_FIXO_ANO_N_1_JANEIRO+
                                                CFLOW_INV_CAP_FIXO_ANO_N_1_FEVEREIRO+
                                                CFLOW_INV_CAP_FIXO_ANO_N_1_MARCO+
                                                CFLOW_INV_CAP_FIXO_ANO_N_1_ABRIL+
                                                CFLOW_INV_CAP_FIXO_ANO_N_1_MAIO+
                                                CFLOW_INV_CAP_FIXO_ANO_N_1_JUNHO+
                                                CFLOW_INV_CAP_FIXO_ANO_N_1_JULHO+
                                                CFLOW_INV_CAP_FIXO_ANO_N_1_AGOSTO+
                                                CFLOW_INV_CAP_FIXO_ANO_N_1_SETEMBRO+
                                                CFLOW_INV_CAP_FIXO_ANO_N_1_OUTUBRO+
                                                CFLOW_INV_CAP_FIXO_ANO_N_1_NOVEMBRO+
                                                CFLOW_INV_CAP_FIXO_ANO_N_1_DEZEMBRO;




    if(@ViewData["MES_ACUM_REAL"]<1){ var CFLOW_INV_FINANC_ANO_N_JANEIRO = 0; var CFLOW_INV_FINANC_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var CFLOW_INV_FINANC_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_FINANC_ANO_N_JANEIRO"]))); var CFLOW_INV_FINANC_ANO_N_JANEIRO_MAX_MIN = CFLOW_INV_FINANC_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var CFLOW_INV_FINANC_ANO_N_FEVEREIRO = 0; var CFLOW_INV_FINANC_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var CFLOW_INV_FINANC_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_FINANC_ANO_N_FEVEREIRO"]))); var CFLOW_INV_FINANC_ANO_N_FEVEREIRO_MAX_MIN = CFLOW_INV_FINANC_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var CFLOW_INV_FINANC_ANO_N_MARCO = 0; var CFLOW_INV_FINANC_ANO_N_MARCO_MAX_MIN = 0;  } else { var CFLOW_INV_FINANC_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_FINANC_ANO_N_MARCO"]))); var CFLOW_INV_FINANC_ANO_N_MARCO_MAX_MIN = CFLOW_INV_FINANC_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var CFLOW_INV_FINANC_ANO_N_ABRIL = 0; var CFLOW_INV_FINANC_ANO_N_ABRIL_MAX_MIN = 0;  } else { var CFLOW_INV_FINANC_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_FINANC_ANO_N_ABRIL"]))); var CFLOW_INV_FINANC_ANO_N_ABRIL_MAX_MIN = CFLOW_INV_FINANC_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var CFLOW_INV_FINANC_ANO_N_MAIO = 0; var CFLOW_INV_FINANC_ANO_N_MAIO_MAX_MIN = 0;  } else { var CFLOW_INV_FINANC_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_FINANC_ANO_N_MAIO"]))); var CFLOW_INV_FINANC_ANO_N_MAIO_MAX_MIN = CFLOW_INV_FINANC_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var CFLOW_INV_FINANC_ANO_N_JUNHO = 0; var CFLOW_INV_FINANC_ANO_N_JUNHO_MAX_MIN = 0;  } else { var CFLOW_INV_FINANC_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_FINANC_ANO_N_JUNHO"]))); var CFLOW_INV_FINANC_ANO_N_JUNHO_MAX_MIN = CFLOW_INV_FINANC_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var CFLOW_INV_FINANC_ANO_N_JULHO = 0; var CFLOW_INV_FINANC_ANO_N_JULHO_MAX_MIN = 0;  } else { var CFLOW_INV_FINANC_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_FINANC_ANO_N_JULHO"]))); var CFLOW_INV_FINANC_ANO_N_JULHO_MAX_MIN = CFLOW_INV_FINANC_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var CFLOW_INV_FINANC_ANO_N_AGOSTO = 0; var CFLOW_INV_FINANC_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var CFLOW_INV_FINANC_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_FINANC_ANO_N_AGOSTO"]))); var CFLOW_INV_FINANC_ANO_N_AGOSTO_MAX_MIN = CFLOW_INV_FINANC_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var CFLOW_INV_FINANC_ANO_N_SETEMBRO = 0; var CFLOW_INV_FINANC_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var CFLOW_INV_FINANC_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_FINANC_ANO_N_SETEMBRO"]))); var CFLOW_INV_FINANC_ANO_N_SETEMBRO_MAX_MIN = CFLOW_INV_FINANC_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var CFLOW_INV_FINANC_ANO_N_OUTUBRO = 0; var CFLOW_INV_FINANC_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var CFLOW_INV_FINANC_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_FINANC_ANO_N_OUTUBRO"]))); var CFLOW_INV_FINANC_ANO_N_OUTUBRO_MAX_MIN = CFLOW_INV_FINANC_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var CFLOW_INV_FINANC_ANO_N_NOVEMBRO = 0; var CFLOW_INV_FINANC_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var CFLOW_INV_FINANC_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_FINANC_ANO_N_NOVEMBRO"]))); var CFLOW_INV_FINANC_ANO_N_NOVEMBRO_MAX_MIN = CFLOW_INV_FINANC_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var CFLOW_INV_FINANC_ANO_N_DEZEMBRO = 0; var CFLOW_INV_FINANC_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var CFLOW_INV_FINANC_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_FINANC_ANO_N_DEZEMBRO"]))); var CFLOW_INV_FINANC_ANO_N_DEZEMBRO_MAX_MIN = CFLOW_INV_FINANC_ANO_N_DEZEMBRO };

    var CFLOW_INV_FINANC_ANO_N_MES_ACUM = +CFLOW_INV_FINANC_ANO_N_JANEIRO+
                                                CFLOW_INV_FINANC_ANO_N_FEVEREIRO+
                                                CFLOW_INV_FINANC_ANO_N_MARCO+
                                                CFLOW_INV_FINANC_ANO_N_ABRIL+
                                                CFLOW_INV_FINANC_ANO_N_MAIO+
                                                CFLOW_INV_FINANC_ANO_N_JUNHO+
                                                CFLOW_INV_FINANC_ANO_N_JULHO+
                                                CFLOW_INV_FINANC_ANO_N_AGOSTO+
                                                CFLOW_INV_FINANC_ANO_N_SETEMBRO+
                                                CFLOW_INV_FINANC_ANO_N_OUTUBRO+
                                                CFLOW_INV_FINANC_ANO_N_NOVEMBRO+
                                                CFLOW_INV_FINANC_ANO_N_DEZEMBRO;


    if(@ViewData["MES_ACUM_REAL"]<1){ var CFLOW_INV_FINANC_ANO_N_1_JANEIRO = 0; var CFLOW_INV_FINANC_ANO_N_1_JANEIRO_MAX_MIN = 0;  } else { var CFLOW_INV_FINANC_ANO_N_1_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_FINANC_ANO_N_1_JANEIRO"]))); var CFLOW_INV_FINANC_ANO_N_1_JANEIRO_MAX_MIN = CFLOW_INV_FINANC_ANO_N_1_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var CFLOW_INV_FINANC_ANO_N_1_FEVEREIRO = 0; var CFLOW_INV_FINANC_ANO_N_1_FEVEREIRO_MAX_MIN = 0;  } else { var CFLOW_INV_FINANC_ANO_N_1_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_FINANC_ANO_N_1_FEVEREIRO"]))); var CFLOW_INV_FINANC_ANO_N_1_FEVEREIRO_MAX_MIN = CFLOW_INV_FINANC_ANO_N_1_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var CFLOW_INV_FINANC_ANO_N_1_MARCO = 0; var CFLOW_INV_FINANC_ANO_N_1_MARCO_MAX_MIN = 0;  } else { var CFLOW_INV_FINANC_ANO_N_1_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_FINANC_ANO_N_1_MARCO"]))); var CFLOW_INV_FINANC_ANO_N_1_MARCO_MAX_MIN = CFLOW_INV_FINANC_ANO_N_1_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var CFLOW_INV_FINANC_ANO_N_1_ABRIL = 0; var CFLOW_INV_FINANC_ANO_N_1_ABRIL_MAX_MIN = 0;  } else { var CFLOW_INV_FINANC_ANO_N_1_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_FINANC_ANO_N_1_ABRIL"]))); var CFLOW_INV_FINANC_ANO_N_1_ABRIL_MAX_MIN = CFLOW_INV_FINANC_ANO_N_1_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var CFLOW_INV_FINANC_ANO_N_1_MAIO = 0; var CFLOW_INV_FINANC_ANO_N_1_MAIO_MAX_MIN = 0;  } else { var CFLOW_INV_FINANC_ANO_N_1_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_FINANC_ANO_N_1_MAIO"]))); var CFLOW_INV_FINANC_ANO_N_1_MAIO_MAX_MIN = CFLOW_INV_FINANC_ANO_N_1_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var CFLOW_INV_FINANC_ANO_N_1_JUNHO = 0; var CFLOW_INV_FINANC_ANO_N_1_JUNHO_MAX_MIN = 0;  } else { var CFLOW_INV_FINANC_ANO_N_1_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_FINANC_ANO_N_1_JUNHO"]))); var CFLOW_INV_FINANC_ANO_N_1_JUNHO_MAX_MIN = CFLOW_INV_FINANC_ANO_N_1_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var CFLOW_INV_FINANC_ANO_N_1_JULHO = 0; var CFLOW_INV_FINANC_ANO_N_1_JULHO_MAX_MIN = 0;  } else { var CFLOW_INV_FINANC_ANO_N_1_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_FINANC_ANO_N_1_JULHO"]))); var CFLOW_INV_FINANC_ANO_N_1_JULHO_MAX_MIN = CFLOW_INV_FINANC_ANO_N_1_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var CFLOW_INV_FINANC_ANO_N_1_AGOSTO = 0; var CFLOW_INV_FINANC_ANO_N_1_AGOSTO_MAX_MIN = 0;  } else { var CFLOW_INV_FINANC_ANO_N_1_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_FINANC_ANO_N_1_AGOSTO"]))); var CFLOW_INV_FINANC_ANO_N_1_AGOSTO_MAX_MIN = CFLOW_INV_FINANC_ANO_N_1_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var CFLOW_INV_FINANC_ANO_N_1_SETEMBRO = 0; var CFLOW_INV_FINANC_ANO_N_1_SETEMBRO_MAX_MIN = 0;  } else { var CFLOW_INV_FINANC_ANO_N_1_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_FINANC_ANO_N_1_SETEMBRO"]))); var CFLOW_INV_FINANC_ANO_N_1_SETEMBRO_MAX_MIN = CFLOW_INV_FINANC_ANO_N_1_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var CFLOW_INV_FINANC_ANO_N_1_OUTUBRO = 0; var CFLOW_INV_FINANC_ANO_N_1_OUTUBRO_MAX_MIN = 0;  } else { var CFLOW_INV_FINANC_ANO_N_1_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_FINANC_ANO_N_1_OUTUBRO"]))); var CFLOW_INV_FINANC_ANO_N_1_OUTUBRO_MAX_MIN = CFLOW_INV_FINANC_ANO_N_1_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var CFLOW_INV_FINANC_ANO_N_1_NOVEMBRO = 0; var CFLOW_INV_FINANC_ANO_N_1_NOVEMBRO_MAX_MIN = 0;  } else { var CFLOW_INV_FINANC_ANO_N_1_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_FINANC_ANO_N_1_NOVEMBRO"]))); var CFLOW_INV_FINANC_ANO_N_1_NOVEMBRO_MAX_MIN = CFLOW_INV_FINANC_ANO_N_1_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var CFLOW_INV_FINANC_ANO_N_1_DEZEMBRO = 0; var CFLOW_INV_FINANC_ANO_N_1_DEZEMBRO_MAX_MIN = 0;  } else { var CFLOW_INV_FINANC_ANO_N_1_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_INV_FINANC_ANO_N_1_DEZEMBRO"]))); var CFLOW_INV_FINANC_ANO_N_1_DEZEMBRO_MAX_MIN = CFLOW_INV_FINANC_ANO_N_1_DEZEMBRO };

    var CFLOW_INV_FINANC_ANO_N_1_MES_ACUM = +CFLOW_INV_FINANC_ANO_N_1_JANEIRO+
                                                CFLOW_INV_FINANC_ANO_N_1_FEVEREIRO+
                                                CFLOW_INV_FINANC_ANO_N_1_MARCO+
                                                CFLOW_INV_FINANC_ANO_N_1_ABRIL+
                                                CFLOW_INV_FINANC_ANO_N_1_MAIO+
                                                CFLOW_INV_FINANC_ANO_N_1_JUNHO+
                                                CFLOW_INV_FINANC_ANO_N_1_JULHO+
                                                CFLOW_INV_FINANC_ANO_N_1_AGOSTO+
                                                CFLOW_INV_FINANC_ANO_N_1_SETEMBRO+
                                                CFLOW_INV_FINANC_ANO_N_1_OUTUBRO+
                                                CFLOW_INV_FINANC_ANO_N_1_NOVEMBRO+
                                                CFLOW_INV_FINANC_ANO_N_1_DEZEMBRO;


    if(@ViewData["MES_ACUM_REAL"]<1){ var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_JANEIRO = 0; var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_JANEIRO"]))); var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_JANEIRO_MAX_MIN = CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_FEVEREIRO = 0; var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_FEVEREIRO"]))); var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_FEVEREIRO_MAX_MIN = CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_MARCO = 0; var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_MARCO_MAX_MIN = 0;  } else { var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_MARCO"]))); var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_MARCO_MAX_MIN = CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_ABRIL = 0; var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_ABRIL_MAX_MIN = 0;  } else { var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_ABRIL"]))); var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_ABRIL_MAX_MIN = CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_MAIO = 0; var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_MAIO_MAX_MIN = 0;  } else { var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_MAIO"]))); var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_MAIO_MAX_MIN = CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_JUNHO = 0; var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_JUNHO_MAX_MIN = 0;  } else { var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_JUNHO"]))); var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_JUNHO_MAX_MIN = CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_JULHO = 0; var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_JULHO_MAX_MIN = 0;  } else { var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_JULHO"]))); var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_JULHO_MAX_MIN = CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_AGOSTO = 0; var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_AGOSTO"]))); var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_AGOSTO_MAX_MIN = CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_SETEMBRO = 0; var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_SETEMBRO"]))); var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_SETEMBRO_MAX_MIN = CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_OUTUBRO = 0; var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_OUTUBRO"]))); var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_OUTUBRO_MAX_MIN = CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_NOVEMBRO = 0; var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_NOVEMBRO"]))); var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_NOVEMBRO_MAX_MIN = CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_DEZEMBRO = 0; var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_DEZEMBRO"]))); var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_DEZEMBRO_MAX_MIN = CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_DEZEMBRO };

    var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_MES_ACUM = +CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_JANEIRO+
                                                CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_FEVEREIRO+
                                                CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_MARCO+
                                                CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_ABRIL+
                                                CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_MAIO+
                                                CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_JUNHO+
                                                CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_JULHO+
                                                CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_AGOSTO+
                                                CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_SETEMBRO+
                                                CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_OUTUBRO+
                                                CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_NOVEMBRO+
                                                CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_DEZEMBRO;


    if(@ViewData["MES_ACUM_REAL"]<1){ var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_JANEIRO = 0; var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_JANEIRO_MAX_MIN = 0;  } else { var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_JANEIRO"]))); var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_JANEIRO_MAX_MIN = CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_FEVEREIRO = 0; var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_FEVEREIRO_MAX_MIN = 0;  } else { var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_FEVEREIRO"]))); var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_FEVEREIRO_MAX_MIN = CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_MARCO = 0; var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_MARCO_MAX_MIN = 0;  } else { var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_MARCO"]))); var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_MARCO_MAX_MIN = CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_ABRIL = 0; var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_ABRIL_MAX_MIN = 0;  } else { var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_ABRIL"]))); var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_ABRIL_MAX_MIN = CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_MAIO = 0; var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_MAIO_MAX_MIN = 0;  } else { var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_MAIO"]))); var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_MAIO_MAX_MIN = CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_JUNHO = 0; var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_JUNHO_MAX_MIN = 0;  } else { var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_JUNHO"]))); var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_JUNHO_MAX_MIN = CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_JULHO = 0; var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_JULHO_MAX_MIN = 0;  } else { var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_JULHO"]))); var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_JULHO_MAX_MIN = CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_AGOSTO = 0; var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_AGOSTO_MAX_MIN = 0;  } else { var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_AGOSTO"]))); var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_AGOSTO_MAX_MIN = CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_SETEMBRO = 0; var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_SETEMBRO_MAX_MIN = 0;  } else { var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_SETEMBRO"]))); var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_SETEMBRO_MAX_MIN = CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_OUTUBRO = 0; var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_OUTUBRO_MAX_MIN = 0;  } else { var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_OUTUBRO"]))); var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_OUTUBRO_MAX_MIN = CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_NOVEMBRO = 0; var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_NOVEMBRO_MAX_MIN = 0;  } else { var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_NOVEMBRO"]))); var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_NOVEMBRO_MAX_MIN = CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_DEZEMBRO = 0; var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_DEZEMBRO_MAX_MIN = 0;  } else { var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_DEZEMBRO"]))); var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_DEZEMBRO_MAX_MIN = CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_DEZEMBRO };

    var CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_MES_ACUM = +CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_JANEIRO+
                                                CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_FEVEREIRO+
                                                CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_MARCO+
                                                CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_ABRIL+
                                                CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_MAIO+
                                                CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_JUNHO+
                                                CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_JULHO+
                                                CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_AGOSTO+
                                                CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_SETEMBRO+
                                                CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_OUTUBRO+
                                                CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_NOVEMBRO+
                                                CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_DEZEMBRO;


    if(@ViewData["MES_ACUM_REAL"]<1){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JANEIRO = 0; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JANEIRO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JANEIRO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_FEVEREIRO = 0; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_FEVEREIRO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_FEVEREIRO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MARCO = 0; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MARCO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MARCO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MARCO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_ABRIL = 0; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_ABRIL_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_ABRIL"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_ABRIL_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MAIO = 0; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MAIO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MAIO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MAIO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JUNHO = 0; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JUNHO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JUNHO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JUNHO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JULHO = 0; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JULHO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JULHO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JULHO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_AGOSTO = 0; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_AGOSTO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_AGOSTO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_SETEMBRO = 0; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_SETEMBRO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_SETEMBRO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_OUTUBRO = 0; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_OUTUBRO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_OUTUBRO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_NOVEMBRO = 0; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_NOVEMBRO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_NOVEMBRO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_DEZEMBRO = 0; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_DEZEMBRO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_DEZEMBRO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_DEZEMBRO };

    var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MES_ACUM = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JANEIRO+
                                                CFLOW_FLUX_CAIXA_TOTAL_ANO_N_FEVEREIRO+
                                                CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MARCO+
                                                CFLOW_FLUX_CAIXA_TOTAL_ANO_N_ABRIL+
                                                CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MAIO+
                                                CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JUNHO+
                                                CFLOW_FLUX_CAIXA_TOTAL_ANO_N_JULHO+
                                                CFLOW_FLUX_CAIXA_TOTAL_ANO_N_AGOSTO+
                                                CFLOW_FLUX_CAIXA_TOTAL_ANO_N_SETEMBRO+
                                                CFLOW_FLUX_CAIXA_TOTAL_ANO_N_OUTUBRO+
                                                CFLOW_FLUX_CAIXA_TOTAL_ANO_N_NOVEMBRO+
                                                CFLOW_FLUX_CAIXA_TOTAL_ANO_N_DEZEMBRO;


    if(@ViewData["MES_ACUM_REAL"]<1){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JANEIRO = 0; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JANEIRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JANEIRO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JANEIRO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_FEVEREIRO = 0; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_FEVEREIRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_FEVEREIRO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_FEVEREIRO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MARCO = 0; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MARCO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MARCO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MARCO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_ABRIL = 0; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_ABRIL_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_ABRIL"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_ABRIL_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MAIO = 0; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MAIO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MAIO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MAIO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JUNHO = 0; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JUNHO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JUNHO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JUNHO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JULHO = 0; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JULHO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JULHO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JULHO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_AGOSTO = 0; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_AGOSTO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_AGOSTO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_AGOSTO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_SETEMBRO = 0; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_SETEMBRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_SETEMBRO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_SETEMBRO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_OUTUBRO = 0; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_OUTUBRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_OUTUBRO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_OUTUBRO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_NOVEMBRO = 0; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_NOVEMBRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_NOVEMBRO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_NOVEMBRO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_DEZEMBRO = 0; var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_DEZEMBRO_MAX_MIN = 0;  } else { var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_DEZEMBRO"]))); var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_DEZEMBRO_MAX_MIN = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_DEZEMBRO };

    var CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MES_ACUM = CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JANEIRO+
                                                CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_FEVEREIRO+
                                                CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MARCO+
                                                CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_ABRIL+
                                                CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MAIO+
                                                CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JUNHO+
                                                CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_JULHO+
                                                CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_AGOSTO+
                                                CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_SETEMBRO+
                                                CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_OUTUBRO+
                                                CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_NOVEMBRO+
                                                CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_DEZEMBRO;

    var GRAFICO_CFLOW_COMP_ACUMULADO_COMP=document.getElementById('GRAFICO_CFLOW_COMP_ACUMULADO_COMP').getContext('2d');

    var GRAFICO_CFLOW_COMP_ACUMULADO_COMP=new Chart(GRAFICO_CFLOW_COMP_ACUMULADO_COMP, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['CFB', 'Inv Circ', 'Inv Fixo', 'Inv Fin','Otr', 'CFT' ],
            datasets: [
               {
                   label: @ViewData["MES_ACUM_REAL"]+'/' + ANO_VERSAO_REAL_+' (ac)',
                   yAxisID: 'A',
                   backgroundColor: 'rgb(102, 0, 0)',
                   borderColor: 'rgb(102, 0, 0)',
                   data: [
                     CFLOW_FLUX_CAIXA_BRUTO_ANO_N_MES_ACUM,
                     CFLOW_INV_CAP_CIRC_ANO_N_MES_ACUM,
                     CFLOW_INV_CAP_FIXO_ANO_N_MES_ACUM,
                     CFLOW_INV_FINANC_ANO_N_MES_ACUM,
                     CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_MES_ACUM,
                     CFLOW_FLUX_CAIXA_TOTAL_ANO_N_MES_ACUM,

                   ],
                   //type: 'line'


               },
                {
                    label: @ViewData["MES_ACUM_REAL"]+'/' + ANO_VERSAO_ANTE_+' (ac)',
                    yAxisID: 'A',
                    backgroundColor: 'rgb(135, 191 , 97)',
                    borderColor: 'rgb(135, 191 , 97)',
                    data: [
                        CFLOW_FLUX_CAIXA_BRUTO_ANO_N_1_MES_ACUM,
                        CFLOW_INV_CAP_CIRC_ANO_N_1_MES_ACUM,
                        CFLOW_INV_CAP_FIXO_ANO_N_1_MES_ACUM,
                        CFLOW_INV_FINANC_ANO_N_1_MES_ACUM,
                        CFLOW_OUTR_FLUX_EXTRA_EXPLOR_OUTR_ANO_N_1_MES_ACUM,
                        CFLOW_FLUX_CAIXA_TOTAL_ANO_N_1_MES_ACUM,
                    ],
                    //type: 'line'
                },


            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'CMVMC COMP',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                //min:  Math.round(CMVMC_Mensal_Eixo_min_princ__,0),
                                                //max:  Math.round(CMVMC_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString();
                                                }
                                            }
                                        },

                    //{ id: 'B',
                    //type: 'linear',
                    //position: 'right',
                    //ticks: {
                    //    //min:  Math.round(CMVMC_Mensal_Eixo_min_princ__,0),
                    //    //max:  Math.round(CMVMC_Mensal_Eixo_max_princ__,0),
                    //    beginAtZero: true,
                    //    callback: function(value, index, values) {
                    //        return value.toLocaleString();
                    //        }
                    //    }
                    //},






                ]
            }
        },

    });



</script>

@*------------------------------------------------GRAFICO_INDICADORES_MENSAL_1-----------------------------------------------------------*@
<script>

    if(@ViewData["MES_ACUM_REAL"]<1){ var IND_PASS_FINANC_EBITDA_ANO_N_JANEIRO = 'nd'; var IND_PASS_FINANC_EBITDA_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var IND_PASS_FINANC_EBITDA_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_JANEIRO"]))); var IND_PASS_FINANC_EBITDA_ANO_N_JANEIRO_MAX_MIN = IND_PASS_FINANC_EBITDA_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var IND_PASS_FINANC_EBITDA_ANO_N_FEVEREIRO = 'nd'; var IND_PASS_FINANC_EBITDA_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var IND_PASS_FINANC_EBITDA_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_FEVEREIRO"]))); var IND_PASS_FINANC_EBITDA_ANO_N_FEVEREIRO_MAX_MIN = IND_PASS_FINANC_EBITDA_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var IND_PASS_FINANC_EBITDA_ANO_N_MARCO = 'nd'; var IND_PASS_FINANC_EBITDA_ANO_N_MARCO_MAX_MIN = 0;  } else { var IND_PASS_FINANC_EBITDA_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_MARCO"]))); var IND_PASS_FINANC_EBITDA_ANO_N_MARCO_MAX_MIN = IND_PASS_FINANC_EBITDA_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var IND_PASS_FINANC_EBITDA_ANO_N_ABRIL = 'nd'; var IND_PASS_FINANC_EBITDA_ANO_N_ABRIL_MAX_MIN = 0;  } else { var IND_PASS_FINANC_EBITDA_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_ABRIL"]))); var IND_PASS_FINANC_EBITDA_ANO_N_ABRIL_MAX_MIN = IND_PASS_FINANC_EBITDA_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var IND_PASS_FINANC_EBITDA_ANO_N_MAIO = 'nd'; var IND_PASS_FINANC_EBITDA_ANO_N_MAIO_MAX_MIN = 0;  } else { var IND_PASS_FINANC_EBITDA_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_MAIO"]))); var IND_PASS_FINANC_EBITDA_ANO_N_MAIO_MAX_MIN = IND_PASS_FINANC_EBITDA_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var IND_PASS_FINANC_EBITDA_ANO_N_JUNHO = 'nd'; var IND_PASS_FINANC_EBITDA_ANO_N_JUNHO_MAX_MIN = 0;  } else { var IND_PASS_FINANC_EBITDA_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_JUNHO"]))); var IND_PASS_FINANC_EBITDA_ANO_N_JUNHO_MAX_MIN = IND_PASS_FINANC_EBITDA_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var IND_PASS_FINANC_EBITDA_ANO_N_JULHO = 'nd'; var IND_PASS_FINANC_EBITDA_ANO_N_JULHO_MAX_MIN = 0;  } else { var IND_PASS_FINANC_EBITDA_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_JULHO"]))); var IND_PASS_FINANC_EBITDA_ANO_N_JULHO_MAX_MIN = IND_PASS_FINANC_EBITDA_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var IND_PASS_FINANC_EBITDA_ANO_N_AGOSTO = 'nd'; var IND_PASS_FINANC_EBITDA_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var IND_PASS_FINANC_EBITDA_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_AGOSTO"]))); var IND_PASS_FINANC_EBITDA_ANO_N_AGOSTO_MAX_MIN = IND_PASS_FINANC_EBITDA_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var IND_PASS_FINANC_EBITDA_ANO_N_SETEMBRO = 'nd'; var IND_PASS_FINANC_EBITDA_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var IND_PASS_FINANC_EBITDA_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_SETEMBRO"]))); var IND_PASS_FINANC_EBITDA_ANO_N_SETEMBRO_MAX_MIN = IND_PASS_FINANC_EBITDA_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var IND_PASS_FINANC_EBITDA_ANO_N_OUTUBRO = 'nd'; var IND_PASS_FINANC_EBITDA_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var IND_PASS_FINANC_EBITDA_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_OUTUBRO"]))); var IND_PASS_FINANC_EBITDA_ANO_N_OUTUBRO_MAX_MIN = IND_PASS_FINANC_EBITDA_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var IND_PASS_FINANC_EBITDA_ANO_N_NOVEMBRO = 'nd'; var IND_PASS_FINANC_EBITDA_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var IND_PASS_FINANC_EBITDA_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_NOVEMBRO"]))); var IND_PASS_FINANC_EBITDA_ANO_N_NOVEMBRO_MAX_MIN = IND_PASS_FINANC_EBITDA_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var IND_PASS_FINANC_EBITDA_ANO_N_DEZEMBRO = 'nd'; var IND_PASS_FINANC_EBITDA_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var IND_PASS_FINANC_EBITDA_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_DEZEMBRO"]))); var IND_PASS_FINANC_EBITDA_ANO_N_DEZEMBRO_MAX_MIN = IND_PASS_FINANC_EBITDA_ANO_N_DEZEMBRO };

    if(@ViewData["MES_ACUM_REAL"]<1){ var IND_PASS_FINANC_ANO_N_JANEIRO = 'nd'; var IND_PASS_FINANC_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var IND_PASS_FINANC_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_JANEIRO"]))); var IND_PASS_FINANC_ANO_N_JANEIRO_MAX_MIN = IND_PASS_FINANC_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var IND_PASS_FINANC_ANO_N_FEVEREIRO = 'nd'; var IND_PASS_FINANC_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var IND_PASS_FINANC_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_FEVEREIRO"]))); var IND_PASS_FINANC_ANO_N_FEVEREIRO_MAX_MIN = IND_PASS_FINANC_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var IND_PASS_FINANC_ANO_N_MARCO = 'nd'; var IND_PASS_FINANC_ANO_N_MARCO_MAX_MIN = 0;  } else { var IND_PASS_FINANC_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_MARCO"]))); var IND_PASS_FINANC_ANO_N_MARCO_MAX_MIN = IND_PASS_FINANC_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var IND_PASS_FINANC_ANO_N_ABRIL = 'nd'; var IND_PASS_FINANC_ANO_N_ABRIL_MAX_MIN = 0;  } else { var IND_PASS_FINANC_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_ABRIL"]))); var IND_PASS_FINANC_ANO_N_ABRIL_MAX_MIN = IND_PASS_FINANC_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var IND_PASS_FINANC_ANO_N_MAIO = 'nd'; var IND_PASS_FINANC_ANO_N_MAIO_MAX_MIN = 0;  } else { var IND_PASS_FINANC_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_MAIO"]))); var IND_PASS_FINANC_ANO_N_MAIO_MAX_MIN = IND_PASS_FINANC_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var IND_PASS_FINANC_ANO_N_JUNHO = 'nd'; var IND_PASS_FINANC_ANO_N_JUNHO_MAX_MIN = 0;  } else { var IND_PASS_FINANC_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_JUNHO"]))); var IND_PASS_FINANC_ANO_N_JUNHO_MAX_MIN = IND_PASS_FINANC_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var IND_PASS_FINANC_ANO_N_JULHO = 'nd'; var IND_PASS_FINANC_ANO_N_JULHO_MAX_MIN = 0;  } else { var IND_PASS_FINANC_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_JULHO"]))); var IND_PASS_FINANC_ANO_N_JULHO_MAX_MIN = IND_PASS_FINANC_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var IND_PASS_FINANC_ANO_N_AGOSTO = 'nd'; var IND_PASS_FINANC_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var IND_PASS_FINANC_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_AGOSTO"]))); var IND_PASS_FINANC_ANO_N_AGOSTO_MAX_MIN = IND_PASS_FINANC_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var IND_PASS_FINANC_ANO_N_SETEMBRO = 'nd'; var IND_PASS_FINANC_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var IND_PASS_FINANC_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_SETEMBRO"]))); var IND_PASS_FINANC_ANO_N_SETEMBRO_MAX_MIN = IND_PASS_FINANC_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var IND_PASS_FINANC_ANO_N_OUTUBRO = 'nd'; var IND_PASS_FINANC_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var IND_PASS_FINANC_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_OUTUBRO"]))); var IND_PASS_FINANC_ANO_N_OUTUBRO_MAX_MIN = IND_PASS_FINANC_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var IND_PASS_FINANC_ANO_N_NOVEMBRO = 'nd'; var IND_PASS_FINANC_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var IND_PASS_FINANC_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_NOVEMBRO"]))); var IND_PASS_FINANC_ANO_N_NOVEMBRO_MAX_MIN = IND_PASS_FINANC_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var IND_PASS_FINANC_ANO_N_DEZEMBRO = 'nd'; var IND_PASS_FINANC_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var IND_PASS_FINANC_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_DEZEMBRO"]))); var IND_PASS_FINANC_ANO_N_DEZEMBRO_MAX_MIN = IND_PASS_FINANC_ANO_N_DEZEMBRO };


    if(@ViewData["MES_ACUM_REAL"]<1){ var EBITDA_ANUALIZA_ANO_N_JANEIRO = 'nd'; var EBITDA_ANUALIZA_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var EBITDA_ANUALIZA_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_JANEIRO"]))); var EBITDA_ANUALIZA_ANO_N_JANEIRO_MAX_MIN = EBITDA_ANUALIZA_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var EBITDA_ANUALIZA_ANO_N_FEVEREIRO = 'nd'; var EBITDA_ANUALIZA_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var EBITDA_ANUALIZA_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_FEVEREIRO"]))); var EBITDA_ANUALIZA_ANO_N_FEVEREIRO_MAX_MIN = EBITDA_ANUALIZA_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var EBITDA_ANUALIZA_ANO_N_MARCO = 'nd'; var EBITDA_ANUALIZA_ANO_N_MARCO_MAX_MIN = 0;  } else { var EBITDA_ANUALIZA_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_MARCO"]))); var EBITDA_ANUALIZA_ANO_N_MARCO_MAX_MIN = EBITDA_ANUALIZA_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var EBITDA_ANUALIZA_ANO_N_ABRIL = 'nd'; var EBITDA_ANUALIZA_ANO_N_ABRIL_MAX_MIN = 0;  } else { var EBITDA_ANUALIZA_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_ABRIL"]))); var EBITDA_ANUALIZA_ANO_N_ABRIL_MAX_MIN = EBITDA_ANUALIZA_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var EBITDA_ANUALIZA_ANO_N_MAIO = 'nd'; var EBITDA_ANUALIZA_ANO_N_MAIO_MAX_MIN = 0;  } else { var EBITDA_ANUALIZA_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_MAIO"]))); var EBITDA_ANUALIZA_ANO_N_MAIO_MAX_MIN = EBITDA_ANUALIZA_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var EBITDA_ANUALIZA_ANO_N_JUNHO = 'nd'; var EBITDA_ANUALIZA_ANO_N_JUNHO_MAX_MIN = 0;  } else { var EBITDA_ANUALIZA_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_JUNHO"]))); var EBITDA_ANUALIZA_ANO_N_JUNHO_MAX_MIN = EBITDA_ANUALIZA_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var EBITDA_ANUALIZA_ANO_N_JULHO = 'nd'; var EBITDA_ANUALIZA_ANO_N_JULHO_MAX_MIN = 0;  } else { var EBITDA_ANUALIZA_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_JULHO"]))); var EBITDA_ANUALIZA_ANO_N_JULHO_MAX_MIN = EBITDA_ANUALIZA_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var EBITDA_ANUALIZA_ANO_N_AGOSTO = 'nd'; var EBITDA_ANUALIZA_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var EBITDA_ANUALIZA_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_AGOSTO"]))); var EBITDA_ANUALIZA_ANO_N_AGOSTO_MAX_MIN = EBITDA_ANUALIZA_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var EBITDA_ANUALIZA_ANO_N_SETEMBRO = 'nd'; var EBITDA_ANUALIZA_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var EBITDA_ANUALIZA_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_SETEMBRO"]))); var EBITDA_ANUALIZA_ANO_N_SETEMBRO_MAX_MIN = EBITDA_ANUALIZA_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var EBITDA_ANUALIZA_ANO_N_OUTUBRO = 'nd'; var EBITDA_ANUALIZA_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var EBITDA_ANUALIZA_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_OUTUBRO"]))); var EBITDA_ANUALIZA_ANO_N_OUTUBRO_MAX_MIN = EBITDA_ANUALIZA_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var EBITDA_ANUALIZA_ANO_N_NOVEMBRO = 'nd'; var EBITDA_ANUALIZA_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var EBITDA_ANUALIZA_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_NOVEMBRO"]))); var EBITDA_ANUALIZA_ANO_N_NOVEMBRO_MAX_MIN = EBITDA_ANUALIZA_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var EBITDA_ANUALIZA_ANO_N_DEZEMBRO = 'nd'; var EBITDA_ANUALIZA_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var EBITDA_ANUALIZA_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_DEZEMBRO"]))); var EBITDA_ANUALIZA_ANO_N_DEZEMBRO_MAX_MIN = EBITDA_ANUALIZA_ANO_N_DEZEMBRO };



    var INDICADORES_Eixo_max_princ= Math.max( IND_PASS_FINANC_EBITDA_ANO_N_JANEIRO_MAX_MIN,
                       IND_PASS_FINANC_EBITDA_ANO_N_FEVEREIRO_MAX_MIN,
                       IND_PASS_FINANC_EBITDA_ANO_N_MARCO_MAX_MIN,
                       IND_PASS_FINANC_EBITDA_ANO_N_ABRIL_MAX_MIN,
                       IND_PASS_FINANC_EBITDA_ANO_N_MAIO_MAX_MIN,
                       IND_PASS_FINANC_EBITDA_ANO_N_JUNHO_MAX_MIN,
                       IND_PASS_FINANC_EBITDA_ANO_N_JULHO_MAX_MIN,
                       IND_PASS_FINANC_EBITDA_ANO_N_AGOSTO_MAX_MIN,
                       IND_PASS_FINANC_EBITDA_ANO_N_SETEMBRO_MAX_MIN,
                       IND_PASS_FINANC_EBITDA_ANO_N_OUTUBRO_MAX_MIN,
                       IND_PASS_FINANC_EBITDA_ANO_N_NOVEMBRO_MAX_MIN,
                       IND_PASS_FINANC_EBITDA_ANO_N_DEZEMBRO_MAX_MIN,

                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_JANEIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_FEVEREIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_MARCO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_ABRIL"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_MAIO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_JUNHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_JULHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_AGOSTO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_SETEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_OUTUBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_NOVEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_DEZEMBRO"]))),
                       1,
                             );
    var INDICADORES_Eixo_min_princ= Math.min(  IND_PASS_FINANC_EBITDA_ANO_N_JANEIRO_MAX_MIN,
                       IND_PASS_FINANC_EBITDA_ANO_N_FEVEREIRO_MAX_MIN,
                       IND_PASS_FINANC_EBITDA_ANO_N_MARCO_MAX_MIN,
                       IND_PASS_FINANC_EBITDA_ANO_N_ABRIL_MAX_MIN,
                       IND_PASS_FINANC_EBITDA_ANO_N_MAIO_MAX_MIN,
                       IND_PASS_FINANC_EBITDA_ANO_N_JUNHO_MAX_MIN,
                       IND_PASS_FINANC_EBITDA_ANO_N_JULHO_MAX_MIN,
                       IND_PASS_FINANC_EBITDA_ANO_N_AGOSTO_MAX_MIN,
                       IND_PASS_FINANC_EBITDA_ANO_N_SETEMBRO_MAX_MIN,
                       IND_PASS_FINANC_EBITDA_ANO_N_OUTUBRO_MAX_MIN,
                       IND_PASS_FINANC_EBITDA_ANO_N_NOVEMBRO_MAX_MIN,
                       IND_PASS_FINANC_EBITDA_ANO_N_DEZEMBRO_MAX_MIN,

                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_JANEIRO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_FEVEREIRO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_MARCO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_ABRIL"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_MAIO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_JUNHO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_JULHO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_AGOSTO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_SETEMBRO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_OUTUBRO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_NOVEMBRO"]))),
                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_DEZEMBRO"]))),

                           );


    var INDICADORES_Eixo_max_secon= Math.max(
                       IND_PASS_FINANC_ANO_N_JANEIRO_MAX_MIN , EBITDA_ANUALIZA_ANO_N_JANEIRO_MAX_MIN,
                       IND_PASS_FINANC_ANO_N_FEVEREIRO_MAX_MIN , EBITDA_ANUALIZA_ANO_N_FEVEREIRO_MAX_MIN,
                       IND_PASS_FINANC_ANO_N_MARCO_MAX_MIN , EBITDA_ANUALIZA_ANO_N_MARCO_MAX_MIN,
                       IND_PASS_FINANC_ANO_N_ABRIL_MAX_MIN , EBITDA_ANUALIZA_ANO_N_ABRIL_MAX_MIN,
                       IND_PASS_FINANC_ANO_N_MAIO_MAX_MIN ,  EBITDA_ANUALIZA_ANO_N_MAIO_MAX_MIN,
                       IND_PASS_FINANC_ANO_N_JUNHO_MAX_MIN , EBITDA_ANUALIZA_ANO_N_JUNHO_MAX_MIN,
                       IND_PASS_FINANC_ANO_N_JULHO_MAX_MIN ,  EBITDA_ANUALIZA_ANO_N_JULHO_MAX_MIN,
                       IND_PASS_FINANC_ANO_N_AGOSTO_MAX_MIN , EBITDA_ANUALIZA_ANO_N_AGOSTO_MAX_MIN,
                       IND_PASS_FINANC_ANO_N_SETEMBRO_MAX_MIN , EBITDA_ANUALIZA_ANO_N_SETEMBRO_MAX_MIN,
                       IND_PASS_FINANC_ANO_N_OUTUBRO_MAX_MIN , EBITDA_ANUALIZA_ANO_N_OUTUBRO_MAX_MIN,
                       IND_PASS_FINANC_ANO_N_NOVEMBRO_MAX_MIN , EBITDA_ANUALIZA_ANO_N_NOVEMBRO_MAX_MIN,
                       IND_PASS_FINANC_ANO_N_DEZEMBRO_MAX_MIN , EBITDA_ANUALIZA_ANO_N_DEZEMBRO_MAX_MIN,



                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_JANEIRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_FEVEREIRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_MARCO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_ABRIL"]))),@Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_MAIO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_JUNHO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_JULHO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_AGOSTO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_SETEMBRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_OUTUBRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_NOVEMBRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_DEZEMBRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_DEZEMBRO"]))),
                            1,
                            );
    var INDICADORES_Eixo_min_secon= Math.min(
                       IND_PASS_FINANC_ANO_N_JANEIRO_MAX_MIN , EBITDA_ANUALIZA_ANO_N_JANEIRO_MAX_MIN,
                       IND_PASS_FINANC_ANO_N_FEVEREIRO_MAX_MIN , EBITDA_ANUALIZA_ANO_N_FEVEREIRO_MAX_MIN,
                       IND_PASS_FINANC_ANO_N_MARCO_MAX_MIN , EBITDA_ANUALIZA_ANO_N_MARCO_MAX_MIN,
                       IND_PASS_FINANC_ANO_N_ABRIL_MAX_MIN , EBITDA_ANUALIZA_ANO_N_ABRIL_MAX_MIN,
                       IND_PASS_FINANC_ANO_N_MAIO_MAX_MIN ,  EBITDA_ANUALIZA_ANO_N_MAIO_MAX_MIN,
                       IND_PASS_FINANC_ANO_N_JUNHO_MAX_MIN , EBITDA_ANUALIZA_ANO_N_JUNHO_MAX_MIN,
                       IND_PASS_FINANC_ANO_N_JULHO_MAX_MIN ,  EBITDA_ANUALIZA_ANO_N_JULHO_MAX_MIN,
                       IND_PASS_FINANC_ANO_N_AGOSTO_MAX_MIN , EBITDA_ANUALIZA_ANO_N_AGOSTO_MAX_MIN,
                       IND_PASS_FINANC_ANO_N_SETEMBRO_MAX_MIN , EBITDA_ANUALIZA_ANO_N_SETEMBRO_MAX_MIN,
                       IND_PASS_FINANC_ANO_N_OUTUBRO_MAX_MIN , EBITDA_ANUALIZA_ANO_N_OUTUBRO_MAX_MIN,
                       IND_PASS_FINANC_ANO_N_NOVEMBRO_MAX_MIN , EBITDA_ANUALIZA_ANO_N_NOVEMBRO_MAX_MIN,
                       IND_PASS_FINANC_ANO_N_DEZEMBRO_MAX_MIN , EBITDA_ANUALIZA_ANO_N_DEZEMBRO_MAX_MIN,


                           @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_JANEIRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_FEVEREIRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_MARCO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_ABRIL"]))),@Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_MAIO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_JUNHO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_JULHO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_AGOSTO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_SETEMBRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_OUTUBRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_NOVEMBRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_DEZEMBRO"]))),@Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_DEZEMBRO"]))),


                          );

    if(INDICADORES_Eixo_min_secon==0 && INDICADORES_Eixo_min_princ==0){} else { if(INDICADORES_Eixo_min_secon==0){var INDICADORES_Eixo_min_secon=-1;} if(INDICADORES_Eixo_min_princ==0){var INDICADORES_Eixo_min_princ=-1;}}

    //NOTA TA: Aqui trato o minimo e o maximo do eixo principal
    if(Math.abs(INDICADORES_Eixo_max_princ)>=Math.abs(INDICADORES_Eixo_min_princ))
    {
        var INDICADORES_Eixo_max_princ_=(Math.ceil(INDICADORES_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(INDICADORES_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(INDICADORES_Eixo_max_princ),0).toString().length-1);
        var INDICADORES_Eixo_min_princ_= (Math.floor(INDICADORES_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(INDICADORES_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(INDICADORES_Eixo_max_princ),0).toString().length-1);
        //alert(INDICADORES_Eixo_max_princ_);
        //alert(INDICADORES_Eixo_min_princ_);
    }
    else
    {
        var INDICADORES_Eixo_max_princ_=(Math.ceil(INDICADORES_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(INDICADORES_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(INDICADORES_Eixo_min_princ),0).toString().length-1);
        var INDICADORES_Eixo_min_princ_= (Math.floor(INDICADORES_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(INDICADORES_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(INDICADORES_Eixo_min_princ),0).toString().length-1);}

    //NOTA TA: Aqui trato o minimo e o maximo do eixo secundario

    if(Math.abs(INDICADORES_Eixo_max_secon)>=Math.abs(INDICADORES_Eixo_min_secon))
    {
        var INDICADORES_Eixo_max_secon_=(Math.ceil(INDICADORES_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(INDICADORES_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(INDICADORES_Eixo_max_secon),0).toString().length-1);
        var INDICADORES_Eixo_min_secon_= (Math.floor(INDICADORES_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(INDICADORES_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(INDICADORES_Eixo_max_secon),0).toString().length-1);
        //alert(INDICADORES_Eixo_max_secon_);
        //alert(INDICADORES_Eixo_min_secon_);
    }
    else
    {
        var INDICADORES_Eixo_max_secon_=(Math.ceil(INDICADORES_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(INDICADORES_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(INDICADORES_Eixo_min_secon),0).toString().length-1);
        var INDICADORES_Eixo_min_secon_= (Math.floor(INDICADORES_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(INDICADORES_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(INDICADORES_Eixo_min_secon),0).toString().length-1);}


    if(Math.abs(INDICADORES_Eixo_min_princ)/Math.abs(INDICADORES_Eixo_max_princ)>=Math.abs(INDICADORES_Eixo_min_secon)/Math.abs(INDICADORES_Eixo_max_secon))
    { if(INDICADORES_Eixo_max_princ > 0 && INDICADORES_Eixo_min_princ <0 ){ var INDICADORES_Eixo_min_secon__=(INDICADORES_Eixo_min_princ_*INDICADORES_Eixo_max_secon_)/INDICADORES_Eixo_max_princ_;} else { var INDICADORES_Eixo_min_secon__=INDICADORES_Eixo_min_secon_;}
        if(INDICADORES_Eixo_max_secon > 0 && INDICADORES_Eixo_min_secon <0 ){ var INDICADORES_Eixo_min_princ__=(INDICADORES_Eixo_min_secon__*INDICADORES_Eixo_max_princ_)/INDICADORES_Eixo_max_secon_;} else { var INDICADORES_Eixo_min_princ__=INDICADORES_Eixo_min_princ_;}}
    else
    {if(INDICADORES_Eixo_max_secon > 0 && INDICADORES_Eixo_min_secon <0 ){ var INDICADORES_Eixo_min_princ__=(INDICADORES_Eixo_min_secon_*INDICADORES_Eixo_max_princ_)/INDICADORES_Eixo_max_secon_;} else { var INDICADORES_Eixo_min_princ__=INDICADORES_Eixo_min_princ_;}
        if(INDICADORES_Eixo_max_princ > 0 && INDICADORES_Eixo_min_princ <0 ){ var INDICADORES_Eixo_min_secon__=(INDICADORES_Eixo_min_princ__*INDICADORES_Eixo_max_secon_)/INDICADORES_Eixo_max_princ_;} else { var INDICADORES_Eixo_min_secon__=INDICADORES_Eixo_min_secon_;}
    }



    if(Math.abs(INDICADORES_Eixo_max_princ)/Math.abs(INDICADORES_Eixo_min_princ)>=Math.abs(INDICADORES_Eixo_max_secon)/Math.abs(INDICADORES_Eixo_min_secon))
    { if(INDICADORES_Eixo_min_princ > 0 && INDICADORES_Eixo_max_princ <0 ){ var INDICADORES_Eixo_max_secon__=(INDICADORES_Eixo_max_princ_*INDICADORES_Eixo_min_secon_)/INDICADORES_Eixo_min_princ_;} else { var INDICADORES_Eixo_max_secon__=INDICADORES_Eixo_max_secon_;}
        if(INDICADORES_Eixo_min_secon > 0 && INDICADORES_Eixo_max_secon <0 ){ var INDICADORES_Eixo_max_princ__=(INDICADORES_Eixo_max_secon__*INDICADORES_Eixo_min_princ_)/INDICADORES_Eixo_min_secon_;} else { var INDICADORES_Eixo_max_princ__=INDICADORES_Eixo_max_princ_;}}
    else
    {if(INDICADORES_Eixo_min_secon > 0 && INDICADORES_Eixo_max_secon <0 ){ var INDICADORES_Eixo_max_princ__=(INDICADORES_Eixo_max_secon_*INDICADORES_Eixo_min_princ_)/INDICADORES_Eixo_min_secon_;} else { var INDICADORES_Eixo_max_princ__=INDICADORES_Eixo_max_princ_;}
        if(INDICADORES_Eixo_min_princ > 0 && INDICADORES_Eixo_max_princ <0 ){ var INDICADORES_Eixo_max_secon__=(INDICADORES_Eixo_max_princ__*INDICADORES_Eixo_min_secon_)/INDICADORES_Eixo_min_princ_;} else { var INDICADORES_Eixo_max_secon__=INDICADORES_Eixo_max_secon_;}
    }


    var GRAFICO_INDICADORES_MENSAL_1=document.getElementById('GRAFICO_INDICADORES_MENSAL_1').getContext('2d');

    var GRAFICO_INDICADORES_MENSAL_1=new Chart(GRAFICO_INDICADORES_MENSAL_1, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'NºAnos' + ANO_VERSAO_REAL_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(255, 102, 0)',
                   data: [
                   IND_PASS_FINANC_EBITDA_ANO_N_JANEIRO,
                   IND_PASS_FINANC_EBITDA_ANO_N_FEVEREIRO,
                   IND_PASS_FINANC_EBITDA_ANO_N_MARCO,
                   IND_PASS_FINANC_EBITDA_ANO_N_ABRIL,
                   IND_PASS_FINANC_EBITDA_ANO_N_MAIO,
                   IND_PASS_FINANC_EBITDA_ANO_N_JUNHO,
                   IND_PASS_FINANC_EBITDA_ANO_N_JULHO,
                   IND_PASS_FINANC_EBITDA_ANO_N_AGOSTO,
                   IND_PASS_FINANC_EBITDA_ANO_N_SETEMBRO,
                   IND_PASS_FINANC_EBITDA_ANO_N_OUTUBRO,
                   IND_PASS_FINANC_EBITDA_ANO_N_NOVEMBRO,
                   IND_PASS_FINANC_EBITDA_ANO_N_DEZEMBRO,
                   ],
                   type: 'line'


               },
                {
                    label:  'PassFin' + ANO_VERSAO_REAL_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(255, 102, 0, 0.7)',
                    borderColor: 'rgba(255, 102, 0, 0.7)',
                    data: [
                  IND_PASS_FINANC_ANO_N_JANEIRO ,
                  IND_PASS_FINANC_ANO_N_FEVEREIRO ,
                  IND_PASS_FINANC_ANO_N_MARCO ,
                  IND_PASS_FINANC_ANO_N_ABRIL,
                  IND_PASS_FINANC_ANO_N_MAIO ,
                  IND_PASS_FINANC_ANO_N_JUNHO ,
                  IND_PASS_FINANC_ANO_N_JULHO ,
                  IND_PASS_FINANC_ANO_N_AGOSTO ,
                  IND_PASS_FINANC_ANO_N_SETEMBRO ,
                  IND_PASS_FINANC_ANO_N_OUTUBRO ,
                  IND_PASS_FINANC_ANO_N_NOVEMBRO ,
                  IND_PASS_FINANC_ANO_N_DEZEMBRO ,                   ],
                },
                                    {
                                        label:  'EBITDA(an)' + ANO_VERSAO_REAL_,
                                        yAxisID: 'B',
                                        backgroundColor: 'rgb(0 , 0 , 75)',
                                        borderColor: 'rgb(0 , 0 , 75)',
                                        data: [
                                           EBITDA_ANUALIZA_ANO_N_JANEIRO,
                                           EBITDA_ANUALIZA_ANO_N_FEVEREIRO,
                                           EBITDA_ANUALIZA_ANO_N_MARCO,
                                           EBITDA_ANUALIZA_ANO_N_ABRIL,
                                           EBITDA_ANUALIZA_ANO_N_MAIO,
                                           EBITDA_ANUALIZA_ANO_N_JUNHO,
                                           EBITDA_ANUALIZA_ANO_N_JULHO,
                                           EBITDA_ANUALIZA_ANO_N_AGOSTO,
                                           EBITDA_ANUALIZA_ANO_N_SETEMBRO,
                                           EBITDA_ANUALIZA_ANO_N_OUTUBRO,
                                           EBITDA_ANUALIZA_ANO_N_NOVEMBRO,
                                           EBITDA_ANUALIZA_ANO_N_DEZEMBRO,                   ],
                                    },

            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'INDICADORES',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                min:  Math.round(INDICADORES_Eixo_min_princ__,0),
                                                max:  Math.round(INDICADORES_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString()+ " ano(s)";
                                                }
                                            }
                                        },

                    { id: 'B',
                        type: 'linear',
                        position: 'right',
                        ticks: {
                            min: Math.round(INDICADORES_Eixo_min_secon__,0),
                            max:  Math.round(INDICADORES_Eixo_max_secon__,0),
                            beginAtZero: false,
                            callback: function(value, index, values) {
                                return value.toLocaleString();
                            }
                        }
                    },






                ]
            }
        },

    });

</script>

@*------------------------------------------------GRAFICO_INDICADORES_MENSAL_2-----------------------------------------------------------*@
<script>



    var GRAFICO_INDICADORES_MENSAL_2=document.getElementById('GRAFICO_INDICADORES_MENSAL_2').getContext('2d');

    var GRAFICO_INDICADORES_MENSAL_2=new Chart(GRAFICO_INDICADORES_MENSAL_2, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'NºAnos' + ANO_VERSAO_ANTE_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(135, 191 , 97)',
                   data: [
                        @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_JANEIRO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_FEVEREIRO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_MARCO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_ABRIL"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_MAIO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_JUNHO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_JULHO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_AGOSTO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_SETEMBRO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_OUTUBRO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_NOVEMBRO"]))),
                        @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_EBITDA_ANO_N_1_DEZEMBRO"]))),

                   ],
                   type: 'line'


               },
                {
                    label:  'PassFin' + ANO_VERSAO_ANTE_,
                    yAxisID: 'B',
                    backgroundColor: 'rgb(146, 208, 80)',
                    borderColor: 'rgb(146, 208, 80)',
                    data: [
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_JANEIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_FEVEREIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_MARCO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_ABRIL"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_MAIO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_JUNHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_JULHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_AGOSTO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_SETEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_OUTUBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_NOVEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["IND_PASS_FINANC_ANO_N_1_DEZEMBRO"]))),
                    ],
                },
                                    {
                                        label:  'EBITDA(an)' + ANO_VERSAO_ANTE_,
                                        yAxisID: 'B',
                                        backgroundColor: 'rgb(0 , 75 , 0)',
                                        borderColor: 'rgb(0 , 75 , 0)',
                                        data: [
                                                @Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_JANEIRO"]))),
                                                @Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_FEVEREIRO"]))),
                                                @Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_MARCO"]))),
                                                @Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_ABRIL"]))),
                                                @Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_MAIO"]))),
                                                @Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_JUNHO"]))),
                                                @Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_JULHO"]))),
                                                @Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_AGOSTO"]))),
                                                @Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_SETEMBRO"]))),
                                                @Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_OUTUBRO"]))),
                                                @Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_NOVEMBRO"]))),
                                                @Html.Raw((string.Format("{0:0}", @ViewData["EBITDA_ANUALIZA_ANO_N_1_DEZEMBRO"]))),
                                        ],
                                    },

            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'INDICADORES',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                min:  Math.round(INDICADORES_Eixo_min_princ__,0),
                                                max:  Math.round(INDICADORES_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString()+ " ano(s)";
                                                }
                                            }
                                        },

                    { id: 'B',
                        type: 'linear',
                        position: 'right',
                        ticks: {
                            min: Math.round(INDICADORES_Eixo_min_secon__,0),
                            max:  Math.round(INDICADORES_Eixo_max_secon__,0),
                            beginAtZero: false,
                            callback: function(value, index, values) {
                                return value.toLocaleString();
                            }
                        }
                    },






                ]
            }
        },

    });

</script>

@*------------------------------------------------GRAFICO_INDICADORES_COMP-----------------------------------------------------------*@
<script>



    if(@ViewData["MES_ACUM_REAL"]<1){ var IND_MARG_EBITDA_PERC_ANO_N_JANEIRO_ACUM = 'nd'; var IND_MARG_EBITDA_PERC_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var IND_MARG_EBITDA_PERC_ANO_N_JANEIRO_ACUM= @Html.Raw((string.Format("{0:0}", @ViewData["IND_MARG_EBITDA_PERC_ANO_N_JANEIRO_ACUM"]))); var IND_MARG_EBITDA_PERC_ANO_N_JANEIRO_ACUM_MAX_MIN = IND_MARG_EBITDA_PERC_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var IND_MARG_EBITDA_PERC_ANO_N_FEVEREIRO_ACUM = 'nd'; var IND_MARG_EBITDA_PERC_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var IND_MARG_EBITDA_PERC_ANO_N_FEVEREIRO_ACUM= @Html.Raw((string.Format("{0:0}", @ViewData["IND_MARG_EBITDA_PERC_ANO_N_FEVEREIRO_ACUM"]))); var IND_MARG_EBITDA_PERC_ANO_N_FEVEREIRO_ACUM_MAX_MIN = IND_MARG_EBITDA_PERC_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var IND_MARG_EBITDA_PERC_ANO_N_MARCO_ACUM = 'nd'; var IND_MARG_EBITDA_PERC_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var IND_MARG_EBITDA_PERC_ANO_N_MARCO_ACUM= @Html.Raw((string.Format("{0:0}", @ViewData["IND_MARG_EBITDA_PERC_ANO_N_MARCO_ACUM"]))); var IND_MARG_EBITDA_PERC_ANO_N_MARCO_ACUM_MAX_MIN = IND_MARG_EBITDA_PERC_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var IND_MARG_EBITDA_PERC_ANO_N_ABRIL_ACUM = 'nd'; var IND_MARG_EBITDA_PERC_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var IND_MARG_EBITDA_PERC_ANO_N_ABRIL_ACUM= @Html.Raw((string.Format("{0:0}", @ViewData["IND_MARG_EBITDA_PERC_ANO_N_ABRIL_ACUM"]))); var IND_MARG_EBITDA_PERC_ANO_N_ABRIL_ACUM_MAX_MIN = IND_MARG_EBITDA_PERC_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var IND_MARG_EBITDA_PERC_ANO_N_MAIO_ACUM = 'nd'; var IND_MARG_EBITDA_PERC_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var IND_MARG_EBITDA_PERC_ANO_N_MAIO_ACUM= @Html.Raw((string.Format("{0:0}", @ViewData["IND_MARG_EBITDA_PERC_ANO_N_MAIO_ACUM"]))); var IND_MARG_EBITDA_PERC_ANO_N_MAIO_ACUM_MAX_MIN = IND_MARG_EBITDA_PERC_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var IND_MARG_EBITDA_PERC_ANO_N_JUNHO_ACUM = 'nd'; var IND_MARG_EBITDA_PERC_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var IND_MARG_EBITDA_PERC_ANO_N_JUNHO_ACUM= @Html.Raw((string.Format("{0:0}", @ViewData["IND_MARG_EBITDA_PERC_ANO_N_JUNHO_ACUM"]))); var IND_MARG_EBITDA_PERC_ANO_N_JUNHO_ACUM_MAX_MIN = IND_MARG_EBITDA_PERC_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var IND_MARG_EBITDA_PERC_ANO_N_JULHO_ACUM = 'nd'; var IND_MARG_EBITDA_PERC_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var IND_MARG_EBITDA_PERC_ANO_N_JULHO_ACUM= @Html.Raw((string.Format("{0:0}", @ViewData["IND_MARG_EBITDA_PERC_ANO_N_JULHO_ACUM"]))); var IND_MARG_EBITDA_PERC_ANO_N_JULHO_ACUM_MAX_MIN = IND_MARG_EBITDA_PERC_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var IND_MARG_EBITDA_PERC_ANO_N_AGOSTO_ACUM = 'nd'; var IND_MARG_EBITDA_PERC_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var IND_MARG_EBITDA_PERC_ANO_N_AGOSTO_ACUM= @Html.Raw((string.Format("{0:0}", @ViewData["IND_MARG_EBITDA_PERC_ANO_N_AGOSTO_ACUM"]))); var IND_MARG_EBITDA_PERC_ANO_N_AGOSTO_ACUM_MAX_MIN = IND_MARG_EBITDA_PERC_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var IND_MARG_EBITDA_PERC_ANO_N_SETEMBRO_ACUM = 'nd'; var IND_MARG_EBITDA_PERC_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var IND_MARG_EBITDA_PERC_ANO_N_SETEMBRO_ACUM= @Html.Raw((string.Format("{0:0}", @ViewData["IND_MARG_EBITDA_PERC_ANO_N_SETEMBRO_ACUM"]))); var IND_MARG_EBITDA_PERC_ANO_N_SETEMBRO_ACUM_MAX_MIN = IND_MARG_EBITDA_PERC_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var IND_MARG_EBITDA_PERC_ANO_N_OUTUBRO_ACUM = 'nd'; var IND_MARG_EBITDA_PERC_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var IND_MARG_EBITDA_PERC_ANO_N_OUTUBRO_ACUM= @Html.Raw((string.Format("{0:0}", @ViewData["IND_MARG_EBITDA_PERC_ANO_N_OUTUBRO_ACUM"]))); var IND_MARG_EBITDA_PERC_ANO_N_OUTUBRO_ACUM_MAX_MIN = IND_MARG_EBITDA_PERC_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var IND_MARG_EBITDA_PERC_ANO_N_NOVEMBRO_ACUM = 'nd'; var IND_MARG_EBITDA_PERC_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var IND_MARG_EBITDA_PERC_ANO_N_NOVEMBRO_ACUM= @Html.Raw((string.Format("{0:0}", @ViewData["IND_MARG_EBITDA_PERC_ANO_N_NOVEMBRO_ACUM"]))); var IND_MARG_EBITDA_PERC_ANO_N_NOVEMBRO_ACUM_MAX_MIN = IND_MARG_EBITDA_PERC_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var IND_MARG_EBITDA_PERC_ANO_N_DEZEMBRO_ACUM = 'nd'; var IND_MARG_EBITDA_PERC_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var IND_MARG_EBITDA_PERC_ANO_N_DEZEMBRO_ACUM= @Html.Raw((string.Format("{0:0}", @ViewData["IND_MARG_EBITDA_PERC_ANO_N_DEZEMBRO_ACUM"]))); var IND_MARG_EBITDA_PERC_ANO_N_DEZEMBRO_ACUM_MAX_MIN = IND_MARG_EBITDA_PERC_ANO_N_DEZEMBRO_ACUM };




    var GRAFICO_INDICADORES_COMP=document.getElementById('GRAFICO_INDICADORES_COMP').getContext('2d');

    var GRAFICO_INDICADORES_COMP=new Chart(GRAFICO_INDICADORES_COMP, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'Mrg EBITDA(ac) ' + ANO_VERSAO_REAL_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(0 , 0 , 75)',
                   data: [
                   IND_MARG_EBITDA_PERC_ANO_N_JANEIRO_ACUM,
                   IND_MARG_EBITDA_PERC_ANO_N_FEVEREIRO_ACUM,
                   IND_MARG_EBITDA_PERC_ANO_N_MARCO_ACUM,
                   IND_MARG_EBITDA_PERC_ANO_N_ABRIL_ACUM,
                   IND_MARG_EBITDA_PERC_ANO_N_MAIO_ACUM,
                   IND_MARG_EBITDA_PERC_ANO_N_JUNHO_ACUM,
                   IND_MARG_EBITDA_PERC_ANO_N_JULHO_ACUM,
                   IND_MARG_EBITDA_PERC_ANO_N_AGOSTO_ACUM,
                   IND_MARG_EBITDA_PERC_ANO_N_SETEMBRO_ACUM,
                   IND_MARG_EBITDA_PERC_ANO_N_OUTUBRO_ACUM,
                   IND_MARG_EBITDA_PERC_ANO_N_NOVEMBRO_ACUM,
                   IND_MARG_EBITDA_PERC_ANO_N_DEZEMBRO_ACUM,

                   ],
                   type: 'line'


               },
                {
                    label: 'Mrg EBITDA(ac) ' + ANO_VERSAO_ANTE_,
                    yAxisID: 'A',
                    //backgroundColor: 'rgb(17, 121, 240)',
                    borderColor: 'rgb(135, 191 , 97)',
                    data: [
                      @Html.Raw((string.Format("{0:0}", @ViewData["IND_MARG_EBITDA_PERC_ANO_N_1_JANEIRO_ACUM"]))),
                      @Html.Raw((string.Format("{0:0}", @ViewData["IND_MARG_EBITDA_PERC_ANO_N_1_FEVEREIRO_ACUM"]))),
                      @Html.Raw((string.Format("{0:0}", @ViewData["IND_MARG_EBITDA_PERC_ANO_N_1_MARCO_ACUM"]))),
                      @Html.Raw((string.Format("{0:0}", @ViewData["IND_MARG_EBITDA_PERC_ANO_N_1_ABRIL_ACUM"]))),
                      @Html.Raw((string.Format("{0:0}", @ViewData["IND_MARG_EBITDA_PERC_ANO_N_1_MAIO_ACUM"]))),
                      @Html.Raw((string.Format("{0:0}", @ViewData["IND_MARG_EBITDA_PERC_ANO_N_1_JUNHO_ACUM"]))),
                      @Html.Raw((string.Format("{0:0}", @ViewData["IND_MARG_EBITDA_PERC_ANO_N_1_JULHO_ACUM"]))),
                      @Html.Raw((string.Format("{0:0}", @ViewData["IND_MARG_EBITDA_PERC_ANO_N_1_AGOSTO_ACUM"]))),
                      @Html.Raw((string.Format("{0:0}", @ViewData["IND_MARG_EBITDA_PERC_ANO_N_1_SETEMBRO_ACUM"]))),
                      @Html.Raw((string.Format("{0:0}", @ViewData["IND_MARG_EBITDA_PERC_ANO_N_1_OUTUBRO_ACUM"]))),
                      @Html.Raw((string.Format("{0:0}", @ViewData["IND_MARG_EBITDA_PERC_ANO_N_1_NOVEMBRO_ACUM"]))),
                      @Html.Raw((string.Format("{0:0}", @ViewData["IND_MARG_EBITDA_PERC_ANO_N_1_DEZEMBRO_ACUM"]))),
                    ],
                    type: 'line'
                },


            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'INDICADORES COMP',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                //min:  Math.round(CMVMC_Mensal_Eixo_min_princ__,0),
                                                //max:  Math.round(CMVMC_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString()+ "%";
                                                }
                                            }
                                        },

                    //{ id: 'B',
                    //type: 'linear',
                    //position: 'right',
                    //ticks: {
                    //    //min:  Math.round(CMVMC_Mensal_Eixo_min_princ__,0),
                    //    //max:  Math.round(CMVMC_Mensal_Eixo_max_princ__,0),
                    //    beginAtZero: true,
                    //    callback: function(value, index, values) {
                    //        return value.toLocaleString();
                    //        }
                    //    }
                    //},






                ]
            }
        },

    });

</script>

@*------------------------------------------------GRAFICO_BALANCO_DECOMPOSTO_MENSAL_1-----------------------------------------------------------*@

<script>



    if(@ViewData["MES_ACUM_REAL"]<1){ var PNC_FIN_ANO_N_JANEIRO = 0; var PNC_FIN_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var PNC_FIN_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["PNC_FIN_ANO_N_SI"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PNC_FIN_ANO_N_JANEIRO"]))); var PNC_FIN_ANO_N_JANEIRO_MAX_MIN = PNC_FIN_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var PNC_FIN_ANO_N_FEVEREIRO = 0; var PNC_FIN_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var PNC_FIN_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["PNC_FIN_ANO_N_FEVEREIRO"]))); var PNC_FIN_ANO_N_FEVEREIRO_MAX_MIN = PNC_FIN_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var PNC_FIN_ANO_N_MARCO = 0; var PNC_FIN_ANO_N_MARCO_MAX_MIN = 0;  } else { var PNC_FIN_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["PNC_FIN_ANO_N_MARCO"]))); var PNC_FIN_ANO_N_MARCO_MAX_MIN = PNC_FIN_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var PNC_FIN_ANO_N_ABRIL = 0; var PNC_FIN_ANO_N_ABRIL_MAX_MIN = 0;  } else { var PNC_FIN_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["PNC_FIN_ANO_N_ABRIL"]))); var PNC_FIN_ANO_N_ABRIL_MAX_MIN = PNC_FIN_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var PNC_FIN_ANO_N_MAIO = 0; var PNC_FIN_ANO_N_MAIO_MAX_MIN = 0;  } else { var PNC_FIN_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["PNC_FIN_ANO_N_MAIO"]))); var PNC_FIN_ANO_N_MAIO_MAX_MIN = PNC_FIN_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var PNC_FIN_ANO_N_JUNHO = 0; var PNC_FIN_ANO_N_JUNHO_MAX_MIN = 0;  } else { var PNC_FIN_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["PNC_FIN_ANO_N_JUNHO"]))); var PNC_FIN_ANO_N_JUNHO_MAX_MIN = PNC_FIN_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var PNC_FIN_ANO_N_JULHO = 0; var PNC_FIN_ANO_N_JULHO_MAX_MIN = 0;  } else { var PNC_FIN_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["PNC_FIN_ANO_N_JULHO"]))); var PNC_FIN_ANO_N_JULHO_MAX_MIN = PNC_FIN_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var PNC_FIN_ANO_N_AGOSTO = 0; var PNC_FIN_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var PNC_FIN_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["PNC_FIN_ANO_N_AGOSTO"]))); var PNC_FIN_ANO_N_AGOSTO_MAX_MIN = PNC_FIN_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var PNC_FIN_ANO_N_SETEMBRO = 0; var PNC_FIN_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var PNC_FIN_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["PNC_FIN_ANO_N_SETEMBRO"]))); var PNC_FIN_ANO_N_SETEMBRO_MAX_MIN = PNC_FIN_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var PNC_FIN_ANO_N_OUTUBRO = 0; var PNC_FIN_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var PNC_FIN_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["PNC_FIN_ANO_N_OUTUBRO"]))); var PNC_FIN_ANO_N_OUTUBRO_MAX_MIN = PNC_FIN_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var PNC_FIN_ANO_N_NOVEMBRO = 0; var PNC_FIN_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var PNC_FIN_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["PNC_FIN_ANO_N_NOVEMBRO"]))); var PNC_FIN_ANO_N_NOVEMBRO_MAX_MIN = PNC_FIN_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var PNC_FIN_ANO_N_DEZEMBRO = 0; var PNC_FIN_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var PNC_FIN_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["PNC_FIN_ANO_N_DEZEMBRO"]))); var PNC_FIN_ANO_N_DEZEMBRO_MAX_MIN = PNC_FIN_ANO_N_DEZEMBRO };

    var PNC_FIN_ANO_N_MES_ACUM = PNC_FIN_ANO_N_JANEIRO+
                                                PNC_FIN_ANO_N_FEVEREIRO+
                                                PNC_FIN_ANO_N_MARCO+
                                                PNC_FIN_ANO_N_ABRIL+
                                                PNC_FIN_ANO_N_MAIO+
                                                PNC_FIN_ANO_N_JUNHO+
                                                PNC_FIN_ANO_N_JULHO+
                                                PNC_FIN_ANO_N_AGOSTO+
                                                PNC_FIN_ANO_N_SETEMBRO+
                                                PNC_FIN_ANO_N_OUTUBRO+
                                                PNC_FIN_ANO_N_NOVEMBRO+
                                                PNC_FIN_ANO_N_DEZEMBRO;


    if(@ViewData["MES_ACUM_REAL"]<1){ var PC_FIN_ANO_N_JANEIRO = 0; var PC_FIN_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var PC_FIN_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["PC_FIN_ANO_N_SI"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PC_FIN_ANO_N_JANEIRO"]))); var PC_FIN_ANO_N_JANEIRO_MAX_MIN = PC_FIN_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var PC_FIN_ANO_N_FEVEREIRO = 0; var PC_FIN_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var PC_FIN_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["PC_FIN_ANO_N_FEVEREIRO"]))); var PC_FIN_ANO_N_FEVEREIRO_MAX_MIN = PC_FIN_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var PC_FIN_ANO_N_MARCO = 0; var PC_FIN_ANO_N_MARCO_MAX_MIN = 0;  } else { var PC_FIN_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["PC_FIN_ANO_N_MARCO"]))); var PC_FIN_ANO_N_MARCO_MAX_MIN = PC_FIN_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var PC_FIN_ANO_N_ABRIL = 0; var PC_FIN_ANO_N_ABRIL_MAX_MIN = 0;  } else { var PC_FIN_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["PC_FIN_ANO_N_ABRIL"]))); var PC_FIN_ANO_N_ABRIL_MAX_MIN = PC_FIN_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var PC_FIN_ANO_N_MAIO = 0; var PC_FIN_ANO_N_MAIO_MAX_MIN = 0;  } else { var PC_FIN_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["PC_FIN_ANO_N_MAIO"]))); var PC_FIN_ANO_N_MAIO_MAX_MIN = PC_FIN_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var PC_FIN_ANO_N_JUNHO = 0; var PC_FIN_ANO_N_JUNHO_MAX_MIN = 0;  } else { var PC_FIN_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["PC_FIN_ANO_N_JUNHO"]))); var PC_FIN_ANO_N_JUNHO_MAX_MIN = PC_FIN_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var PC_FIN_ANO_N_JULHO = 0; var PC_FIN_ANO_N_JULHO_MAX_MIN = 0;  } else { var PC_FIN_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["PC_FIN_ANO_N_JULHO"]))); var PC_FIN_ANO_N_JULHO_MAX_MIN = PC_FIN_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var PC_FIN_ANO_N_AGOSTO = 0; var PC_FIN_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var PC_FIN_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["PC_FIN_ANO_N_AGOSTO"]))); var PC_FIN_ANO_N_AGOSTO_MAX_MIN = PC_FIN_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var PC_FIN_ANO_N_SETEMBRO = 0; var PC_FIN_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var PC_FIN_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["PC_FIN_ANO_N_SETEMBRO"]))); var PC_FIN_ANO_N_SETEMBRO_MAX_MIN = PC_FIN_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var PC_FIN_ANO_N_OUTUBRO = 0; var PC_FIN_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var PC_FIN_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["PC_FIN_ANO_N_OUTUBRO"]))); var PC_FIN_ANO_N_OUTUBRO_MAX_MIN = PC_FIN_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var PC_FIN_ANO_N_NOVEMBRO = 0; var PC_FIN_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var PC_FIN_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["PC_FIN_ANO_N_NOVEMBRO"]))); var PC_FIN_ANO_N_NOVEMBRO_MAX_MIN = PC_FIN_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var PC_FIN_ANO_N_DEZEMBRO = 0; var PC_FIN_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var PC_FIN_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["PC_FIN_ANO_N_DEZEMBRO"]))); var PC_FIN_ANO_N_DEZEMBRO_MAX_MIN = PC_FIN_ANO_N_DEZEMBRO };

    var PC_FIN_ANO_N_MES_ACUM = PC_FIN_ANO_N_JANEIRO+
                                                PC_FIN_ANO_N_FEVEREIRO+
                                                PC_FIN_ANO_N_MARCO+
                                                PC_FIN_ANO_N_ABRIL+
                                                PC_FIN_ANO_N_MAIO+
                                                PC_FIN_ANO_N_JUNHO+
                                                PC_FIN_ANO_N_JULHO+
                                                PC_FIN_ANO_N_AGOSTO+
                                                PC_FIN_ANO_N_SETEMBRO+
                                                PC_FIN_ANO_N_OUTUBRO+
                                                PC_FIN_ANO_N_NOVEMBRO+
                                                PC_FIN_ANO_N_DEZEMBRO;


    if(@ViewData["MES_ACUM_REAL"]<1){ var PNC_FIN_ANO_N_1_JANEIRO = 0; var PNC_FIN_ANO_N_1_JANEIRO_MAX_MIN = 0;  } else { var PNC_FIN_ANO_N_1_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["PNC_FIN_ANO_N_1_SI"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PNC_FIN_ANO_N_1_JANEIRO"]))); var PNC_FIN_ANO_N_1_JANEIRO_MAX_MIN = PNC_FIN_ANO_N_1_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var PNC_FIN_ANO_N_1_FEVEREIRO = 0; var PNC_FIN_ANO_N_1_FEVEREIRO_MAX_MIN = 0;  } else { var PNC_FIN_ANO_N_1_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["PNC_FIN_ANO_N_1_FEVEREIRO"]))); var PNC_FIN_ANO_N_1_FEVEREIRO_MAX_MIN = PNC_FIN_ANO_N_1_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var PNC_FIN_ANO_N_1_MARCO = 0; var PNC_FIN_ANO_N_1_MARCO_MAX_MIN = 0;  } else { var PNC_FIN_ANO_N_1_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["PNC_FIN_ANO_N_1_MARCO"]))); var PNC_FIN_ANO_N_1_MARCO_MAX_MIN = PNC_FIN_ANO_N_1_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var PNC_FIN_ANO_N_1_ABRIL = 0; var PNC_FIN_ANO_N_1_ABRIL_MAX_MIN = 0;  } else { var PNC_FIN_ANO_N_1_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["PNC_FIN_ANO_N_1_ABRIL"]))); var PNC_FIN_ANO_N_1_ABRIL_MAX_MIN = PNC_FIN_ANO_N_1_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var PNC_FIN_ANO_N_1_MAIO = 0; var PNC_FIN_ANO_N_1_MAIO_MAX_MIN = 0;  } else { var PNC_FIN_ANO_N_1_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["PNC_FIN_ANO_N_1_MAIO"]))); var PNC_FIN_ANO_N_1_MAIO_MAX_MIN = PNC_FIN_ANO_N_1_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var PNC_FIN_ANO_N_1_JUNHO = 0; var PNC_FIN_ANO_N_1_JUNHO_MAX_MIN = 0;  } else { var PNC_FIN_ANO_N_1_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["PNC_FIN_ANO_N_1_JUNHO"]))); var PNC_FIN_ANO_N_1_JUNHO_MAX_MIN = PNC_FIN_ANO_N_1_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var PNC_FIN_ANO_N_1_JULHO = 0; var PNC_FIN_ANO_N_1_JULHO_MAX_MIN = 0;  } else { var PNC_FIN_ANO_N_1_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["PNC_FIN_ANO_N_1_JULHO"]))); var PNC_FIN_ANO_N_1_JULHO_MAX_MIN = PNC_FIN_ANO_N_1_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var PNC_FIN_ANO_N_1_AGOSTO = 0; var PNC_FIN_ANO_N_1_AGOSTO_MAX_MIN = 0;  } else { var PNC_FIN_ANO_N_1_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["PNC_FIN_ANO_N_1_AGOSTO"]))); var PNC_FIN_ANO_N_1_AGOSTO_MAX_MIN = PNC_FIN_ANO_N_1_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var PNC_FIN_ANO_N_1_SETEMBRO = 0; var PNC_FIN_ANO_N_1_SETEMBRO_MAX_MIN = 0;  } else { var PNC_FIN_ANO_N_1_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["PNC_FIN_ANO_N_1_SETEMBRO"]))); var PNC_FIN_ANO_N_1_SETEMBRO_MAX_MIN = PNC_FIN_ANO_N_1_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var PNC_FIN_ANO_N_1_OUTUBRO = 0; var PNC_FIN_ANO_N_1_OUTUBRO_MAX_MIN = 0;  } else { var PNC_FIN_ANO_N_1_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["PNC_FIN_ANO_N_1_OUTUBRO"]))); var PNC_FIN_ANO_N_1_OUTUBRO_MAX_MIN = PNC_FIN_ANO_N_1_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var PNC_FIN_ANO_N_1_NOVEMBRO = 0; var PNC_FIN_ANO_N_1_NOVEMBRO_MAX_MIN = 0;  } else { var PNC_FIN_ANO_N_1_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["PNC_FIN_ANO_N_1_NOVEMBRO"]))); var PNC_FIN_ANO_N_1_NOVEMBRO_MAX_MIN = PNC_FIN_ANO_N_1_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var PNC_FIN_ANO_N_1_DEZEMBRO = 0; var PNC_FIN_ANO_N_1_DEZEMBRO_MAX_MIN = 0;  } else { var PNC_FIN_ANO_N_1_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["PNC_FIN_ANO_N_1_DEZEMBRO"]))); var PNC_FIN_ANO_N_1_DEZEMBRO_MAX_MIN = PNC_FIN_ANO_N_1_DEZEMBRO };

    var PNC_FIN_ANO_N_1_MES_ACUM = PNC_FIN_ANO_N_1_JANEIRO+
                                                PNC_FIN_ANO_N_1_FEVEREIRO+
                                                PNC_FIN_ANO_N_1_MARCO+
                                                PNC_FIN_ANO_N_1_ABRIL+
                                                PNC_FIN_ANO_N_1_MAIO+
                                                PNC_FIN_ANO_N_1_JUNHO+
                                                PNC_FIN_ANO_N_1_JULHO+
                                                PNC_FIN_ANO_N_1_AGOSTO+
                                                PNC_FIN_ANO_N_1_SETEMBRO+
                                                PNC_FIN_ANO_N_1_OUTUBRO+
                                                PNC_FIN_ANO_N_1_NOVEMBRO+
                                                PNC_FIN_ANO_N_1_DEZEMBRO;


    if(@ViewData["MES_ACUM_REAL"]<1){ var PC_FIN_ANO_N_1_JANEIRO = 0; var PC_FIN_ANO_N_1_JANEIRO_MAX_MIN = 0;  } else { var PC_FIN_ANO_N_1_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["PC_FIN_ANO_N_1_SI"])))+@Html.Raw((string.Format("{0:0}", @ViewData["PC_FIN_ANO_N_1_JANEIRO"]))); var PC_FIN_ANO_N_1_JANEIRO_MAX_MIN = PC_FIN_ANO_N_1_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var PC_FIN_ANO_N_1_FEVEREIRO = 0; var PC_FIN_ANO_N_1_FEVEREIRO_MAX_MIN = 0;  } else { var PC_FIN_ANO_N_1_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["PC_FIN_ANO_N_1_FEVEREIRO"]))); var PC_FIN_ANO_N_1_FEVEREIRO_MAX_MIN = PC_FIN_ANO_N_1_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var PC_FIN_ANO_N_1_MARCO = 0; var PC_FIN_ANO_N_1_MARCO_MAX_MIN = 0;  } else { var PC_FIN_ANO_N_1_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["PC_FIN_ANO_N_1_MARCO"]))); var PC_FIN_ANO_N_1_MARCO_MAX_MIN = PC_FIN_ANO_N_1_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var PC_FIN_ANO_N_1_ABRIL = 0; var PC_FIN_ANO_N_1_ABRIL_MAX_MIN = 0;  } else { var PC_FIN_ANO_N_1_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["PC_FIN_ANO_N_1_ABRIL"]))); var PC_FIN_ANO_N_1_ABRIL_MAX_MIN = PC_FIN_ANO_N_1_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var PC_FIN_ANO_N_1_MAIO = 0; var PC_FIN_ANO_N_1_MAIO_MAX_MIN = 0;  } else { var PC_FIN_ANO_N_1_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["PC_FIN_ANO_N_1_MAIO"]))); var PC_FIN_ANO_N_1_MAIO_MAX_MIN = PC_FIN_ANO_N_1_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var PC_FIN_ANO_N_1_JUNHO = 0; var PC_FIN_ANO_N_1_JUNHO_MAX_MIN = 0;  } else { var PC_FIN_ANO_N_1_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["PC_FIN_ANO_N_1_JUNHO"]))); var PC_FIN_ANO_N_1_JUNHO_MAX_MIN = PC_FIN_ANO_N_1_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var PC_FIN_ANO_N_1_JULHO = 0; var PC_FIN_ANO_N_1_JULHO_MAX_MIN = 0;  } else { var PC_FIN_ANO_N_1_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["PC_FIN_ANO_N_1_JULHO"]))); var PC_FIN_ANO_N_1_JULHO_MAX_MIN = PC_FIN_ANO_N_1_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var PC_FIN_ANO_N_1_AGOSTO = 0; var PC_FIN_ANO_N_1_AGOSTO_MAX_MIN = 0;  } else { var PC_FIN_ANO_N_1_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["PC_FIN_ANO_N_1_AGOSTO"]))); var PC_FIN_ANO_N_1_AGOSTO_MAX_MIN = PC_FIN_ANO_N_1_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var PC_FIN_ANO_N_1_SETEMBRO = 0; var PC_FIN_ANO_N_1_SETEMBRO_MAX_MIN = 0;  } else { var PC_FIN_ANO_N_1_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["PC_FIN_ANO_N_1_SETEMBRO"]))); var PC_FIN_ANO_N_1_SETEMBRO_MAX_MIN = PC_FIN_ANO_N_1_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var PC_FIN_ANO_N_1_OUTUBRO = 0; var PC_FIN_ANO_N_1_OUTUBRO_MAX_MIN = 0;  } else { var PC_FIN_ANO_N_1_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["PC_FIN_ANO_N_1_OUTUBRO"]))); var PC_FIN_ANO_N_1_OUTUBRO_MAX_MIN = PC_FIN_ANO_N_1_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var PC_FIN_ANO_N_1_NOVEMBRO = 0; var PC_FIN_ANO_N_1_NOVEMBRO_MAX_MIN = 0;  } else { var PC_FIN_ANO_N_1_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["PC_FIN_ANO_N_1_NOVEMBRO"]))); var PC_FIN_ANO_N_1_NOVEMBRO_MAX_MIN = PC_FIN_ANO_N_1_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var PC_FIN_ANO_N_1_DEZEMBRO = 0; var PC_FIN_ANO_N_1_DEZEMBRO_MAX_MIN = 0;  } else { var PC_FIN_ANO_N_1_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["PC_FIN_ANO_N_1_DEZEMBRO"]))); var PC_FIN_ANO_N_1_DEZEMBRO_MAX_MIN = PC_FIN_ANO_N_1_DEZEMBRO };

    var PC_FIN_ANO_N_1_MES_ACUM = PC_FIN_ANO_N_1_JANEIRO+
                                                PC_FIN_ANO_N_1_FEVEREIRO+
                                                PC_FIN_ANO_N_1_MARCO+
                                                PC_FIN_ANO_N_1_ABRIL+
                                                PC_FIN_ANO_N_1_MAIO+
                                                PC_FIN_ANO_N_1_JUNHO+
                                                PC_FIN_ANO_N_1_JULHO+
                                                PC_FIN_ANO_N_1_AGOSTO+
                                                PC_FIN_ANO_N_1_SETEMBRO+
                                                PC_FIN_ANO_N_1_OUTUBRO+
                                                PC_FIN_ANO_N_1_NOVEMBRO+
                                                PC_FIN_ANO_N_1_DEZEMBRO;




    var GRAFICO_BALANCO_DECOMPOSTO_MENSAL_1=document.getElementById('GRAFICO_BALANCO_DECOMPOSTO_MENSAL_1').getContext('2d');

    //NOTA TA: Aqui começo a construção do gráfico

    var GRAFICO_BALANCO_DECOMPOSTO_MENSAL_1=new Chart(GRAFICO_BALANCO_DECOMPOSTO_MENSAL_1, {
        // The type of chart we want to create
        type: 'doughnut',

        // The data for our dataset
        data: {
            labels: ['Pass Fin LP ' +@ViewData["MES_ACUM_REAL"]+'/' + ANO_VERSAO_REAL_, 'Pass Fin CP ' +@ViewData["MES_ACUM_REAL"]+'/' + ANO_VERSAO_REAL_],
            datasets: [
               {
                   //label: 'EBITDA ' + ANO_VERSAO_REAL_,
                   //yAxisID: 'A',
                   backgroundColor: ["rgba(204, 0, 0, 0.5)", "rgb(102, 0 , 0)"],
                   //borderColor: 'rgb(201, 10, 10)',
                   data: [
                   PNC_FIN_ANO_N_MES_ACUM,
                   PC_FIN_ANO_N_MES_ACUM,

                   ],



               },


            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'BALANCO_DECOMPOSTO',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },



        },

    });

</script>

@*------------------------------------------------GRAFICO_BALANCO_DECOMPOSTO_MENSAL_2-----------------------------------------------------------*@

<script>

var GRAFICO_BALANCO_DECOMPOSTO_MENSAL_2=document.getElementById('GRAFICO_BALANCO_DECOMPOSTO_MENSAL_2').getContext('2d');

    //NOTA TA: Aqui começo a construção do gráfico

    var GRAFICO_BALANCO_DECOMPOSTO_MENSAL_2=new Chart(GRAFICO_BALANCO_DECOMPOSTO_MENSAL_2, {
        // The type of chart we want to create
        type: 'doughnut',

        // The data for our dataset
        data: {
            labels: ['Pass Fin LP ' +@ViewData["MES_ACUM_REAL"]+'/' + ANO_VERSAO_ANTE_, 'Pass Fin CP ' +@ViewData["MES_ACUM_REAL"]+'/' + ANO_VERSAO_ANTE_],
            datasets: [
               {
                   //label: 'EBITDA ' + ANO_VERSAO_REAL_,
                   //yAxisID: 'A',
                   backgroundColor: ["rgb(146, 208, 80)", "rgb(0 , 75 , 0)"],
                   //borderColor: 'rgb(201, 10, 10)',
                   data: [
                   PNC_FIN_ANO_N_1_MES_ACUM,
                   PC_FIN_ANO_N_1_MES_ACUM,

                   ],



               },


            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'BALANCO_DECOMPOSTO',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },



        },

    });

</script>

@*------------------------------------------------GRAFICO_ESTADO_MENSAL_1-----------------------------------------------------------*@

<script>
    if(@ViewData["MES_ACUM_REAL"]<1){ var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JANEIRO = 'nd'; var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JANEIRO"]))); var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JANEIRO_MAX_MIN = AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_FEVEREIRO = 'nd'; var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_FEVEREIRO"]))); var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_FEVEREIRO_MAX_MIN = AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_MARCO = 'nd'; var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_MARCO_MAX_MIN = 0;  } else { var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_MARCO"]))); var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_MARCO_MAX_MIN = AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_ABRIL = 'nd'; var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_ABRIL_MAX_MIN = 0;  } else { var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_ABRIL"]))); var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_ABRIL_MAX_MIN = AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_MAIO = 'nd'; var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_MAIO_MAX_MIN = 0;  } else { var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_MAIO"]))); var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_MAIO_MAX_MIN = AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JUNHO = 'nd'; var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JUNHO_MAX_MIN = 0;  } else { var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JUNHO"]))); var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JUNHO_MAX_MIN = AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JULHO = 'nd'; var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JULHO_MAX_MIN = 0;  } else { var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JULHO"]))); var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JULHO_MAX_MIN = AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_AGOSTO = 'nd'; var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_AGOSTO"]))); var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_AGOSTO_MAX_MIN = AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_SETEMBRO = 'nd'; var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_SETEMBRO"]))); var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_SETEMBRO_MAX_MIN = AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_OUTUBRO = 'nd'; var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_OUTUBRO"]))); var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_OUTUBRO_MAX_MIN = AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_NOVEMBRO = 'nd'; var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_NOVEMBRO"]))); var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_NOVEMBRO_MAX_MIN = AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_DEZEMBRO = 'nd'; var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_DEZEMBRO"]))); var AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_DEZEMBRO_MAX_MIN = AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_DEZEMBRO };



    var ESTADO_Mensal_Eixo_max_princ= Math.max(
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JANEIRO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_FEVEREIRO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_MARCO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_ABRIL_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_MAIO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JUNHO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JULHO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_AGOSTO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_SETEMBRO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_OUTUBRO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_NOVEMBRO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_DEZEMBRO_MAX_MIN,

                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_DEZEMBRO"]))),
                             );
    var ESTADO_Mensal_Eixo_min_princ= Math.min(

                                            AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JANEIRO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_FEVEREIRO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_MARCO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_ABRIL_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_MAIO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JUNHO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JULHO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_AGOSTO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_SETEMBRO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_OUTUBRO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_NOVEMBRO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_DEZEMBRO_MAX_MIN,

                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_DEZEMBRO"]))),
                           );
    var ESTADO_Mensal_Eixo_max_secon= Math.max(
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JANEIRO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_FEVEREIRO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_MARCO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_ABRIL_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_MAIO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JUNHO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JULHO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_AGOSTO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_SETEMBRO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_OUTUBRO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_NOVEMBRO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_DEZEMBRO_MAX_MIN,

                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_DEZEMBRO"]))),

                            );
    var ESTADO_Mensal_Eixo_min_secon= Math.min(
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JANEIRO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_FEVEREIRO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_MARCO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_ABRIL_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_MAIO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JUNHO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JULHO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_AGOSTO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_SETEMBRO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_OUTUBRO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_NOVEMBRO_MAX_MIN,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_DEZEMBRO_MAX_MIN,

                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_DEZEMBRO"]))),

                          );

    //NOTA TA: Aqui trato o minimo e o maximo do eixo principal
    if(Math.abs(ESTADO_Mensal_Eixo_max_princ)>=Math.abs(ESTADO_Mensal_Eixo_min_princ))
    {
        var ESTADO_Mensal_Eixo_max_princ_=(Math.ceil(ESTADO_Mensal_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(ESTADO_Mensal_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(ESTADO_Mensal_Eixo_max_princ),0).toString().length-1);
        var ESTADO_Mensal_Eixo_min_princ_= (Math.floor(ESTADO_Mensal_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(ESTADO_Mensal_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(ESTADO_Mensal_Eixo_max_princ),0).toString().length-1);
        //alert(ESTADO_Mensal_Eixo_max_princ_);
        //alert(ESTADO_Mensal_Eixo_min_princ_);
    }
    else
    {
        var ESTADO_Mensal_Eixo_max_princ_=(Math.ceil(ESTADO_Mensal_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(ESTADO_Mensal_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(ESTADO_Mensal_Eixo_min_princ),0).toString().length-1);
        var ESTADO_Mensal_Eixo_min_princ_= (Math.floor(ESTADO_Mensal_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(ESTADO_Mensal_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(ESTADO_Mensal_Eixo_min_princ),0).toString().length-1);}

    //NOTA TA: Aqui trato o minimo e o maximo do eixo secundario

    if(Math.abs(ESTADO_Mensal_Eixo_max_secon)>=Math.abs(ESTADO_Mensal_Eixo_min_secon))
    {
        var ESTADO_Mensal_Eixo_max_secon_=(Math.ceil(ESTADO_Mensal_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(ESTADO_Mensal_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(ESTADO_Mensal_Eixo_max_secon),0).toString().length-1);
        var ESTADO_Mensal_Eixo_min_secon_= (Math.floor(ESTADO_Mensal_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(ESTADO_Mensal_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(ESTADO_Mensal_Eixo_max_secon),0).toString().length-1);
        //alert(ESTADO_Mensal_Eixo_max_secon_);
        //alert(ESTADO_Mensal_Eixo_min_secon_);
    }
    else
    {
        var ESTADO_Mensal_Eixo_max_secon_=(Math.ceil(ESTADO_Mensal_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(ESTADO_Mensal_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(ESTADO_Mensal_Eixo_min_secon),0).toString().length-1);
        var ESTADO_Mensal_Eixo_min_secon_= (Math.floor(ESTADO_Mensal_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(ESTADO_Mensal_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(ESTADO_Mensal_Eixo_min_secon),0).toString().length-1);}


    if(Math.abs(ESTADO_Mensal_Eixo_min_princ)/Math.abs(ESTADO_Mensal_Eixo_max_princ)>=Math.abs(ESTADO_Mensal_Eixo_min_secon)/Math.abs(ESTADO_Mensal_Eixo_max_secon))
    { if(ESTADO_Mensal_Eixo_max_princ > 0 && ESTADO_Mensal_Eixo_min_princ <0 ){ var ESTADO_Mensal_Eixo_min_secon__=(ESTADO_Mensal_Eixo_min_princ_*ESTADO_Mensal_Eixo_max_secon_)/ESTADO_Mensal_Eixo_max_princ_;} else { var ESTADO_Mensal_Eixo_min_secon__=ESTADO_Mensal_Eixo_min_secon_;}
        if(ESTADO_Mensal_Eixo_max_secon > 0 && ESTADO_Mensal_Eixo_min_secon <0 ){ var ESTADO_Mensal_Eixo_min_princ__=(ESTADO_Mensal_Eixo_min_secon__*ESTADO_Mensal_Eixo_max_princ_)/ESTADO_Mensal_Eixo_max_secon_;} else { var ESTADO_Mensal_Eixo_min_princ__=ESTADO_Mensal_Eixo_min_princ_;}}
    else
    {if(ESTADO_Mensal_Eixo_max_secon > 0 && ESTADO_Mensal_Eixo_min_secon <0 ){ var ESTADO_Mensal_Eixo_min_princ__=(ESTADO_Mensal_Eixo_min_secon_*ESTADO_Mensal_Eixo_max_princ_)/ESTADO_Mensal_Eixo_max_secon_;} else { var ESTADO_Mensal_Eixo_min_princ__=ESTADO_Mensal_Eixo_min_princ_;}
        if(ESTADO_Mensal_Eixo_max_princ > 0 && ESTADO_Mensal_Eixo_min_princ <0 ){ var ESTADO_Mensal_Eixo_min_secon__=(ESTADO_Mensal_Eixo_min_princ__*ESTADO_Mensal_Eixo_max_secon_)/ESTADO_Mensal_Eixo_max_princ_;} else { var ESTADO_Mensal_Eixo_min_secon__=ESTADO_Mensal_Eixo_min_secon_;}
    }



    if(Math.abs(ESTADO_Mensal_Eixo_max_princ)/Math.abs(ESTADO_Mensal_Eixo_min_princ)>=Math.abs(ESTADO_Mensal_Eixo_max_secon)/Math.abs(ESTADO_Mensal_Eixo_min_secon))
    { if(ESTADO_Mensal_Eixo_min_princ > 0 && ESTADO_Mensal_Eixo_max_princ <0 ){ var ESTADO_Mensal_Eixo_max_secon__=(ESTADO_Mensal_Eixo_max_princ_*ESTADO_Mensal_Eixo_min_secon_)/ESTADO_Mensal_Eixo_min_princ_;} else { var ESTADO_Mensal_Eixo_max_secon__=ESTADO_Mensal_Eixo_max_secon_;}
        if(ESTADO_Mensal_Eixo_min_secon > 0 && ESTADO_Mensal_Eixo_max_secon <0 ){ var ESTADO_Mensal_Eixo_max_princ__=(ESTADO_Mensal_Eixo_max_secon__*ESTADO_Mensal_Eixo_min_princ_)/ESTADO_Mensal_Eixo_min_secon_;} else { var ESTADO_Mensal_Eixo_max_princ__=ESTADO_Mensal_Eixo_max_princ_;}}
    else
    {if(ESTADO_Mensal_Eixo_min_secon > 0 && ESTADO_Mensal_Eixo_max_secon <0 ){ var ESTADO_Mensal_Eixo_max_princ__=(ESTADO_Mensal_Eixo_max_secon_*ESTADO_Mensal_Eixo_min_princ_)/ESTADO_Mensal_Eixo_min_secon_;} else { var ESTADO_Mensal_Eixo_max_princ__=ESTADO_Mensal_Eixo_max_princ_;}
        if(ESTADO_Mensal_Eixo_min_princ > 0 && ESTADO_Mensal_Eixo_max_princ <0 ){ var ESTADO_Mensal_Eixo_max_secon__=(ESTADO_Mensal_Eixo_max_princ__*ESTADO_Mensal_Eixo_min_secon_)/ESTADO_Mensal_Eixo_min_princ_;} else { var ESTADO_Mensal_Eixo_max_secon__=ESTADO_Mensal_Eixo_max_secon_;}
    }


    

    var GRAFICO_ESTADO_MENSAL_1=document.getElementById('GRAFICO_ESTADO_MENSAL_1').getContext('2d');

    var GRAFICO_ESTADO_MENSAL_1=new Chart(GRAFICO_ESTADO_MENSAL_1, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'IRC Estimado(ac) ' + ANO_VERSAO_REAL_ ,
                   yAxisID: 'A',
                   backgroundColor: 'rgba(135,31,120,0.7)',
                   borderColor: 'rgba(135,31,120,0.7)',
                   data: [
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JANEIRO,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_FEVEREIRO,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_MARCO,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_ABRIL,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_MAIO,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JUNHO,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_JULHO,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_AGOSTO,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_SETEMBRO,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_OUTUBRO,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_NOVEMBRO,
                       AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_DEZEMBRO,

                   ],
                   type: 'line'


               },
            


            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'ESTADO MENSAL',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                min:  Math.round(ESTADO_Mensal_Eixo_min_princ__,0),
                                                max:  Math.round(ESTADO_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString();
                                                }
                                            }
                                        },

                    //{ id: 'B',
                    //type: 'linear',
                    //position: 'right',
                    //ticks: {
                    //    //min:  Math.round(GASTOS_PESSOAL_Mensal_Eixo_min_princ__,0),
                    //    //max:  Math.round(GASTOS_PESSOAL_Mensal_Eixo_max_princ__,0),
                    //    beginAtZero: true,
                    //    callback: function(value, index, values) {
                    //        return value.toLocaleString();
                    //        }
                    //    }
                    //},






                ]
            }
        },

    });
</script>

<script>

    var GRAFICO_ESTADO_MENSAL_2=document.getElementById('GRAFICO_ESTADO_MENSAL_2').getContext('2d');

    var GRAFICO_ESTADO_MENSAL_2=new Chart(GRAFICO_ESTADO_MENSAL_2, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'IRC Estimado(ac) ' + ANO_VERSAO_ANTE_ ,
                   yAxisID: 'A',
                   backgroundColor: 'rgb(146, 208, 80)',
                   borderColor: 'rgb(146, 208, 80)',
                   data: [
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["AUX_IMP_REND_ESTIMADO_ACUM_ANO_N_1_DEZEMBRO"]))),

                   ],
                   type: 'line'


               },



            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'ESTADO MENSAL',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                min:  Math.round(ESTADO_Mensal_Eixo_min_princ__,0),
                                                max:  Math.round(ESTADO_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString();
                                                }
                                            }
                                        },

                    //{ id: 'B',
                    //type: 'linear',
                    //position: 'right',
                    //ticks: {
                    //    //min:  Math.round(GASTOS_PESSOAL_Mensal_Eixo_min_princ__,0),
                    //    //max:  Math.round(GASTOS_PESSOAL_Mensal_Eixo_max_princ__,0),
                    //    beginAtZero: true,
                    //    callback: function(value, index, values) {
                    //        return value.toLocaleString();
                    //        }
                    //    }
                    //},






                ]
            }
        },

    });

</script>


<script>





</script>

