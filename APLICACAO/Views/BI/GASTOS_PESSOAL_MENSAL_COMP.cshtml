@{
    ViewBag.Title = "GASTOS_PESSOAL_MENSAL_COMP";
}


<style id="ccs_style"  type="text/css">
    .webgrid-table
    {
        font-family: "Trebuchet MS" , Arial, Helvetica, sans-serif;
        font-size: 13px;
        width: 100%;
        display: table;
        border: solid 1px #FFFFFF;
        background-color: white;
        text-align: right;
        
    }
    .webgrid-table td, th
    {
             
        border: solid 1px #FFFFFF;
        padding: 3px 7px 2px;
         text-align: right;
    }
    .webgrid-header
    {
      padding: 6px 5px;
      text-align: center;
      background-color: #e8eef4;
      border-bottom: 2px solid #A4A4A4;
      height: 60px;

    }
        .webgrid-header_
    {
      padding: 6px 5px;
      text-align: center;
      background-color: #e8eef4;
      border-bottom: 2px solid #A4A4A4;
      height: 30px;

    }
    .webgrid-footer
    {
    }
    .webgrid-row-style
    {
        text-align: right;
        padding: 3px 7px 2px;
    }
    .webgrid-rubrica
    {
         text-align: right;
        background-color: #EAF2D3;
        padding: 3px 7px 2px;

    }
        .webgrid-total
    {
         text-align: right;
        background-color: #EAF2D3;
        padding: 3px 7px 2px;
    }
.webgrid-selected-row
    {
        text-align: right;   
        border: solid 1px #FFFFFF;
        padding: 3px 7px 2px;
    }
.Webgrid_col_data
    {
  text-align: center;
    }
    .input {
     width: 50px;
     height: 25px;

        text-align: justify;
        background-color: #EAF2D3;
        padding: 3px 4px 2px;
       text-overflow:clip;
    
    }
        .GRAVAR
    {
        font-family: "Trebuchet MS" , Arial, Helvetica, sans-serif;
        font-size: 15px;
        color:#eaf2d3;
         background-color: #d2d4f1        
    }
    .campocalc_resultado  {
         background-color: #E3DFFF;
         text-align: center;
    }
  .oculta_na_impressao {
                
        height: 30px;
        display:none;
    }
             .titulos_mapas {
        background-color: #7F7F7F;
        text-align: center;
        color: #FFFFFF;
        vertical-align: middle;
        font-size: 22px;
        font-weight: bold;
    }
            .page-breaker {
   display: block;
   clear: both;
   page-break-after: always;
}
      /*NOTA table::after CSS param TOOLTIPS*/

.tooltip {
  position: relative;
  /*display: inline-block;*/
  /*border-bottom: 1px dotted black;*/
}

.tooltip .tooltiptext {
  visibility: hidden;
  /*width: 125px;*/
  width: 240px;
  background-color: #555;
  color: #fff;
  text-align: center;
  border-radius: 6px;
  padding: 5px 0;
  position: absolute;
  z-index: 1;
  bottom: 125%;
  left: 50%;
  /*margin-left: -60px;*/
  margin-left: -10px;
  opacity: 0;
  transition: opacity 1s;
}

.tooltip .tooltiptext::after {
  content: "";
  position: absolute;
  top: 100%;
  /*left: 50%;*/
  left: 5%;
  margin-left: -5px;
  border-width: 5px;
  border-style: solid;
  border-color: #555 transparent transparent transparent;
}

.tooltip:hover .tooltiptext {
  visibility: visible;
  opacity: 1;
}

.calcular
{display:none;
 width:100%;
 text-align:center;
 
}
/*NOTA table::AQUI DEFINO  O  STYLE DOS BOTÕES*/

.btn:focus, .btn::-moz-focus-inner{
  outline:none;
  border:none;
}
.btn{
  font-family: arial;
  font-size:14px;
  text-transform: uppercase;
  font-weight:700;
  border:none;
  padding:10px;
  cursor: pointer;
  display:inline-block;
  text-decoration: none;
  width: auto;
}
.btn-green{
  background:green;
  color:#fff;
   border:#fff;
  box-shadow:0 5px 0 #006000 /*rgba(0, 96, 0, 0.6)*/;
    width: auto;
}
.btn-green:hover{
  background:#006000;
  box-shadow:0 5px 0 #003f00;
}
.btn-blue{
  background:rgba(0,0,139, 0.6);
  color:#fff;
   border:#fff;
  box-shadow:0 5px 0 rgba(0,0,59, 0.6);
    width: auto;
}
.btn-blue:hover{
  background:#2153a2;
  box-shadow:0 5px 0 #00003B;
}
.btn-purple{
  background:purple; opacity:0.6;
  border:#fff;
  color:#fff;
  box-shadow:0 5px 0 #670167 /*rgba(103, 1, 103, 0.6)*/;
    width: auto;
}
.btn-purple:hover{
  background:#670167;
  box-shadow:0 5px 0 #470047;
}
.btn-red{
  background:red; opacity:0.7;
  border:#fff;
  color:#fff;
  box-shadow:0 5px 0 #d20000 /*rgba(210, 0, 0, 0.6)*/;
    width: auto;
}
.btn-red:hover{
  background:#d20000;
  box-shadow:0 5px 0 #b00000;
}
.btn-orange{
  background:rgb(204 , 112 , 0); opacity:0.6;
  border:#fff;
  color:#fff;
  box-shadow:0 5px 0 rgb(204 , 112 , 0)/*rgba(210, 0, 0, 0.6)*/;
    width: auto;
}
.btn-orange:hover{
  background:rgb(204 , 112 , 0);
  box-shadow:0 5px 0 rgb(204 , 112 , 0);
}
.btn-brown{
  background:rgb(102, 0, 0); opacity:0.6;
  border:#fff;
  color:#fff;
  box-shadow:0 5px 0 rgb(102, 0, 0)/*rgba(210, 0, 0, 0.6)*/;
    width: auto;
}
.btn-brown:hover{
  background:rgb(102, 0, 0);
  box-shadow:0 5px 0 rgb(102, 0, 0);
}
.btn-green:active,.btn-blue:active, .btn-purple:active, .btn-red:active, .btn-orange:active, .btn-brown:active{
  position:relative;
  top:5px;
  box-shadow:inherit;
}
        option {
   direction: rtl; 
    }
    </style>

@{
    var ANO_VERSAO_REAL = @ViewData["ANO_VERSAO_REAL"];
    var ANO_VERSAO_ANTE = @ViewData["ANO_VERSAO_ANTE"];
    var MES_ACUM_REAL = @ViewData["MES_ACUM_REAL"];
    var MES_ACUM_ANTE = @ViewData["MES_ACUM_ANTE"];
    var MES_INI_PER_REAL = @ViewData["MES_INI_PER_REAL"];
    var MES_INI_PER_ANTE = @ViewData["MES_INI_PER_ANTE"];
    var MES_FIN_PER_REAL = @ViewData["MES_FIN_PER_REAL"];
    var MES_FIN_PER_ANTE = @ViewData["MES_FIN_PER_ANTE"];
}


<h2 id="gastos_pessoal_mensal_comp_titulo_tabela">GASTOS COM PESSOAL - COMPARATIVO @Html.Raw((string.Format("{0:N}", @ANO_VERSAO_REAL))) vs @Html.Raw((string.Format("{0:N}", @ANO_VERSAO_ANTE)))</h2>
<p></p>
<table id="botoes">
    <tr>
        <td>
            <button type="button" name="Mostrar" id="Mostrar" class="btn-brown"> Configurar Intervalos de Análise</button>
        </td>
        <td style="display:none">
            <iframe id="txtArea1" style="display:none"></iframe>
        </td>
        <td>
            <button type=button id="btnExport1" class="btn-blue" style="display:none" onclick="fnExcelReport('GASTOS_PESSOAL_MENSAL_COMP', 'Export HTML Table to Excel')">Excel</button>
        </td>
    </tr>
</table>
<p></p>

<div class="calcular">
    <h3 style="background-color:blueviolet; color:white;">Estamos a calcular os dados desta tabela. Iremos refrescando a página até que toda a tabela esteja calculada. </h3>
    <p style="padding-bottom:5px"></p>
</div>
<table id="GASTOS_PESSOAL_MENSAL_COMP"  class="webgrid-table" border="1">
    <thead>
        <tr class="oculta_na_impressao">
            <td class="webgrid-header_" style="background-color:#efeeef; border-color:#efeeef;text-align:right;vertical-align:middle; padding-bottom:1px">Período a analisar - Mês Inicial : </td>
            <td id="grid_mes_ini_ano_n_td" class="webgrid-header_" style="background-color:#efeeef; border-color:#efeeef; text-align:right; padding-left:35px"></td>
            <td id="grid_mes_ini_ano_n-1_td" class="webgrid-header_" style="background-color:#efeeef; border-color:#efeeef; padding-left:35px"></td>
            <td class="webgrid-header_" colspan="6" style="background-color:#efeeef; border-color:#efeeef"> </td>


        </tr>
        <tr class="oculta_na_impressao" style="background-color:#efeeef; border-color:#efeeef">
            <td class="webgrid-header_" style="background-color:#efeeef; border-color:#efeeef; text-align:right;vertical-align:bottom;vertical-align:middle; padding-bottom:1px">Período a analisar - Mês Final: </td>
            <td id="grid_mes_fin_ano_n_td" class="webgrid-header_" style="background-color:#efeeef; border-color:#efeeef; padding-left:35px"></td>
            <td id="grid_mes_fin_ano_n-1_td" class="webgrid-header_" style="background-color:#efeeef; border-color:#efeeef; padding-left:35px"></td>
            <td class="webgrid-header_" colspan="2" style="background-color:#efeeef; border-color:#efeeef; text-align:right;vertical-align:middle; padding-bottom:1px">Acumulado de Jan até ao Mês: </td>
            <td id="grid_mes_acum_ano_n-1_td" class="webgrid-header_" style="background-color:#efeeef; border-color:#efeeef; padding-left:35px"></td>
            <td id="grid_mes_acum_ano_n_td" class="webgrid-header_" style="background-color:#efeeef; border-color:#efeeef; padding-left:35px"></td>
            <td class="webgrid-header_" colspan="2" style="background-color:#efeeef; border-color:#efeeef"> </td>
        </tr>
        <tr>
            <td class="webgrid-header"> Rúbrica </td>
            <td class="webgrid-header">
                Per de
                @{if (MES_INI_PER_REAL.Equals("1"))
                    { <text>Jan</text>;
                    }
                    else
                    {
                        if (MES_INI_PER_REAL.Equals("2"))
                        { <text>Fev</text>;
                        }
                        else
                        {
                            if (MES_INI_PER_REAL.Equals("3"))
                            { <text>Mar</text>;
                            }
                            else
                            {
                                if (MES_INI_PER_REAL.Equals("4"))
                                { <text>Abr</text>;
                                }
                                else
                                {
                                    if (MES_INI_PER_REAL.Equals("5"))
                                    { <text>Mai</text>;
                                    }
                                    else
                                    {
                                        if (MES_INI_PER_REAL.Equals("6"))
                                        { <text>Jun</text>;
                                        }
                                        else
                                        {
                                            if (MES_INI_PER_REAL.Equals("7"))
                                            { <text>Jul</text>;
                                            }
                                            else
                                            {
                                                if (MES_INI_PER_REAL.Equals("8"))
                                                { <text>Ago</text>;
                                                }
                                                else
                                                {
                                                    if (MES_INI_PER_REAL.Equals("9"))
                                                    { <text>Set</text>;
                                                    }
                                                    else
                                                    {
                                                        if (MES_INI_PER_REAL.Equals("10"))
                                                        { <text>Out</text>;
                                                        }
                                                        else
                                                        {
                                                            if (MES_INI_PER_REAL.Equals("11"))
                                                            { <text>Nov</text>;
                                                            }
                                                            else
                                                            {
                                                                if (MES_INI_PER_REAL.Equals("12"))
                                                                { <text>Dez</text>;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }}  a
                @{if (MES_FIN_PER_REAL.Equals("1"))
                    { <text>Jan</text>;
                    }
                    else
                    {
                        if (MES_FIN_PER_REAL.Equals("2"))
                        { <text>Fev</text>;
                        }
                        else
                        {
                            if (MES_FIN_PER_REAL.Equals("3"))
                            { <text>Mar</text>;
                            }
                            else
                            {
                                if (MES_FIN_PER_REAL.Equals("4"))
                                { <text>Abr</text>;
                                }
                                else
                                {
                                    if (MES_FIN_PER_REAL.Equals("5"))
                                    { <text>Mai</text>;
                                    }
                                    else
                                    {
                                        if (MES_FIN_PER_REAL.Equals("6"))
                                        { <text>Jun</text>;
                                        }
                                        else
                                        {
                                            if (MES_FIN_PER_REAL.Equals("7"))
                                            { <text>Jul</text>;
                                            }
                                            else
                                            {
                                                if (MES_FIN_PER_REAL.Equals("8"))
                                                { <text>Ago</text>;
                                                }
                                                else
                                                {
                                                    if (MES_FIN_PER_REAL.Equals("9"))
                                                    { <text>Set</text>;
                                                    }
                                                    else
                                                    {
                                                        if (MES_FIN_PER_REAL.Equals("10"))
                                                        { <text>Out</text>;
                                                        }
                                                        else
                                                        {
                                                            if (MES_FIN_PER_REAL.Equals("11"))
                                                            { <text>Nov</text>;
                                                            }
                                                            else
                                                            {
                                                                if (MES_FIN_PER_REAL.Equals("12"))
                                                                { <text>Dez</text>;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }}
                de @Html.Raw((string.Format("{0:N}", @ANO_VERSAO_REAL)))
            </td>
            <td class="webgrid-header">
                Per de
                @{if (MES_INI_PER_ANTE.Equals("1"))
                    { <text>Jan</text>;
                    }
                    else
                    {
                        if (MES_INI_PER_ANTE.Equals("2"))
                        { <text>Fev</text>;
                        }
                        else
                        {
                            if (MES_INI_PER_ANTE.Equals("3"))
                            { <text>Mar</text>;
                            }
                            else
                            {
                                if (MES_INI_PER_ANTE.Equals("4"))
                                { <text>Abr</text>;
                                }
                                else
                                {
                                    if (MES_INI_PER_ANTE.Equals("5"))
                                    { <text>Mai</text>;
                                    }
                                    else
                                    {
                                        if (MES_INI_PER_ANTE.Equals("6"))
                                        { <text>Jun</text>;
                                        }
                                        else
                                        {
                                            if (MES_INI_PER_ANTE.Equals("7"))
                                            { <text>Jul</text>;
                                            }
                                            else
                                            {
                                                if (MES_INI_PER_ANTE.Equals("8"))
                                                { <text>Ago</text>;
                                                }
                                                else
                                                {
                                                    if (MES_INI_PER_ANTE.Equals("9"))
                                                    { <text>Set</text>;
                                                    }
                                                    else
                                                    {
                                                        if (MES_INI_PER_ANTE.Equals("10"))
                                                        { <text>Out</text>;
                                                        }
                                                        else
                                                        {
                                                            if (MES_INI_PER_ANTE.Equals("11"))
                                                            { <text>Nov</text>;
                                                            }
                                                            else
                                                            {
                                                                if (MES_INI_PER_ANTE.Equals("12"))
                                                                { <text>Dez</text>;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }}  a
                @{if (MES_FIN_PER_ANTE.Equals("1"))
                    { <text>Jan</text>;
                    }
                    else
                    {
                        if (MES_FIN_PER_ANTE.Equals("2"))
                        { <text>Fev</text>;
                        }
                        else
                        {
                            if (MES_FIN_PER_ANTE.Equals("3"))
                            { <text>Mar</text>;
                            }
                            else
                            {
                                if (MES_FIN_PER_ANTE.Equals("4"))
                                { <text>Abr</text>;
                                }
                                else
                                {
                                    if (MES_FIN_PER_ANTE.Equals("5"))
                                    { <text>Mai</text>;
                                    }
                                    else
                                    {
                                        if (MES_FIN_PER_ANTE.Equals("6"))
                                        { <text>Jun</text>;
                                        }
                                        else
                                        {
                                            if (MES_FIN_PER_ANTE.Equals("7"))
                                            { <text>Jul</text>;
                                            }
                                            else
                                            {
                                                if (MES_FIN_PER_ANTE.Equals("8"))
                                                { <text>Ago</text>;
                                                }
                                                else
                                                {
                                                    if (MES_FIN_PER_ANTE.Equals("9"))
                                                    { <text>Set</text>;
                                                    }
                                                    else
                                                    {
                                                        if (MES_FIN_PER_ANTE.Equals("10"))
                                                        { <text>Out</text>;
                                                        }
                                                        else
                                                        {
                                                            if (MES_FIN_PER_ANTE.Equals("11"))
                                                            { <text>Nov</text>;
                                                            }
                                                            else
                                                            {
                                                                if (MES_FIN_PER_ANTE.Equals("12"))
                                                                { <text>Dez</text>;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }}
                de @Html.Raw((string.Format("{0:N}", @ANO_VERSAO_ANTE)))
            </td>
            <td class="webgrid-header"> Var Per %  </td>
            <td class="webgrid-header"> Total  do ano @Html.Raw((string.Format("{0:N}", @ANO_VERSAO_ANTE)))  </td>
            <td class="webgrid-header">
                Acum de Jan a
                @{if (MES_ACUM_ANTE.Equals("1"))
                    { <text>Jan</text>;
                    }
                    else
                    {
                        if (MES_ACUM_ANTE.Equals("2"))
                        { <text>Fev</text>;
                        }
                        else
                        {
                            if (MES_ACUM_ANTE.Equals("3"))
                            { <text>Mar</text>;
                            }
                            else
                            {
                                if (MES_ACUM_ANTE.Equals("4"))
                                { <text>Abr</text>;
                                }
                                else
                                {
                                    if (MES_ACUM_ANTE.Equals("5"))
                                    { <text>Mai</text>;
                                    }
                                    else
                                    {
                                        if (MES_ACUM_ANTE.Equals("6"))
                                        { <text>Jun</text>;
                                        }
                                        else
                                        {
                                            if (MES_ACUM_ANTE.Equals("7"))
                                            { <text>Jul</text>;
                                            }
                                            else
                                            {
                                                if (MES_ACUM_ANTE.Equals("8"))
                                                { <text>Ago</text>;
                                                }
                                                else
                                                {
                                                    if (MES_ACUM_ANTE.Equals("9"))
                                                    { <text>Set</text>;
                                                    }
                                                    else
                                                    {
                                                        if (MES_ACUM_ANTE.Equals("10"))
                                                        { <text>Out</text>;
                                                        }
                                                        else
                                                        {
                                                            if (MES_ACUM_ANTE.Equals("11"))
                                                            { <text>Nov</text>;
                                                            }
                                                            else
                                                            {
                                                                if (MES_ACUM_ANTE.Equals("12"))
                                                                { <text>Dez</text>;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }}
                de @Html.Raw((string.Format("{0:N}", @ANO_VERSAO_ANTE)))
            </td>
            <td class="webgrid-header">
                Acum de Jan a
                @{if (MES_ACUM_REAL.Equals("1"))
                    { <text>Jan</text>;
                    }
                    else
                    {
                        if (MES_ACUM_REAL.Equals("2"))
                        { <text>Fev</text>;
                        }
                        else
                        {
                            if (MES_ACUM_REAL.Equals("3"))
                            { <text>Mar</text>;
                            }
                            else
                            {
                                if (MES_ACUM_REAL.Equals("4"))
                                { <text>Abr</text>;
                                }
                                else
                                {
                                    if (MES_ACUM_REAL.Equals("5"))
                                    { <text>Mai</text>;
                                    }
                                    else
                                    {
                                        if (MES_ACUM_REAL.Equals("6"))
                                        { <text>Jun</text>;
                                        }
                                        else
                                        {
                                            if (MES_ACUM_REAL.Equals("7"))
                                            { <text>Jul</text>;
                                            }
                                            else
                                            {
                                                if (MES_ACUM_REAL.Equals("8"))
                                                { <text>Ago</text>;
                                                }
                                                else
                                                {
                                                    if (MES_ACUM_REAL.Equals("9"))
                                                    { <text>Set</text>;
                                                    }
                                                    else
                                                    {
                                                        if (MES_ACUM_REAL.Equals("10"))
                                                        { <text>Out</text>;
                                                        }
                                                        else
                                                        {
                                                            if (MES_ACUM_REAL.Equals("11"))
                                                            { <text>Nov</text>;
                                                            }
                                                            else
                                                            {
                                                                if (MES_ACUM_REAL.Equals("12"))
                                                                { <text>Dez</text>;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }}
                de @Html.Raw((string.Format("{0:N}", @ANO_VERSAO_REAL)))
            </td>
            <td class="webgrid-header"> Var Acum % </td>
            <td class="webgrid-header"> Var Acum </td>

        </tr>
    </thead>


<tr>
    <td  class="webgrid-rubrica"> Gastos com Pessoal                           </td> 
    <td class="webgrid-rubrica" id="GASTOS_PESSOAL_REAL_PER" itemid="GASTOS_PESSOAL_PER" itemref="@ViewData["versao_real"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_REAL_PER"])))  </td> 
    <td class="webgrid-rubrica" id="GASTOS_PESSOAL_ANTE_PER" itemid="GASTOS_PESSOAL_PER" itemref="@ViewData["versao_ante"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_ANTE_PER"])))  </td> 
    <td class="webgrid-rubrica" id="GASTOS_PESSOAL_COMP_PER_P" >  @if (@ViewData["GASTOS_PESSOAL_REAL_PER"].Equals("calc") || @ViewData["GASTOS_PESSOAL_ANTE_PER"].Equals("calc")) { <text>    -</text> } else { if (Convert.ToInt32(@ViewData["GASTOS_PESSOAL_ANTE_PER"]).Equals(0)) {<text>    -</text> ; } else { decimal GASTOS_PESSOAL_REAL_PER = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_REAL_PER"]); decimal GASTOS_PESSOAL_ANTE_PER = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_ANTE_PER"]);   @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_REAL_PER / GASTOS_PESSOAL_ANTE_PER) * 100) - 100)))<text>%</text>} } </td>
    <td class="webgrid-rubrica" id="GASTOS_PESSOAL_ANTE_TOTAL" itemid="GASTOS_PESSOAL_TOTAL" itemref="@ViewData["versao_ante"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_ANTE_TOTAL"])))  </td> 
    <td class="webgrid-rubrica" id="GASTOS_PESSOAL_ANTE_ACUM" itemid="GASTOS_PESSOAL_ACUM" itemref="@ViewData["versao_ante"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_ANTE_ACUM"])))  </td> 
    <td class="webgrid-rubrica" id="GASTOS_PESSOAL_REAL_ACUM" itemid="GASTOS_PESSOAL_ACUM" itemref="@ViewData["versao_real"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_REAL_ACUM"])))  </td> 
     <td class="webgrid-rubrica" id="GASTOS_PESSOAL_COMP_ACUM_P" > @if (@ViewData["GASTOS_PESSOAL_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_ANTE_ACUM"].Equals("calc")) { <text>    -</text> } else { if (Convert.ToInt32(@ViewData["GASTOS_PESSOAL_ANTE_ACUM"]).Equals(0)) {<text>    -</text> ; } else { decimal GASTOS_PESSOAL_REAL_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_REAL_ACUM"]); decimal GASTOS_PESSOAL_ANTE_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_ANTE_ACUM"]);   @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_REAL_ACUM / GASTOS_PESSOAL_ANTE_ACUM) * 100) - 100)))<text>%</text>} } </td>
     <td class="webgrid-rubrica" id="GASTOS_PESSOAL_COMP_ACUM_P" > @if (@ViewData["GASTOS_PESSOAL_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_ANTE_ACUM"].Equals("calc")) { <text>    -</text> } else { if (Convert.ToInt32(@ViewData["GASTOS_PESSOAL_ANTE_ACUM"]).Equals(0)) {<text>    -</text> ; } else { decimal GASTOS_PESSOAL_REAL_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_REAL_ACUM"]); decimal GASTOS_PESSOAL_ANTE_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_ANTE_ACUM"]);   @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_REAL_ACUM - GASTOS_PESSOAL_ANTE_ACUM)))))} } </td>
 </tr>
<tr>
    <td  class="webgrid-rubrica"> Remuneração de Orgãos Sociais                           </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_REM_ORG_SOC_REAL_PER" itemid="GASTOS_PESSOAL_REM_ORG_SOC_PER" itemref="@ViewData["versao_real"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_REAL_PER"])))  </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_REM_ORG_SOC_ANTE_PER" itemid="GASTOS_PESSOAL_REM_ORG_SOC_PER" itemref="@ViewData["versao_ante"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_PER"])))  </td> 
    <td class="webgrid-rubrica" id="GASTOS_PESSOAL_REM_ORG_SOC_COMP_PER_P" >  @if (@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_REAL_PER"].Equals("calc") || @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_PER"].Equals("calc")) { <text>    -</text> } else { if (Convert.ToInt32(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_PER"]).Equals(0)) {<text>    -</text> ; } else { decimal GASTOS_PESSOAL_REM_ORG_SOC_REAL_PER = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_REAL_PER"]); decimal GASTOS_PESSOAL_REM_ORG_SOC_ANTE_PER = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_PER"]);   @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_REM_ORG_SOC_REAL_PER / GASTOS_PESSOAL_REM_ORG_SOC_ANTE_PER) * 100) - 100)))<text>%</text>} } </td>
    <td  id ="GASTOS_PESSOAL_REM_ORG_SOC_ANTE_TOTAL" itemid="GASTOS_PESSOAL_REM_ORG_SOC_TOTAL" itemref="@ViewData["versao_ante"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_TOTAL"])))  </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM" itemid="GASTOS_PESSOAL_REM_ORG_SOC_ACUM" itemref="@ViewData["versao_ante"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"])))  </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM" itemid="GASTOS_PESSOAL_REM_ORG_SOC_ACUM" itemref="@ViewData["versao_real"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM"])))  </td> 
     <td class="webgrid-rubrica" id="GASTOS_PESSOAL_REM_ORG_SOC_COMP_ACUM_P" > @if (@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"].Equals("calc")) { <text>    -</text> } else { if (Convert.ToInt32(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"]).Equals(0)) {<text>    -</text> ; } else { decimal GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM"]); decimal GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"]);   @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM / GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM) * 100) - 100)))<text>%</text>} } </td>
     <td class="webgrid-rubrica" id="GASTOS_PESSOAL_REM_ORG_SOC_COMP_ACUM_P" > @if (@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"].Equals("calc")) { <text>    -</text> } else { if (Convert.ToInt32(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"]).Equals(0)) {<text>    -</text> ; } else { decimal GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM"]); decimal GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"]);   @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM - GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM)))))} } </td>
 </tr>

<tr>
    <td  class="webgrid-rubrica"> Remuneração de Pessoal                           </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_REM_PESSOAL_REAL_PER" itemid="GASTOS_PESSOAL_REM_PESSOAL_PER" itemref="@ViewData["versao_real"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_REAL_PER"])))  </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_REM_PESSOAL_ANTE_PER" itemid="GASTOS_PESSOAL_REM_PESSOAL_PER" itemref="@ViewData["versao_ante"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_PER"])))  </td> 
    <td class="webgrid-rubrica" id="GASTOS_PESSOAL_REM_PESSOAL_COMP_PER_P" >  @if (@ViewData["GASTOS_PESSOAL_REM_PESSOAL_REAL_PER"].Equals("calc") || @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_PER"].Equals("calc")) { <text>    -</text> } else { if (Convert.ToInt32(@ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_PER"]).Equals(0)) {<text>    -</text> ; } else { decimal GASTOS_PESSOAL_REM_PESSOAL_REAL_PER = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_REM_PESSOAL_REAL_PER"]); decimal GASTOS_PESSOAL_REM_PESSOAL_ANTE_PER = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_PER"]);   @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_REM_PESSOAL_REAL_PER / GASTOS_PESSOAL_REM_PESSOAL_ANTE_PER) * 100) - 100)))<text>%</text>} } </td>
    <td style="text-align:right" id="GASTOS_PESSOAL_REM_PESSOAL_ANTE_TOTAL" itemid="GASTOS_PESSOAL_REM_PESSOAL_TOTAL" itemref="@ViewData["versao_ante"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_TOTAL"])))  </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM" itemid="GASTOS_PESSOAL_REM_PESSOAL_ACUM" itemref="@ViewData["versao_ante"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM"])))  </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_REM_PESSOAL_REAL_ACUM" itemid="GASTOS_PESSOAL_REM_PESSOAL_ACUM" itemref="@ViewData["versao_real"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_REAL_ACUM"])))  </td> 
     <td class="webgrid-rubrica" id="GASTOS_PESSOAL_OUTROS_COMP_ACUM_P" > @if (@ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"].Equals("calc")) { <text>    -</text> } else { if (Convert.ToInt32(@ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"]).Equals(0)) {<text>    -</text> ; } else { decimal GASTOS_PESSOAL_OUTROS_REAL_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"]); decimal GASTOS_PESSOAL_OUTROS_ANTE_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"]);   @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_OUTROS_REAL_ACUM / GASTOS_PESSOAL_OUTROS_ANTE_ACUM) * 100) - 100)))<text>%</text>} } </td>
     <td class="webgrid-rubrica" id="GASTOS_PESSOAL_OUTROS_COMP_ACUM_P" > @if (@ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"].Equals("calc")) { <text>    -</text> } else { if (Convert.ToInt32(@ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"]).Equals(0)) {<text>    -</text> ; } else { decimal GASTOS_PESSOAL_OUTROS_REAL_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"]); decimal GASTOS_PESSOAL_OUTROS_ANTE_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"]);   @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_OUTROS_REAL_ACUM - GASTOS_PESSOAL_OUTROS_ANTE_ACUM)))))} } </td>
 </tr>

<tr>
    <td  class="webgrid-rubrica"> Benefícios Pós-Emprego                           </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_BEN_POS_EMP_REAL_PER" itemid="GASTOS_PESSOAL_BEN_POS_EMP_PER" itemref="@ViewData["versao_real"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_REAL_PER"])))  </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_BEN_POS_EMP_ANTE_PER" itemid="GASTOS_PESSOAL_BEN_POS_EMP_PER" itemref="@ViewData["versao_ante"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_PER"])))  </td> 
    <td class="webgrid-rubrica" id="GASTOS_PESSOAL_BEN_POS_EMP_COMP_PER_P" >  @if (@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_REAL_PER"].Equals("calc") || @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_PER"].Equals("calc")) { <text>    -</text> } else { if (Convert.ToInt32(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_PER"]).Equals(0)) {<text>    -</text> ; } else { decimal GASTOS_PESSOAL_BEN_POS_EMP_REAL_PER = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_REAL_PER"]); decimal GASTOS_PESSOAL_BEN_POS_EMP_ANTE_PER = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_PER"]);   @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_BEN_POS_EMP_REAL_PER / GASTOS_PESSOAL_BEN_POS_EMP_ANTE_PER) * 100) - 100)))<text>%</text>} } </td>
    <td style="text-align:right" id="GASTOS_PESSOAL_BEN_POS_EMP_ANTE_TOTAL" itemid="GASTOS_PESSOAL_BEN_POS_EMP_TOTAL" itemref="@ViewData["versao_ante"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_TOTAL"])))  </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM" itemid="GASTOS_PESSOAL_BEN_POS_EMP_ACUM" itemref="@ViewData["versao_ante"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"])))  </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM" itemid="GASTOS_PESSOAL_BEN_POS_EMP_ACUM" itemref="@ViewData["versao_real"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM"])))  </td> 
     <td class="webgrid-rubrica" id="GASTOS_PESSOAL_BEN_POS_EMP_COMP_ACUM_P" > @if (@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"].Equals("calc")) { <text>    -</text> } else { if (Convert.ToInt32(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"]).Equals(0)) {<text>    -</text> ; } else { decimal GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM"]); decimal GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"]);   @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM / GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM) * 100) - 100)))<text>%</text>} } </td>
     <td class="webgrid-rubrica" id="GASTOS_PESSOAL_BEN_POS_EMP_COMP_ACUM_P" > @if (@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"].Equals("calc")) { <text>    -</text> } else { if (Convert.ToInt32(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"]).Equals(0)) {<text>    -</text> ; } else { decimal GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM"]); decimal GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"]);   @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM - GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM)))))} } </td>
 </tr>
<tr>
    <td  class="webgrid-rubrica"> Indemnizações                           </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_INDEMNIZACOES_REAL_PER" itemid="GASTOS_PESSOAL_INDEMNIZACOES_PER" itemref="@ViewData["versao_real"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_REAL_PER"])))  </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_INDEMNIZACOES_ANTE_PER" itemid="GASTOS_PESSOAL_INDEMNIZACOES_PER" itemref="@ViewData["versao_ante"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_PER"])))  </td> 
    <td class="webgrid-rubrica" id="GASTOS_PESSOAL_INDEMNIZACOES_COMP_PER_P" >  @if (@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_REAL_PER"].Equals("calc") || @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_PER"].Equals("calc")) { <text>    -</text> } else { if (Convert.ToInt32(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_PER"]).Equals(0)) {<text>    -</text> ; } else { decimal GASTOS_PESSOAL_INDEMNIZACOES_REAL_PER = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_REAL_PER"]); decimal GASTOS_PESSOAL_INDEMNIZACOES_ANTE_PER = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_PER"]);   @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_INDEMNIZACOES_REAL_PER / GASTOS_PESSOAL_INDEMNIZACOES_ANTE_PER) * 100) - 100)))<text>%</text>} } </td>
    <td style="text-align:right" id="GASTOS_PESSOAL_INDEMNIZACOES_ANTE_TOTAL" itemid="GASTOS_PESSOAL_INDEMNIZACOES_TOTAL" itemref="@ViewData["versao_ante"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_TOTAL"])))  </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM" itemid="GASTOS_PESSOAL_INDEMNIZACOES_ACUM" itemref="@ViewData["versao_ante"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"])))  </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM" itemid="GASTOS_PESSOAL_INDEMNIZACOES_ACUM" itemref="@ViewData["versao_real"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM"])))  </td> 
     <td class="webgrid-rubrica" id="GASTOS_PESSOAL_INDEMNIZACOES_COMP_ACUM_P" > @if (@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"].Equals("calc")) { <text>    -</text> } else { if (Convert.ToInt32(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"]).Equals(0)) {<text>    -</text> ; } else { decimal GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM"]); decimal GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"]);   @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM / GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM) * 100) - 100)))<text>%</text>} } </td>
     <td class="webgrid-rubrica" id="GASTOS_PESSOAL_INDEMNIZACOES_COMP_ACUM_P" > @if (@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"].Equals("calc")) { <text>    -</text> } else { if (Convert.ToInt32(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"]).Equals(0)) {<text>    -</text> ; } else { decimal GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM"]); decimal GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"]);   @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM - GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM)))))} } </td>
 </tr>
<tr>
    <td  class="webgrid-rubrica"> Encargos s/ Remunerações                          </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_ENC_SEG_SOC_REAL_PER" itemid="GASTOS_PESSOAL_ENC_SEG_SOC_PER" itemref="@ViewData["versao_real"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_REAL_PER"])))  </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_PER" itemid="GASTOS_PESSOAL_ENC_SEG_SOC_PER" itemref="@ViewData["versao_ante"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_PER"])))  </td> 
    <td class="webgrid-rubrica" id="GASTOS_PESSOAL_ENC_SEG_SOC_COMP_PER_P" >  @if (@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_REAL_PER"].Equals("calc") || @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_PER"].Equals("calc")) { <text>    -</text> } else { if (Convert.ToInt32(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_PER"]).Equals(0)) {<text>    -</text> ; } else { decimal GASTOS_PESSOAL_ENC_SEG_SOC_REAL_PER = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_REAL_PER"]); decimal GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_PER = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_PER"]);   @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_ENC_SEG_SOC_REAL_PER / GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_PER) * 100) - 100)))<text>%</text>} } </td>
    <td style="text-align:right" id="GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_TOTAL" itemid="GASTOS_PESSOAL_ENC_SEG_SOC_TOTAL" itemref="@ViewData["versao_ante"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_TOTAL"])))  </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM" itemid="GASTOS_PESSOAL_ENC_SEG_SOC_ACUM" itemref="@ViewData["versao_ante"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"])))  </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM" itemid="GASTOS_PESSOAL_ENC_SEG_SOC_ACUM" itemref="@ViewData["versao_real"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM"])))  </td> 
     <td class="webgrid-rubrica" id="GASTOS_PESSOAL_ENC_SEG_SOC_COMP_ACUM_P" > @if (@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"].Equals("calc")) { <text>    -</text> } else { if (Convert.ToInt32(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"]).Equals(0)) {<text>    -</text> ; } else { decimal GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM"]); decimal GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"]);   @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM / GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM) * 100) - 100)))<text>%</text>} } </td>
     <td class="webgrid-rubrica" id="GASTOS_PESSOAL_ENC_SEG_SOC_COMP_ACUM_P" > @if (@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"].Equals("calc")) { <text>    -</text> } else { if (Convert.ToInt32(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"]).Equals(0)) {<text>    -</text> ; } else { decimal GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM"]); decimal GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"]);   @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM - GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM)))))} } </td>
 </tr>
<tr>
    <td  class="webgrid-rubrica"> Gastos de Acção Social                           </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_PER" itemid="GASTOS_PESSOAL_GAST_ACAO_SOC_PER" itemref="@ViewData["versao_real"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_PER"])))  </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_PER" itemid="GASTOS_PESSOAL_GAST_ACAO_SOC_PER" itemref="@ViewData["versao_ante"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_PER"])))  </td> 
    <td class="webgrid-rubrica" id="GASTOS_PESSOAL_GAST_ACAO_SOC_COMP_PER_P" >  @if (@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_PER"].Equals("calc") || @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_PER"].Equals("calc")) { <text>    -</text> } else { if (Convert.ToInt32(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_PER"]).Equals(0)) {<text>    -</text> ; } else { decimal GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_PER = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_PER"]); decimal GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_PER = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_PER"]);   @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_PER / GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_PER) * 100) - 100)))<text>%</text>} } </td>
    <td style="text-align:right" id="GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_TOTAL" itemid="GASTOS_PESSOAL_GAST_ACAO_SOC_TOTAL" itemref="@ViewData["versao_ante"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_TOTAL"])))  </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM" itemid="GASTOS_PESSOAL_GAST_ACAO_SOC_ACUM" itemref="@ViewData["versao_ante"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"])))  </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM" itemid="GASTOS_PESSOAL_GAST_ACAO_SOC_ACUM" itemref="@ViewData["versao_real"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM"])))  </td> 
     <td class="webgrid-rubrica" id="GASTOS_PESSOAL_GAST_ACAO_SOC_COMP_ACUM_P" > @if (@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"].Equals("calc")) { <text>    -</text> } else { if (Convert.ToInt32(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"]).Equals(0)) {<text>    -</text> ; } else { decimal GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM"]); decimal GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"]);   @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM / GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM) * 100) - 100)))<text>%</text>} } </td>
     <td class="webgrid-rubrica" id="GASTOS_PESSOAL_GAST_ACAO_SOC_COMP_ACUM_P" > @if (@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"].Equals("calc")) { <text>    -</text> } else { if (Convert.ToInt32(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"]).Equals(0)) {<text>    -</text> ; } else { decimal GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM"]); decimal GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"]);   @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM - GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM)))))} } </td>
 </tr>
<tr>
    <td  class="webgrid-rubrica"> Outros Gastos com Pessoal                           </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_OUTROS_REAL_PER" itemid="GASTOS_PESSOAL_OUTROS_PER" itemref="@ViewData["versao_real"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_OUTROS_REAL_PER"])))  </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_OUTROS_ANTE_PER" itemid="GASTOS_PESSOAL_OUTROS_PER" itemref="@ViewData["versao_ante"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_OUTROS_ANTE_PER"])))  </td> 
    <td class="webgrid-rubrica" id="GASTOS_PESSOAL_OUTROS_COMP_PER_P" >  @if (@ViewData["GASTOS_PESSOAL_OUTROS_REAL_PER"].Equals("calc") || @ViewData["GASTOS_PESSOAL_OUTROS_ANTE_PER"].Equals("calc")) { <text>    -</text> } else { if (Convert.ToInt32(@ViewData["GASTOS_PESSOAL_OUTROS_ANTE_PER"]).Equals(0)) {<text>    -</text> ; } else { decimal GASTOS_PESSOAL_OUTROS_REAL_PER = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_OUTROS_REAL_PER"]); decimal GASTOS_PESSOAL_OUTROS_ANTE_PER = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_OUTROS_ANTE_PER"]);   @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_OUTROS_REAL_PER / GASTOS_PESSOAL_OUTROS_ANTE_PER) * 100) - 100)))<text>%</text>} } </td>
    <td style="text-align:right" id="GASTOS_PESSOAL_OUTROS_ANTE_TOTAL" itemid="GASTOS_PESSOAL_OUTROS_TOTAL" itemref="@ViewData["versao_ante"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_OUTROS_ANTE_TOTAL"])))  </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_OUTROS_ANTE_ACUM" itemid="GASTOS_PESSOAL_OUTROS_ACUM" itemref="@ViewData["versao_ante"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"])))  </td> 
    <td style="text-align:right" id="GASTOS_PESSOAL_OUTROS_REAL_ACUM" itemid="GASTOS_PESSOAL_OUTROS_ACUM" itemref="@ViewData["versao_real"]">@Html.Raw((string.Format("{0:N}", @ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"])))  </td> 
     <td class="webgrid-rubrica" id="GASTOS_PESSOAL_OUTROS_COMP_ACUM_P" > @if (@ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"].Equals("calc")) { <text>    -</text> } else { if (Convert.ToInt32(@ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"]).Equals(0)) {<text>    -</text> ; } else { decimal GASTOS_PESSOAL_OUTROS_REAL_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"]); decimal GASTOS_PESSOAL_OUTROS_ANTE_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"]);   @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_OUTROS_REAL_ACUM / GASTOS_PESSOAL_OUTROS_ANTE_ACUM) * 100) - 100)))<text>%</text>} } </td>
     <td class="webgrid-rubrica" id="GASTOS_PESSOAL_OUTROS_COMP_ACUM_P" > @if (@ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"].Equals("calc")) { <text>    -</text> } else { if (Convert.ToInt32(@ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"]).Equals(0)) {<text>    -</text> ; } else { decimal GASTOS_PESSOAL_OUTROS_REAL_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"]); decimal GASTOS_PESSOAL_OUTROS_ANTE_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"]);   @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_OUTROS_REAL_ACUM - GASTOS_PESSOAL_OUTROS_ANTE_ACUM)))))} } </td>
 </tr>





  </table>


<table id="Peso_GASTOS_PESSOAL_Comp_table" class="webgrid-table">
    <tr>
        <td style="width:100%" colspan="2">
            <div>
                <canvas id="Peso_GASTOS_PESSOAL_Comp" style="width:672px; height:200px"></canvas>
            </div>
        </td>
    </tr>

</table>


    @if (@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM"].Equals("calc"))  { <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_002"  style="display:none"></canvas><canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_003" style="display:none"></canvas>}
    else
    {
        if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM"])) == 0)
        { <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_002"  style="display:none"></canvas><canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_003" style="display:none"></canvas>}
        else
        {
<div class="page-breaker"></div> <table  class="graficos_textos"> <tr> <td class="titulos_mapas" colspan="2"> Remuneração de Orgãos Sociais </td> </tr>
     <tr>
       <td  style="width:50%">
           <p>A Remuneração de Orgãos Sociais, em termos acumulados (de Jan a @Html.Raw(ViewData["MES_ACUM_REAL_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_REAL"])) atingiram o valor de
             @if (@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM"].Equals("calc")) { <text>calc.</text> } else { @Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM"])))))} €,
         sendo que no período (de Jan a @Html.Raw(ViewData["MES_ACUM_ANTE_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_ANTE"])) atingiram o valor de
             @if (@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"].Equals("calc")) { <text>calc.</text> } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"]) ))))} €,
         verificando-se @if (@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else {if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM"]) ) >= (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"]) ))      {  <text> um crescimento de </text> ; }  else   {  <text> uma diminuição de </text>  ; }}
                         @if (@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else { if ((Convert.ToInt32(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"]) ).Equals(0)){<text> 0 %</text>  } else { decimal GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM"]) ; decimal GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"]) ; @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM - GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM) / Math.Abs(GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM)) * 100))) <text>%</text>} }.
               </p>
            <p> No mesmo período a Variação do Volume de Negócios (inclui Variação de Produção) foi de
             @if (@ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else { if ((Convert.ToInt32(@ViewData["IND_VN_ANTE_ACUM"]) ).Equals(0)){<text> 0 %</text>  } else { decimal IND_VN_REAL_ACUM = Convert.ToInt32(@ViewData["IND_VN_REAL_ACUM"]) ; decimal IND_VN_ANTE_ACUM = Convert.ToInt32(@ViewData["IND_VN_ANTE_ACUM"]) ; @Html.Raw((string.Format("{0:N}", ((IND_VN_REAL_ACUM - IND_VN_ANTE_ACUM) / Math.Abs(IND_VN_ANTE_ACUM)) * 100))) <text>%</text>} }.
            @if (@ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"].Equals("calc") || Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"]).Equals(0) || Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]).Equals(0)) { <text></text> } else { if (((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM"]) - Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"])) / Math.Abs(Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"]))) * 100 >= ((Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"]) - Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]))/Math.Abs(Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"])))*100 )        {  <text>Sendo a variação da Remuneração de Orgãos Sociais superior à variação do Volume de Negócios verifica-se uma perda relativa de Rentabilidade Operacional </text> ; }  else   {  <text>Sendo a variação da Remuneração de Orgãos Sociais inferior à variação do Volume de Negócios verifica-se um ganho relativo de Rentabilidade Operacional </text> ; } }.
       </p>
          </td>
         <td style="width:50%">
             <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_002"></canvas>
         </td>
     </tr>
          <tr>
         <td style="width:50%">
             <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_003"></canvas>
         </td>
         <td  style="width:50%">O Peso da Remuneração de Orgãos Sociais no Volume de Negócios (VN: inclui variação de Produção), em termos acumulados (de Jan a @Html.Raw(ViewData["MES_ACUM_REAL_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_REAL"])), atingiu o valor de
             @if (@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_REAL_ACUM"].Equals("calc")) { <text>calc.</text>  } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"])) * 100)))} %
         sendo que no período (de Jan a @Html.Raw(ViewData["MES_ACUM_ANTE_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_ANTE"])) atingiu o valor de
             @if (@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc")) { <text>calc.</text>  } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"])) * 100)))} %,
         verificando-se @if (@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"].Equals("calc") || @ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc")) { <text>    -</text>  } else { if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"])) >= (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]))) {  <text> uma diminuição de eficiência </text> ; } else {  <text> um aumento de eficiência de </text>  ; } }
                         @if (@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"].Equals("calc") || @ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc")) { <text>    -</text>  } else { if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"])).Equals(0)){<text> 0 %</text>  } else { decimal PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_REAL_ACUM = Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"]); decimal PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANTE_ACUM = Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]); @Html.Raw((string.Format("{0:N}", ((PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_REAL_ACUM - PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANTE_ACUM) )*100*-1 ))) <text>%</text>} }.
         </td>

     </tr>
     </table>
    

  }} 
 @if (@ViewData["GASTOS_PESSOAL_REM_PESSOAL_REAL_ACUM"].Equals("calc"))  { <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_004"  style="display:none"></canvas><canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_005" style="display:none"></canvas>} else { if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_PESSOAL_REAL_ACUM"])) == 0)  { <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_004"  style="display:none"></canvas><canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_005" style="display:none"></canvas>} else { <div class="page-breaker"></div> <table  class="graficos_textos"> <tr> <td class="titulos_mapas" colspan="2"> Remuneração de Pessoal </td> </tr>
     <tr>
       <td  style="width:50%"> 
           <p>As Remunerações de Pessoal, em termos acumulados (de Jan a @Html.Raw(ViewData["MES_ACUM_REAL_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_REAL"])) atingiram o valor de 
             @if (@ViewData["GASTOS_PESSOAL_REM_PESSOAL_REAL_ACUM"].Equals("calc")) { <text>calc.</text> } else { @Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_PESSOAL_REAL_ACUM"])))))} €,
         sendo que no período (de Jan a @Html.Raw(ViewData["MES_ACUM_ANTE_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_ANTE"])) atingiram o valor de
             @if (@ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM"].Equals("calc")) { <text>calc.</text> } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM"]) ))))} €,
         verificando-se @if (@ViewData["GASTOS_PESSOAL_REM_PESSOAL_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else {if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_PESSOAL_REAL_ACUM"]) ) >= (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM"]) ))      {  <text> um crescimento de </text> ; }  else   {  <text> uma diminuição de </text>  ; }}
                         @if (@ViewData["GASTOS_PESSOAL_REM_PESSOAL_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else { if ((Convert.ToInt32(@ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM"]) ).Equals(0)){<text> 0 %</text>  } else { decimal GASTOS_PESSOAL_REM_PESSOAL_REAL_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_REM_PESSOAL_REAL_ACUM"]) ; decimal GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM"]) ; @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_REM_PESSOAL_REAL_ACUM - GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM) / Math.Abs(GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM)) * 100))) <text>%</text>} }.
               </p>
            <p> No mesmo período a Variação do Volume de Negócios (inclui Variação de Produção) foi de
             @if (@ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else { if ((Convert.ToInt32(@ViewData["IND_VN_ANTE_ACUM"]) ).Equals(0)){<text> 0 %</text>  } else { decimal IND_VN_REAL_ACUM = Convert.ToInt32(@ViewData["IND_VN_REAL_ACUM"]) ; decimal IND_VN_ANTE_ACUM = Convert.ToInt32(@ViewData["IND_VN_ANTE_ACUM"]) ; @Html.Raw((string.Format("{0:N}", ((IND_VN_REAL_ACUM - IND_VN_ANTE_ACUM) / Math.Abs(IND_VN_ANTE_ACUM)) * 100))) <text>%</text>} }.
            @if (@ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_REM_PESSOAL_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM"].Equals("calc") || Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM"]).Equals(0) || Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]).Equals(0)) { <text></text> } else { if (((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_PESSOAL_REAL_ACUM"]) - Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM"])) / Math.Abs(Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM"]))) * 100 >= ((Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"]) - Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]))/Math.Abs(Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"])))*100 )        {  <text>Sendo a variação das Remunerações de Pessoal superior à variação do Volume de Negócios verifica-se uma perda relativa de Rentabilidade Operacional </text> ; }  else   {  <text>Sendo a variação das Remunerações de Pessoal inferior à variação do Volume de Negócios verifica-se um ganho relativo de Rentabilidade Operacional </text> ; } }.
       </p>
          </td>
         <td style="width:50%">
             <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_004"></canvas>
         </td>
     </tr>
          <tr>
         <td style="width:50%">
             <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_005"></canvas>
         </td>
         <td  style="width:50%">O Peso das Remunerações de Pessoal no Volume de Negócios (VN: inclui variação de Produção), em termos acumulados (de Jan a @Html.Raw(ViewData["MES_ACUM_REAL_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_REAL"])), atingiu o valor de
             @if (@ViewData["GASTOS_PESSOAL_REM_PESSOAL_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_REAL_ACUM"].Equals("calc")) { <text>calc.</text>  } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_PESSOAL_REAL_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"])) * 100)))} %
         sendo que no período (de Jan a @Html.Raw(ViewData["MES_ACUM_ANTE_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_ANTE"])) atingiu o valor de
             @if (@ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc")) { <text>calc.</text>  } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"])) * 100)))} %,
         verificando-se @if (@ViewData["GASTOS_PESSOAL_REM_PESSOAL_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM"].Equals("calc") || @ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc")) { <text>    -</text>  } else { if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_PESSOAL_REAL_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"])) >= (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]))) {  <text> uma diminuição de eficiência </text> ; } else {  <text> um aumento de eficiência de </text>  ; } }
                         @if (@ViewData["GASTOS_PESSOAL_REM_PESSOAL_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM"].Equals("calc") || @ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc")) { <text>    -</text>  } else { if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"])).Equals(0)){<text> 0 %</text>  } else { decimal PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_REAL_ACUM = Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_PESSOAL_REAL_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"]); decimal PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANTE_ACUM = Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]); @Html.Raw((string.Format("{0:N}", ((PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_REAL_ACUM - PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANTE_ACUM) )*100*-1 ))) <text>%</text>} }.
         </td>
             </table>  }}  @if (@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM"].Equals("calc"))  { <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_006"  style="display:none"></canvas><canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_007" style="display:none"></canvas>} else { if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM"])) == 0)  { <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_006"  style="display:none"></canvas><canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_007" style="display:none"></canvas>} else { <div class="page-breaker"></div> <table  class="graficos_textos"> <tr> <td class="titulos_mapas" colspan="2"> Benefícios Pós-Emprego </td> </tr>
     <tr>
       <td  style="width:50%"> 
           <p>Os Benefícios Pós-Emprego, em termos acumulados (de Jan a @Html.Raw(ViewData["MES_ACUM_REAL_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_REAL"])) atingiram o valor de 
             @if (@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM"].Equals("calc")) { <text>calc.</text> } else { @Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM"])))))} €,
         sendo que no período (de Jan a @Html.Raw(ViewData["MES_ACUM_ANTE_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_ANTE"])) atingiram o valor de
             @if (@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"].Equals("calc")) { <text>calc.</text> } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"]) ))))} €,
         verificando-se @if (@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else {if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM"]) ) >= (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"]) ))      {  <text> um crescimento de </text> ; }  else   {  <text> uma diminuição de </text>  ; }}
                         @if (@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else { if ((Convert.ToInt32(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"]) ).Equals(0)){<text> 0 %</text>  } else { decimal GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM"]) ; decimal GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"]) ; @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM - GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM) / Math.Abs(GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM)) * 100))) <text>%</text>} }.
               </p>
            <p> No mesmo período a Variação do Volume de Negócios (inclui Variação de Produção) foi de
             @if (@ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else { if ((Convert.ToInt32(@ViewData["IND_VN_ANTE_ACUM"]) ).Equals(0)){<text> 0 %</text>  } else { decimal IND_VN_REAL_ACUM = Convert.ToInt32(@ViewData["IND_VN_REAL_ACUM"]) ; decimal IND_VN_ANTE_ACUM = Convert.ToInt32(@ViewData["IND_VN_ANTE_ACUM"]) ; @Html.Raw((string.Format("{0:N}", ((IND_VN_REAL_ACUM - IND_VN_ANTE_ACUM) / Math.Abs(IND_VN_ANTE_ACUM)) * 100))) <text>%</text>} }.
            @if (@ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"].Equals("calc") || Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"]).Equals(0) || Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]).Equals(0)) { <text></text> } else { if (((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM"]) - Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"])) / Math.Abs(Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"]))) * 100 >= ((Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"]) - Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]))/Math.Abs(Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"])))*100 )        {  <text>Sendo a variação dos Benefícios Pós-Emprego superior à variação do Volume de Negócios verifica-se uma perda relativa de Rentabilidade Operacional </text> ; }  else   {  <text>Sendo a variação dos Benefícios Pós-Emprego inferior à variação do Volume de Negócios verifica-se um ganho relativo de Rentabilidade Operacional </text> ; } }.
       </p>
          </td>
         <td style="width:50%">
             <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_006"></canvas>
         </td>
     </tr>
          <tr>
         <td style="width:50%">
             <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_007"></canvas>
         </td>
         <td  style="width:50%">O Peso dos Benefícios Pós-Emprego no Volume de Negócios (VN: inclui variação de Produção), em termos acumulados (de Jan a @Html.Raw(ViewData["MES_ACUM_REAL_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_REAL"])), atingiu o valor de
             @if (@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_REAL_ACUM"].Equals("calc")) { <text>calc.</text>  } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"])) * 100)))} %
         sendo que no período (de Jan a @Html.Raw(ViewData["MES_ACUM_ANTE_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_ANTE"])) atingiu o valor de
             @if (@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc")) { <text>calc.</text>  } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"])) * 100)))} %,
         verificando-se @if (@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"].Equals("calc") || @ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc")) { <text>    -</text>  } else { if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"])) >= (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]))) {  <text> uma diminuição de eficiência </text> ; } else {  <text> um aumento de eficiência de </text>  ; } }
                         @if (@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"].Equals("calc") || @ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc")) { <text>    -</text>  } else { if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"])).Equals(0)){<text> 0 %</text>  } else { decimal PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_REAL_ACUM = Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"]); decimal PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANTE_ACUM = Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]); @Html.Raw((string.Format("{0:N}", ((PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_REAL_ACUM - PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANTE_ACUM) )*100*-1 ))) <text>%</text>} }.
         </td>

     </tr>

   </table>  }}  @if (@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM"].Equals("calc"))  { <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_008"  style="display:none"></canvas><canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_009" style="display:none"></canvas>} else { if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM"])) == 0)  { <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_008"  style="display:none"></canvas><canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_009" style="display:none"></canvas>} else { <div class="page-breaker"></div> <table  class="graficos_textos"> <tr> <td class="titulos_mapas" colspan="2"> Indemnizações </td> </tr>
     <tr>
       <td  style="width:50%"> 
           <p>As Indemnizações, em termos acumulados (de Jan a @Html.Raw(ViewData["MES_ACUM_REAL_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_REAL"])) atingiram o valor de 
             @if (@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM"].Equals("calc")) { <text>calc.</text> } else { @Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM"])))))} €,
         sendo que no período (de Jan a @Html.Raw(ViewData["MES_ACUM_ANTE_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_ANTE"])) atingiram o valor de
             @if (@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"].Equals("calc")) { <text>calc.</text> } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"]) ))))} €,
         verificando-se @if (@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else {if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM"]) ) >= (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"]) ))      {  <text> um crescimento de </text> ; }  else   {  <text> uma diminuição de </text>  ; }}
                         @if (@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else { if ((Convert.ToInt32(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"]) ).Equals(0)){<text> 0 %</text>  } else { decimal GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM"]) ; decimal GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"]) ; @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM - GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM) / Math.Abs(GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM)) * 100))) <text>%</text>} }.
               </p>
            <p> No mesmo período a Variação do Volume de Negócios (inclui Variação de Produção) foi de
             @if (@ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else { if ((Convert.ToInt32(@ViewData["IND_VN_ANTE_ACUM"]) ).Equals(0)){<text> 0 %</text>  } else { decimal IND_VN_REAL_ACUM = Convert.ToInt32(@ViewData["IND_VN_REAL_ACUM"]) ; decimal IND_VN_ANTE_ACUM = Convert.ToInt32(@ViewData["IND_VN_ANTE_ACUM"]) ; @Html.Raw((string.Format("{0:N}", ((IND_VN_REAL_ACUM - IND_VN_ANTE_ACUM) / Math.Abs(IND_VN_ANTE_ACUM)) * 100))) <text>%</text>} }.
            @if (@ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"].Equals("calc") || Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"]).Equals(0) || Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]).Equals(0)) { <text></text> } else { if (((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM"]) - Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"])) / Math.Abs(Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"]))) * 100 >= ((Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"]) - Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]))/Math.Abs(Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"])))*100 )        {  <text>Sendo a variação das Indemnizações superior à variação do Volume de Negócios verifica-se uma perda relativa de Rentabilidade Operacional </text> ; }  else   {  <text>Sendo a variação das Indemnizações inferior à variação do Volume de Negócios verifica-se um ganho relativo de Rentabilidade Operacional </text> ; } }.
       </p>
          </td>
         <td style="width:50%">
             <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_008"></canvas>
         </td>
     </tr>
          <tr>
         <td style="width:50%">
             <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_009"></canvas>
         </td>
         <td  style="width:50%">O Peso das Indemnizações no Volume de Negócios (VN: inclui variação de Produção), em termos acumulados (de Jan a @Html.Raw(ViewData["MES_ACUM_REAL_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_REAL"])), atingiu o valor de
             @if (@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_REAL_ACUM"].Equals("calc")) { <text>calc.</text>  } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"])) * 100)))} %
         sendo que no período (de Jan a @Html.Raw(ViewData["MES_ACUM_ANTE_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_ANTE"])) atingiu o valor de
             @if (@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc")) { <text>calc.</text>  } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"])) * 100)))} %,
         verificando-se @if (@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"].Equals("calc") || @ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc")) { <text>    -</text>  } else { if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"])) >= (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]))) {  <text> uma diminuição de eficiência </text> ; } else {  <text> um aumento de eficiência de </text>  ; } }
                         @if (@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"].Equals("calc") || @ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc")) { <text>    -</text>  } else { if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"])).Equals(0)){<text> 0 %</text>  } else { decimal PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_REAL_ACUM = Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"]); decimal PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANTE_ACUM = Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]); @Html.Raw((string.Format("{0:N}", ((PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_REAL_ACUM - PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANTE_ACUM) )*100*-1 ))) <text>%</text>} }.
         </td>

     </tr>

   </table>  }}  @if (@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM"].Equals("calc"))  { <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_010"  style="display:none"></canvas><canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_011" style="display:none"></canvas>} else { if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM"])) == 0)  { <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_010"  style="display:none"></canvas><canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_011" style="display:none"></canvas>} else { <div class="page-breaker"></div> <table  class="graficos_textos"> <tr> <td class="titulos_mapas" colspan="2"> Encargos s/ Remunerações </td> </tr>
     <tr>
       <td  style="width:50%"> 
           <p>Os Encargos s/ Remunerações, em termos acumulados (de Jan a @Html.Raw(ViewData["MES_ACUM_REAL_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_REAL"])) atingiram o valor de 
             @if (@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM"].Equals("calc")) { <text>calc.</text> } else { @Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM"])))))} €,
         sendo que no período (de Jan a @Html.Raw(ViewData["MES_ACUM_ANTE_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_ANTE"])) atingiram o valor de
             @if (@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"].Equals("calc")) { <text>calc.</text> } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"]) ))))} €,
         verificando-se @if (@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else {if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM"]) ) >= (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"]) ))      {  <text> um crescimento de </text> ; }  else   {  <text> uma diminuição de </text>  ; }}
                         @if (@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else { if ((Convert.ToInt32(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"]) ).Equals(0)){<text> 0 %</text>  } else { decimal GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM"]) ; decimal GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"]) ; @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM - GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM) / Math.Abs(GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM)) * 100))) <text>%</text>} }.
               </p>
            <p> No mesmo período a Variação do Volume de Negócios (inclui Variação de Produção) foi de
             @if (@ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else { if ((Convert.ToInt32(@ViewData["IND_VN_ANTE_ACUM"]) ).Equals(0)){<text> 0 %</text>  } else { decimal IND_VN_REAL_ACUM = Convert.ToInt32(@ViewData["IND_VN_REAL_ACUM"]) ; decimal IND_VN_ANTE_ACUM = Convert.ToInt32(@ViewData["IND_VN_ANTE_ACUM"]) ; @Html.Raw((string.Format("{0:N}", ((IND_VN_REAL_ACUM - IND_VN_ANTE_ACUM) / Math.Abs(IND_VN_ANTE_ACUM)) * 100))) <text>%</text>} }.
            @if (@ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"].Equals("calc") || Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"]).Equals(0) || Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]).Equals(0)) { <text></text> } else { if (((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM"]) - Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"])) / Math.Abs(Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"]))) * 100 >= ((Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"]) - Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]))/Math.Abs(Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"])))*100 )        {  <text>Sendo a variação dos Encargos s/ Remunerações superior à variação do Volume de Negócios verifica-se uma perda relativa de Rentabilidade Operacional </text> ; }  else   {  <text>Sendo a variação dos Encargos s/ Remunerações inferior à variação do Volume de Negócios verifica-se um ganho relativo de Rentabilidade Operacional </text> ; } }.
       </p>
          </td>
         <td style="width:50%">
             <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_010"></canvas>
         </td>
     </tr>
          <tr>
         <td style="width:50%">
             <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_011"></canvas>
         </td>
         <td  style="width:50%">O Peso dos Encargos s/ Remunerações no Volume de Negócios (VN: inclui variação de Produção), em termos acumulados (de Jan a @Html.Raw(ViewData["MES_ACUM_REAL_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_REAL"])), atingiu o valor de
             @if (@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_REAL_ACUM"].Equals("calc")) { <text>calc.</text>  } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"])) * 100)))} %
         sendo que no período (de Jan a @Html.Raw(ViewData["MES_ACUM_ANTE_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_ANTE"])) atingiu o valor de
             @if (@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc")) { <text>calc.</text>  } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"])) * 100)))} %,
         verificando-se @if (@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"].Equals("calc") || @ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc")) { <text>    -</text>  } else { if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"])) >= (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]))) {  <text> uma diminuição de eficiência </text> ; } else {  <text> um aumento de eficiência de </text>  ; } }
                         @if (@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"].Equals("calc") || @ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc")) { <text>    -</text>  } else { if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"])).Equals(0)){<text> 0 %</text>  } else { decimal PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_REAL_ACUM = Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"]); decimal PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANTE_ACUM = Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]); @Html.Raw((string.Format("{0:N}", ((PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_REAL_ACUM - PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANTE_ACUM) )*100*-1 ))) <text>%</text>} }.
         </td>

     </tr>
   </table>  }}  @if (@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM"].Equals("calc"))  { <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_012"  style="display:none"></canvas><canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_013" style="display:none"></canvas>} else { if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM"])) == 0)  { <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_012"  style="display:none"></canvas><canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_013" style="display:none"></canvas>} else { <div class="page-breaker"></div> <table  class="graficos_textos"> <tr> <td class="titulos_mapas" colspan="2"> Gastos de Acção Social </td> </tr>
     <tr>
       <td  style="width:50%"> 
           <p>Os Gastos de Acção Social, em termos acumulados (de Jan a @Html.Raw(ViewData["MES_ACUM_REAL_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_REAL"])) atingiram o valor de 
             @if (@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM"].Equals("calc")) { <text>calc.</text> } else { @Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM"])))))} €,
         sendo que no período (de Jan a @Html.Raw(ViewData["MES_ACUM_ANTE_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_ANTE"])) atingiram o valor de
             @if (@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"].Equals("calc")) { <text>calc.</text> } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"]) ))))} €,
         verificando-se @if (@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else {if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM"]) ) >= (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"]) ))      {  <text> um crescimento de </text> ; }  else   {  <text> uma diminuição de </text>  ; }}
                         @if (@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else { if ((Convert.ToInt32(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"]) ).Equals(0)){<text> 0 %</text>  } else { decimal GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM"]) ; decimal GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"]) ; @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM - GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM) / Math.Abs(GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM)) * 100))) <text>%</text>} }.
               </p>
            <p> No mesmo período a Variação do Volume de Negócios (inclui Variação de Produção) foi de
             @if (@ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else { if ((Convert.ToInt32(@ViewData["IND_VN_ANTE_ACUM"]) ).Equals(0)){<text> 0 %</text>  } else { decimal IND_VN_REAL_ACUM = Convert.ToInt32(@ViewData["IND_VN_REAL_ACUM"]) ; decimal IND_VN_ANTE_ACUM = Convert.ToInt32(@ViewData["IND_VN_ANTE_ACUM"]) ; @Html.Raw((string.Format("{0:N}", ((IND_VN_REAL_ACUM - IND_VN_ANTE_ACUM) / Math.Abs(IND_VN_ANTE_ACUM)) * 100))) <text>%</text>} }.
            @if (@ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"].Equals("calc") || Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"]).Equals(0) || Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]).Equals(0)) { <text></text> } else { if (((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM"]) - Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"])) / Math.Abs(Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"]))) * 100 >= ((Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"]) - Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]))/Math.Abs(Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"])))*100 )        {  <text>Sendo a variação dos Gastos de Acção Social superior à variação do Volume de Negócios verifica-se uma perda relativa de Rentabilidade Operacional </text> ; }  else   {  <text>Sendo a variação dos Gastos de Acção Social inferior à variação do Volume de Negócios verifica-se um ganho relativo de Rentabilidade Operacional </text> ; } }.
       </p>
          </td>
         <td style="width:50%">
             <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_012"></canvas>
         </td>
     </tr>
          <tr>
         <td style="width:50%">
             <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_013"></canvas>
         </td>
         <td  style="width:50%">O Peso dos Gastos de Acção Social no Volume de Negócios (VN: inclui variação de Produção), em termos acumulados (de Jan a @Html.Raw(ViewData["MES_ACUM_REAL_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_REAL"])), atingiu o valor de
             @if (@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_REAL_ACUM"].Equals("calc")) { <text>calc.</text>  } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"])) * 100)))} %
         sendo que no período (de Jan a @Html.Raw(ViewData["MES_ACUM_ANTE_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_ANTE"])) atingiu o valor de
             @if (@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc")) { <text>calc.</text>  } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"])) * 100)))} %,
         verificando-se @if (@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"].Equals("calc") || @ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc")) { <text>    -</text>  } else { if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"])) >= (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]))) {  <text> uma diminuição de eficiência </text> ; } else {  <text> um aumento de eficiência de </text>  ; } }
                         @if (@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"].Equals("calc") || @ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc")) { <text>    -</text>  } else { if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"])).Equals(0)){<text> 0 %</text>  } else { decimal PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_REAL_ACUM = Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"]); decimal PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANTE_ACUM = Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]); @Html.Raw((string.Format("{0:N}", ((PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_REAL_ACUM - PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANTE_ACUM) )*100*-1 ))) <text>%</text>} }.
         </td>

     </tr>
   </table>  }}  @if (@ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"].Equals("calc"))  { <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_014"  style="display:none"></canvas><canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_015" style="display:none"></canvas>} else { if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"])) == 0)  { <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_014"  style="display:none"></canvas><canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_015" style="display:none"></canvas>} else { <div class="page-breaker"></div> <table  class="graficos_textos"> <tr> <td class="titulos_mapas" colspan="2"> Outros Gastos com Pessoal </td> </tr>
     <tr>
       <td  style="width:50%"> 
           <p>Os Outros Gastos com Pessoal, em termos acumulados (de Jan a @Html.Raw(ViewData["MES_ACUM_REAL_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_REAL"])) atingiram o valor de 
             @if (@ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"].Equals("calc")) { <text>calc.</text> } else { @Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"])))))} €,
         sendo que no período (de Jan a @Html.Raw(ViewData["MES_ACUM_ANTE_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_ANTE"])) atingiram o valor de
             @if (@ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"].Equals("calc")) { <text>calc.</text> } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"]) ))))} €,
         verificando-se @if (@ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else {if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"]) ) >= (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"]) ))      {  <text> um crescimento de </text> ; }  else   {  <text> uma diminuição de </text>  ; }}
                         @if (@ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else { if ((Convert.ToInt32(@ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"]) ).Equals(0)){<text> 0 %</text>  } else { decimal GASTOS_PESSOAL_OUTROS_REAL_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"]) ; decimal GASTOS_PESSOAL_OUTROS_ANTE_ACUM = Convert.ToInt32(@ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"]) ; @Html.Raw((string.Format("{0:N}", ((GASTOS_PESSOAL_OUTROS_REAL_ACUM - GASTOS_PESSOAL_OUTROS_ANTE_ACUM) / Math.Abs(GASTOS_PESSOAL_OUTROS_ANTE_ACUM)) * 100))) <text>%</text>} }.
               </p>
            <p> No mesmo período a Variação do Volume de Negócios (inclui Variação de Produção) foi de
             @if (@ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc") ) { <text>    -</text>  } else { if ((Convert.ToInt32(@ViewData["IND_VN_ANTE_ACUM"]) ).Equals(0)){<text> 0 %</text>  } else { decimal IND_VN_REAL_ACUM = Convert.ToInt32(@ViewData["IND_VN_REAL_ACUM"]) ; decimal IND_VN_ANTE_ACUM = Convert.ToInt32(@ViewData["IND_VN_ANTE_ACUM"]) ; @Html.Raw((string.Format("{0:N}", ((IND_VN_REAL_ACUM - IND_VN_ANTE_ACUM) / Math.Abs(IND_VN_ANTE_ACUM)) * 100))) <text>%</text>} }.
            @if (@ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"].Equals("calc") || Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"]).Equals(0) || Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]).Equals(0)) { <text></text> } else { if (((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"]) - Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"])) / Math.Abs(Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"]))) * 100 >= ((Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"]) - Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]))/Math.Abs(Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"])))*100 )        {  <text>Sendo a variação dos Outros Gastos com Pessoal superior à variação do Volume de Negócios verifica-se uma perda relativa de Rentabilidade Operacional </text> ; }  else   {  <text>Sendo a variação dos Outros Gastos com Pessoal inferior à variação do Volume de Negócios verifica-se um ganho relativo de Rentabilidade Operacional </text> ; } }.
       </p>
          </td>
         <td style="width:50%">
             <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_014"></canvas>
         </td>
     </tr>
          <tr>
         <td style="width:50%">
             <canvas id="GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_015"></canvas>
         </td>
         <td  style="width:50%">O Peso dos Outros Gastos com Pessoal no Volume de Negócios (VN: inclui variação de Produção), em termos acumulados (de Jan a @Html.Raw(ViewData["MES_ACUM_REAL_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_REAL"])), atingiu o valor de
             @if (@ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_REAL_ACUM"].Equals("calc")) { <text>calc.</text>  } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"])) * 100)))} %
         sendo que no período (de Jan a @Html.Raw(ViewData["MES_ACUM_ANTE_EXTENSO"]) de @Html.Raw(ViewData["ANO_VERSAO_ANTE"])) atingiu o valor de
             @if (@ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc")) { <text>calc.</text>  } else {@Html.Raw((string.Format("{0:N}", (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"])) * 100)))} %,
         verificando-se @if (@ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"].Equals("calc") || @ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc")) { <text>    -</text>  } else { if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"])) >= (Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]))) {  <text> uma diminuição de eficiência </text> ; } else {  <text> um aumento de eficiência de </text>  ; } }
                         @if (@ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"].Equals("calc") || @ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"].Equals("calc") || @ViewData["IND_VN_REAL_ACUM"].Equals("calc") || @ViewData["IND_VN_ANTE_ACUM"].Equals("calc")) { <text>    -</text>  } else { if ((Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"])).Equals(0)){<text> 0 %</text>  } else { decimal PESO_GASTOS_PESSOAL_OUTROS_VN_REAL_ACUM = Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_REAL_ACUM"]); decimal PESO_GASTOS_PESSOAL_OUTROS_VN_ANTE_ACUM = Convert.ToDecimal(@ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"]) / Convert.ToDecimal(@ViewData["IND_VN_ANTE_ACUM"]); @Html.Raw((string.Format("{0:N}", ((PESO_GASTOS_PESSOAL_OUTROS_VN_REAL_ACUM - PESO_GASTOS_PESSOAL_OUTROS_VN_ANTE_ACUM) )*100*-1 ))) <text>%</text>} }.
         </td>

     </tr>
    
</table>
}}
@*<div id="GRAVAROPER_DIRXX"  style="display:none">
   

    @using (Html.BeginForm("BI_CONF_VERSAO_VARIAVEIS_USER_ALT", "BI", FormMethod.Get))
    {
       <div id="GRAVAR" class="GRAVAR">
    @Html.ActionLink("GRAVAR","BI_CONF_VERSAO_VARIAVEIS_USER_ALT", "BI", new { 
    Pesquisa_User = "tjalmeida",  id_camp = "id_camp", campocalc_resultado="campocalc_resultado"}, null)
</div> 
       
    }
</div>*@

<div id="CONFIGURARXX" style="display:none">
   

    @using (Html.BeginForm("GRC_ALERTAS_RESUMO", "GRC", FormMethod.Get))
    {
       <div id="CONFIGURAR_CAMPO" class="CONFIGURAR_CAMPO">
        @Html.ActionLink("Configurar","BI_CAMP_CALC", "BI", new { id_camp_calc = "id_camp_calc", Pesquisa_User = "tjalmeida", versao="versao"}, null)
       </div> 
            
    }
</div>

@*<div id="grid_mes_ini_ano_n" class="oculta_na_impressao_ tooltip"> <span class="tooltiptext">Clique para definir outro mês, pressionando a tecla Enter para Gravar. </span> @Html.Action("BI_CONF_VERSAO_VARIAVEIS_USER_Result", "BI", new { Pesquisa_User = "tjalmeida", versao = @ViewData["versao_real"], ANO = "", MES_INI_PER = "MES_INI_PER", MES_FIN_PER = "", MES_ACUM = "", TIPO_APUR_CMVMC = "" }) </div>*@
<div id="grid_mes_ini_ano_n" class="oculta_na_impressao_ tooltip">
    @using (Html.BeginForm("BI_CONF_VERSAO_VARIAVEIS_USER_ALT", "BI", new { Pesquisa_User = "tjalmeida", versao = @ViewData["versao_real"], id_camp = ViewData["ID_MES_INI_PER_REAL"], FormMethod.Get }))
    { <div class="tooltip" style="width:100%">
        @Html.DropDownList("campocalc_resultado", new SelectList(ViewBag.LISTA_MESES_REAL, "id_mes", "mes", ViewData["MES_INI_PER_REAL"]), new
   {
       @class = "form -control",
       @style = "width:100%; height:30px; text-align-last:center;",
       onchange = "this.form.submit();"@*, dir = "rtl"*@ })
        <span class="tooltiptext">Clique na lista para selecionar outro mês para a Análise do Periodo Corrente.</span>
    </div>
    }
</div>
@*<div id="grid_mes_ini_ano_n-1" class="oculta_na_impressao_ tooltip"> <span class="tooltiptext">Clique para definir outro mês, pressionando a tecla Enter para Gravar. </span> @Html.Action("BI_CONF_VERSAO_VARIAVEIS_USER_Result", "BI", new { Pesquisa_User = "tjalmeida", versao = @ViewData["versao_ante"], ANO = "", MES_INI_PER = "MES_INI_PER", MES_FIN_PER = "", MES_ACUM = "", TIPO_APUR_CMVMC = "" }) </div>*@
<div id="grid_mes_ini_ano_n-1" class="oculta_na_impressao_ tooltip">
    @using (Html.BeginForm("BI_CONF_VERSAO_VARIAVEIS_USER_ALT", "BI", new { Pesquisa_User = "tjalmeida", versao = @ViewData["versao_ante"], id_camp = ViewData["ID_MES_INI_PER_ANTE"], FormMethod.Get }))
            { <div class="tooltip" style="width:100%">
        @Html.DropDownList("campocalc_resultado", new SelectList(ViewBag.LISTA_MESES_ANTE, "id_mes", "mes", ViewData["MES_INI_PER_ANTE"]), new { @class = "form -control", @style = "width:100%; height:30px; text-align-last:center;", onchange = "this.form.submit();" })
        <span class="tooltiptext">Clique na lista para selecionar outro mês para a Análise do Periodo Corrente.</span>
    </div>
    }
</div>
@*<div id="grid_mes_fin_ano_n" class="oculta_na_impressao_ tooltip"> <span class="tooltiptext">Clique para definir outro mês, pressionando a tecla Enter para Gravar. </span> @Html.Action("BI_CONF_VERSAO_VARIAVEIS_USER_Result", "BI", new { Pesquisa_User = "tjalmeida", versao = @ViewData["versao_real"], ANO = "", MES_INI_PER = "", MES_FIN_PER = "MES_FIN_PER", MES_ACUM = "", TIPO_APUR_CMVMC = "" }) </div>*@
<div id="grid_mes_fin_ano_n" class="oculta_na_impressao_ tooltip">
    @using (Html.BeginForm("BI_CONF_VERSAO_VARIAVEIS_USER_ALT", "BI", new { Pesquisa_User = "tjalmeida", versao = @ViewData["versao_real"], id_camp = ViewData["ID_MES_FIN_PER_REAL"], FormMethod.Get }))
    { <div class="tooltip" style="width:100%">
        @Html.DropDownList("campocalc_resultado", new SelectList(ViewBag.LISTA_MESES_REAL, "id_mes", "mes", ViewData["MES_FIN_PER_REAL"]), new { @class = "form -control", @style = "width:100%; height:30px; text-align-last:center;", onchange = "this.form.submit();" })
        <span class="tooltiptext">Clique na lista para selecionar outro mês para a Análise do Periodo Corrente.</span>
    </div>
    }
</div>
@*<div id="grid_mes_fin_ano_n-1" class="oculta_na_impressao_ tooltip"> <span class="tooltiptext">Clique para definir outro mês, pressionando a tecla Enter para Gravar. </span> @Html.Action("BI_CONF_VERSAO_VARIAVEIS_USER_Result", "BI", new { Pesquisa_User = "tjalmeida", versao = @ViewData["versao_ante"], ANO = "", MES_INI_PER = "", MES_FIN_PER = "MES_FIN_PER", MES_ACUM = "", TIPO_APUR_CMVMC = "" }) </div>*@
<div id="grid_mes_fin_ano_n-1" class="oculta_na_impressao_ tooltip">
    @using (Html.BeginForm("BI_CONF_VERSAO_VARIAVEIS_USER_ALT", "BI", new { Pesquisa_User = "tjalmeida", versao = @ViewData["versao_ante"], id_camp = ViewData["ID_MES_FIN_PER_ANTE"], FormMethod.Get }))
            { <div class="tooltip" style="width:100%">
        @Html.DropDownList("campocalc_resultado", new SelectList(ViewBag.LISTA_MESES_ANTE, "id_mes", "mes", ViewData["MES_FIN_PER_ANTE"]), new { @class = "form -control", @style = "width:100%; height:30px; text-align-last:center;", onchange = "this.form.submit();" })
        <span class="tooltiptext">Clique na lista para selecionar outro mês para a Análise do Periodo Corrente.</span>
    </div>
    }
</div>
@*<div id="grid_mes_acum_ano_n" class="oculta_na_impressao_ tooltip"> <span class="tooltiptext">Clique para definir outro mês, pressionando a tecla Enter para Gravar. </span> @Html.Action("BI_CONF_VERSAO_VARIAVEIS_USER_Result", "BI", new { Pesquisa_User = "tjalmeida", versao = @ViewData["versao_real"], ANO = "", MES_INI_PER = "", MES_FIN_PER = "", MES_ACUM = "MES_ACUM", TIPO_APUR_CMVMC = "" }) </div>*@
<div id="grid_mes_acum_ano_n" class="oculta_na_impressao_ tooltip">
    @using (Html.BeginForm("BI_CONF_VERSAO_VARIAVEIS_USER_ALT", "BI", new { Pesquisa_User = "tjalmeida", versao = @ViewData["versao_real"], id_camp = ViewData["ID_MES_ACUM_REAL"], FormMethod.Get }))
            { <div class="tooltip" style="width:100%">
        @Html.DropDownList("campocalc_resultado", new SelectList(ViewBag.LISTA_MESES_REAL, "id_mes", "mes", ViewData["MES_ACUM_REAL"]), new { @class = "form -control", @style = "width:100%; height:30px; text-align-last:center;", onchange = "this.form.submit();" })
        <span class="tooltiptext">Clique na lista para selecionar outro mês para a Análise do Acumulado.</span>
    </div>
    }
</div>
@*<div id="grid_mes_acum_ano_n-1" class="oculta_na_impressao_ tooltip"> <span class="tooltiptext">Clique para definir outro mês, pressionando a tecla Enter para Gravar. </span> @Html.Action("BI_CONF_VERSAO_VARIAVEIS_USER_Result", "BI", new { Pesquisa_User = "tjalmeida", versao = @ViewData["versao_ante"], ANO = "", MES_INI_PER = "", MES_FIN_PER = "", MES_ACUM = "MES_ACUM", TIPO_APUR_CMVMC = "" }) </div>*@
<div id="grid_mes_acum_ano_n-1" class="oculta_na_impressao_ tooltip">
    @using (Html.BeginForm("BI_CONF_VERSAO_VARIAVEIS_USER_ALT", "BI", new { Pesquisa_User = "tjalmeida", versao = @ViewData["versao_ante"], id_camp = ViewData["ID_MES_ACUM_ANTE"], FormMethod.Get }))
    { <div class="tooltip" style="width:100%">
        @Html.DropDownList("campocalc_resultado", new SelectList(ViewBag.LISTA_MESES_ANTE, "id_mes", "mes", ViewData["MES_ACUM_ANTE"]), new { @class = "form -control", @style = "width:100%; height:30px; text-align-last:center;", onchange = "this.form.submit();" })
        <span class="tooltiptext">Clique na lista para selecionar outro mês para a Análise do Acumulado.</span>
    </div>
    }
</div>

@section scripts {

    @{int DESATIVA_DATATBLE = Convert.ToInt32(@ViewData["desativa_datatable"]) ;
}
        @if (DESATIVA_DATATBLE.Equals(1)) { } else {

    <script src="@Url.Content("~/Scripts/jquery.dataTables.min.js")"></script>
    <script src="@Url.Content("~/Scripts/dataTables.fixedColumns.min.js")"></script>
    <script src="@Url.Content("~/Scripts/dataTables.buttons.min.js")"></script>
    <script src="@Url.Content("~/Scripts/buttons.flash.min.js")"></script>
    <script src="@Url.Content("~/Scripts/jszip.min.js")"></script>
    <script src="@Url.Content("~/Scripts/pdfmake.min.js")"></script>
    <script src="@Url.Content("~/Scripts/vfs_fonts.js")"></script>
    <script src="@Url.Content("~/Scripts/buttons.html5.min.js")"></script>
    <script src="@Url.Content("~/Scripts/buttons.print.min.js")"></script>
    <script src="@Url.Content("~/Scripts/dataTables.responsive.min.js")"></script>
    <script src="@Url.Content("~/Scripts/dataTables.fixedHeader.min.js")"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/fixedheader/3.1.2/css/fixedHeader.dataTables.min.css">
}
<script src="@Url.Content("~/Scripts/chart.js@2.8.0.js")"></script>


    <script type="text/javascript">

        //NOTA TA: REFRESCA PAGINA DE 20 EM 20 SEGUNDOS SE HEXISTIREM CÉLULAS A CALCULAR
        
        setTimeout(function() {
            var num_car = $('#GASTOS_PESSOAL_MENSAL_COMP td').text().length
            var num_car_ = $('#GASTOS_PESSOAL_MENSAL_COMP td').text().replace('calc','').length
     
            if(num_car==num_car_) {} else 
            {
                window.location.reload(1);
                  
            }
        }, 20000);


        $(document).ready(function () {

            var num_car = $('#GASTOS_PESSOAL_MENSAL_COMP td').text().length
            var num_car_ = $('#GASTOS_PESSOAL_MENSAL_COMP td').text().replace('calc','').length
     
            if(num_car==num_car_) {} else 
            {
                
                $(".calcular").attr('style', 'display:block');
            }


@*------------------------------------------------GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP-----------------------------------------------------------*@

@*<script>*@

        var ANO_VERSAO_REAL = @Html.Raw((string.Format("{0:0}", ViewData["ANO_VERSAO_REAL"])));
        var ANO_VERSAO_REAL_ = ANO_VERSAO_REAL.toString().substr(ANO_VERSAO_REAL.toString().length - 2,ANO_VERSAO_REAL.toString().length);

        var ANO_VERSAO_ANTE = @Html.Raw((string.Format("{0:0}", ViewData["ANO_VERSAO_ANTE"])));
        var ANO_VERSAO_ANTE_ = ANO_VERSAO_ANTE.toString().substr(ANO_VERSAO_ANTE.toString().length - 2,ANO_VERSAO_ANTE.toString().length);



        if (@Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc")) { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_REAL_ACUM = 0; } else { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_REAL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_REAL_ACUM"]))) / @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_REAL_ACUM"]))); };
            if (@Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc")) { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANTE_ACUM = 0; } else { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANTE_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANTE_ACUM"]))) / @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANTE_ACUM"]))); };
                if (PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_REAL_ACUM>PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANTE_ACUM) {var PESO_GASTOS_PESSOAL_REM_ORG_SOC_NAO_MOSTRAR = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANTE_ACUM; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_INEFICIENCIA = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_REAL_ACUM-PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANTE_ACUM;} else {var PESO_GASTOS_PESSOAL_REM_ORG_SOC_NAO_MOSTRAR = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_REAL_ACUM; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_EFICIENCIA = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANTE_ACUM-PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_REAL_ACUM;}

                if (@Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_REM_PESSOAL_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc")) { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_REAL_ACUM = 0; } else { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_REAL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_REAL_ACUM"]))) / @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_REAL_ACUM"]))); };
                    if (@Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc")) { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANTE_ACUM = 0; } else { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANTE_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANTE_ACUM"]))) / @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANTE_ACUM"]))); };
                        if (PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_REAL_ACUM>PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANTE_ACUM) {var PESO_GASTOS_PESSOAL_REM_PESSOAL_NAO_MOSTRAR = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANTE_ACUM; var PESO_GASTOS_PESSOAL_REM_PESSOAL_INEFICIENCIA = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_REAL_ACUM-PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANTE_ACUM;} else {var PESO_GASTOS_PESSOAL_REM_PESSOAL_NAO_MOSTRAR = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_REAL_ACUM; var PESO_GASTOS_PESSOAL_REM_PESSOAL_EFICIENCIA = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANTE_ACUM-PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_REAL_ACUM;}

                        if (@Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc")) { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_REAL_ACUM = 0; } else { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_REAL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_REAL_ACUM"]))) / @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_REAL_ACUM"]))); };
                            if (@Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc")) { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANTE_ACUM = 0; } else { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANTE_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANTE_ACUM"]))) / @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANTE_ACUM"]))); };
                                if (PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_REAL_ACUM>PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANTE_ACUM) {var PESO_GASTOS_PESSOAL_BEN_POS_EMP_NAO_MOSTRAR = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANTE_ACUM; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_INEFICIENCIA = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_REAL_ACUM-PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANTE_ACUM;} else {var PESO_GASTOS_PESSOAL_BEN_POS_EMP_NAO_MOSTRAR = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_REAL_ACUM; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_EFICIENCIA = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANTE_ACUM-PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_REAL_ACUM;}

                                if (@Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc")) { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_REAL_ACUM = 0; } else { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_REAL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_REAL_ACUM"]))) / @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_REAL_ACUM"]))); };
                                    if (@Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc")) { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANTE_ACUM = 0; } else { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANTE_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANTE_ACUM"]))) / @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANTE_ACUM"]))); };
                                        if (PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_REAL_ACUM>PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANTE_ACUM) {var PESO_GASTOS_PESSOAL_INDEMNIZACOES_NAO_MOSTRAR = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANTE_ACUM; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_INEFICIENCIA = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_REAL_ACUM-PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANTE_ACUM;} else {var PESO_GASTOS_PESSOAL_INDEMNIZACOES_NAO_MOSTRAR = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_REAL_ACUM; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_EFICIENCIA = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANTE_ACUM-PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_REAL_ACUM;}

                                        if (@Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc")) { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_REAL_ACUM = 0; } else { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_REAL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_REAL_ACUM"]))) / @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_REAL_ACUM"]))); };
                                            if (@Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc")) { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANTE_ACUM = 0; } else { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANTE_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANTE_ACUM"]))) / @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANTE_ACUM"]))); };
                                                if (PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_REAL_ACUM>PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANTE_ACUM) {var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_NAO_MOSTRAR = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANTE_ACUM; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_INEFICIENCIA = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_REAL_ACUM-PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANTE_ACUM;} else {var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_NAO_MOSTRAR = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_REAL_ACUM; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_EFICIENCIA = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANTE_ACUM-PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_REAL_ACUM;}

                                                if (@Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc")) { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_REAL_ACUM = 0; } else { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_REAL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_REAL_ACUM"]))) / @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_REAL_ACUM"]))); };
                                                    if (@Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc")) { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANTE_ACUM = 0; } else { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANTE_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANTE_ACUM"]))) / @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANTE_ACUM"]))); };
                                                        if (PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_REAL_ACUM>PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANTE_ACUM) {var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_NAO_MOSTRAR = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANTE_ACUM; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_INEFICIENCIA = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_REAL_ACUM-PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANTE_ACUM;} else {var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_NAO_MOSTRAR = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_REAL_ACUM; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_EFICIENCIA = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANTE_ACUM-PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_REAL_ACUM;}

                                                        if (@Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_REAL_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc")) { var PESO_GASTOS_PESSOAL_OUTROS_VN_REAL_ACUM = 0; } else { var PESO_GASTOS_PESSOAL_OUTROS_VN_REAL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_REAL_ACUM"]))) / @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_REAL_ACUM"]))); };
                                                            if (@Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc") || @Html.Raw(Json.Encode(ViewData["IND_VN_ANTE_ACUM"]))==("calc")) { var PESO_GASTOS_PESSOAL_OUTROS_VN_ANTE_ACUM = 0; } else { var PESO_GASTOS_PESSOAL_OUTROS_VN_ANTE_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANTE_ACUM"]))) / @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANTE_ACUM"]))); };
                                                                if (PESO_GASTOS_PESSOAL_OUTROS_VN_REAL_ACUM>PESO_GASTOS_PESSOAL_OUTROS_VN_ANTE_ACUM) {var PESO_GASTOS_PESSOAL_OUTROS_NAO_MOSTRAR = PESO_GASTOS_PESSOAL_OUTROS_VN_ANTE_ACUM; var PESO_GASTOS_PESSOAL_OUTROS_INEFICIENCIA = PESO_GASTOS_PESSOAL_OUTROS_VN_REAL_ACUM-PESO_GASTOS_PESSOAL_OUTROS_VN_ANTE_ACUM;} else {var PESO_GASTOS_PESSOAL_OUTROS_NAO_MOSTRAR = PESO_GASTOS_PESSOAL_OUTROS_VN_REAL_ACUM; var PESO_GASTOS_PESSOAL_OUTROS_EFICIENCIA = PESO_GASTOS_PESSOAL_OUTROS_VN_ANTE_ACUM-PESO_GASTOS_PESSOAL_OUTROS_VN_REAL_ACUM;}


  Chart.defaults.groupableBar = Chart.helpers.clone(Chart.defaults.bar);

   var helpers = Chart.helpers;
   Chart.controllers.groupableBar = Chart.controllers.bar.extend({
       draw: function(ease) {
           Chart.controllers.bar.prototype.draw.apply(this, arguments);

           var self = this;
           // check if this is the last dataset in this stack
           if (!this.chart.data.datasets.some(function (dataset, index) { return (dataset.stack === self.getDataset().stack && index > self.index); })) {
               var ctx = this.chart.chart.ctx;
               ctx.save();
               ctx.textAlign = 'center';
               ctx.textBaseline = 'bottom';
               ctx.fillStyle = this.chart.options.defaultFontColor;
               // loop through all its rectangles and draw the label
               helpers.each(self.getMeta().data, function (rectangle, index) {
                   ctx.fillText(this.getDataset().stack, rectangle._model.x, rectangle._model.y)
               }, this);
               ctx.restore();
           }
       },

       calculateBarX: function (index, datasetIndex) {
           // position the bars based on the stack index
           var stackIndex = this.getMeta().stackIndex;
           return Chart.controllers.bar.prototype.calculateBarX.apply(this, [index, stackIndex]);
       },

       hideOtherStacks: function (datasetIndex) {
           var meta = this.getMeta();
           var stackIndex = meta.stackIndex;

           this.hiddens = [];
           for (var i = 0; i < datasetIndex; i++) {
               var dsMeta = this.chart.getDatasetMeta(i);
               if (dsMeta.stackIndex !== stackIndex) {
                   this.hiddens.push(dsMeta.hidden);
                   dsMeta.hidden = true;
               }
           }
       },

       unhideOtherStacks: function (datasetIndex) {
           var meta = this.getMeta();
           var stackIndex = meta.stackIndex;

           for (var i = 0; i < datasetIndex; i++) {
               var dsMeta = this.chart.getDatasetMeta(i);
               if (dsMeta.stackIndex !== stackIndex) {
                   dsMeta.hidden = this.hiddens.unshift();
               }
           }
       },

       calculateBarY: function (index, datasetIndex) {
           this.hideOtherStacks(datasetIndex);
           var barY = Chart.controllers.bar.prototype.calculateBarY.apply(this, [index, datasetIndex]);
           this.unhideOtherStacks(datasetIndex);
           return barY;
       },

       calculateBarBase: function (datasetIndex, index) {
           this.hideOtherStacks(datasetIndex);
           var barBase = Chart.controllers.bar.prototype.calculateBarBase.apply(this, [datasetIndex, index]);
           this.unhideOtherStacks(datasetIndex);
           return barBase;
       },

       getBarCount: function () {
           var stacks = [];

           // put the stack index in the dataset meta
           Chart.helpers.each(this.chart.data.datasets, function (dataset, datasetIndex) {
               var meta = this.chart.getDatasetMeta(datasetIndex);
               if (meta.bar && this.chart.isDatasetVisible(datasetIndex)) {
                   var stackIndex = stacks.indexOf(dataset.stack);
                   if (stackIndex === -1) {
                       stackIndex = stacks.length;
                       stacks.push(dataset.stack);
                   }
                   meta.stackIndex = stackIndex;
               }
           }, this);

           this.getMeta().stacks = stacks;
           return stacks.length;
       },
   });

   var data = {
       labels: ["Remuneração de Orgãos Sociais",
                "Remuneração de Pessoal",
                "Benefícios Pós-Emprego",
                "Indemnizações",
                "Encargos s/ Remunerações",
                "Gastos de Acção Social",
                "Outros Gastos com Pessoal"],
       datasets: [
         {
             label: 'Peso G. Pessoal vs VN(ac) ' + '20'+ANO_VERSAO_REAL_,
             backgroundColor: "rgba(126,42,02,0.3)",
             data: [
                    (PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_REAL_ACUM*100).toFixed(3),
                    (PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_REAL_ACUM*100).toFixed(3),
                    (PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_REAL_ACUM*100).toFixed(3),
                    (PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_REAL_ACUM*100).toFixed(3),
                    (PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_REAL_ACUM*100).toFixed(3),
                    (PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_REAL_ACUM*100).toFixed(3),
                    (PESO_GASTOS_PESSOAL_OUTROS_VN_REAL_ACUM*100).toFixed(3),

             ],
             stack: 'Stack 1'
         },
         {
             label: "Não Mostrar",
             backgroundColor: "rgba(255,255,255,0.2)",
             data: [
                 (PESO_GASTOS_PESSOAL_REM_ORG_SOC_NAO_MOSTRAR*100).toFixed(3),
                 (PESO_GASTOS_PESSOAL_REM_PESSOAL_NAO_MOSTRAR*100).toFixed(3),
                 (PESO_GASTOS_PESSOAL_BEN_POS_EMP_NAO_MOSTRAR*100).toFixed(3),
                 (PESO_GASTOS_PESSOAL_INDEMNIZACOES_NAO_MOSTRAR*100).toFixed(3),
                 (PESO_GASTOS_PESSOAL_ENC_SEG_SOC_NAO_MOSTRAR*100).toFixed(3),
                 (PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_NAO_MOSTRAR*100).toFixed(3),
                 (PESO_GASTOS_PESSOAL_OUTROS_NAO_MOSTRAR*100).toFixed(3),

             ],
             stack: 'Stack 2'
         },
          {
              label: "Ineficiência",
              backgroundColor: "rgba(255,99,132,0.9)",
              data: [
                  (PESO_GASTOS_PESSOAL_REM_ORG_SOC_INEFICIENCIA*100).toFixed(3),
                  (PESO_GASTOS_PESSOAL_REM_PESSOAL_INEFICIENCIA*100).toFixed(3),
                  (PESO_GASTOS_PESSOAL_BEN_POS_EMP_INEFICIENCIA*100).toFixed(3),
                  (PESO_GASTOS_PESSOAL_INDEMNIZACOES_INEFICIENCIA*100).toFixed(3),
                  (PESO_GASTOS_PESSOAL_ENC_SEG_SOC_INEFICIENCIA*100).toFixed(3),
                  (PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_INEFICIENCIA*100).toFixed(3),
                  (PESO_GASTOS_PESSOAL_OUTROS_INEFICIENCIA*100).toFixed(3),

              ],
              stack: 'Stack 2'
          },
         {
             label: "Eficiência",
             backgroundColor: "rgba(99,255,132,0.9)",
             data: [
                 (PESO_GASTOS_PESSOAL_REM_ORG_SOC_EFICIENCIA*100).toFixed(3),
                 (PESO_GASTOS_PESSOAL_REM_PESSOAL_EFICIENCIA*100).toFixed(3),
                 (PESO_GASTOS_PESSOAL_BEN_POS_EMP_EFICIENCIA*100).toFixed(3),
                 (PESO_GASTOS_PESSOAL_INDEMNIZACOES_EFICIENCIA*100).toFixed(3),
                 (PESO_GASTOS_PESSOAL_ENC_SEG_SOC_EFICIENCIA*100).toFixed(3),
                 (PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_EFICIENCIA*100).toFixed(3),
                 (PESO_GASTOS_PESSOAL_OUTROS_EFICIENCIA*100).toFixed(3),

             ],
             stack: 'Stack 2'
         },


         {
             label: 'Peso G. Pessoal vs VN(ac) ' + '20'+ANO_VERSAO_ANTE_,
             backgroundColor: "rgba(0,75,0,0.3)",
             data: [
                 (PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANTE_ACUM *100).toFixed(3),
                 (PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANTE_ACUM *100).toFixed(3),
                 (PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANTE_ACUM *100).toFixed(3),
                 (PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANTE_ACUM *100).toFixed(3),
                 (PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANTE_ACUM *100).toFixed(3),
                 (PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANTE_ACUM *100).toFixed(3),
                 (PESO_GASTOS_PESSOAL_OUTROS_VN_ANTE_ACUM *100).toFixed(3),

             ],
             stack: 'Stack 3'
         },

       ]
   };


   var ctx = document.getElementById("Peso_GASTOS_PESSOAL_Comp").getContext("2d");
   new Chart(ctx, {
       type: 'horizontalBar',
       data: data,
       options: {

           legend: {
               display: true,
               labels: {

                   filter: function (legendItem, data) {
                       return legendItem.text != "Não Mostrar"
                   },
               },
           },
           scales: {
               xAxes: [{

                   stacked: true,

                   ticks: {
                       min: 0,
                       callback: function(value, index, values) {
                           return value.toLocaleString()+ "%";},
                   },

               }],
               yAxes: [{
                   ticks: {
                       beginAtZero: true,

                   },
                   stacked: true,
               }]

           }

       }
   });

@*</script>*@


@*------------------------------------------------GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_002-----------------------------------------------------------*@
@*<script>*@

    var ANO_VERSAO_REAL = @Html.Raw((string.Format("{0:0}", ViewData["ANO_VERSAO_REAL"])));
    var ANO_VERSAO_REAL_ = ANO_VERSAO_REAL.toString().substr(ANO_VERSAO_REAL.toString().length - 2,ANO_VERSAO_REAL.toString().length);

    var ANO_VERSAO_ANTE = @Html.Raw((string.Format("{0:0}", ViewData["ANO_VERSAO_ANTE"])));
    var ANO_VERSAO_ANTE_ = ANO_VERSAO_ANTE.toString().substr(ANO_VERSAO_ANTE.toString().length - 2,ANO_VERSAO_ANTE.toString().length);



    if(@ViewData["MES_ACUM_REAL"]<1){ var IND_VN_ANO_N_JANEIRO = 'nd'; var IND_VN_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JANEIRO"]))); var IND_VN_ANO_N_JANEIRO_MAX_MIN = IND_VN_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var IND_VN_ANO_N_FEVEREIRO = 'nd'; var IND_VN_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_FEVEREIRO"]))); var IND_VN_ANO_N_FEVEREIRO_MAX_MIN = IND_VN_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var IND_VN_ANO_N_MARCO = 'nd'; var IND_VN_ANO_N_MARCO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_MARCO"]))); var IND_VN_ANO_N_MARCO_MAX_MIN = IND_VN_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var IND_VN_ANO_N_ABRIL = 'nd'; var IND_VN_ANO_N_ABRIL_MAX_MIN = 0;  } else { var IND_VN_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_ABRIL"]))); var IND_VN_ANO_N_ABRIL_MAX_MIN = IND_VN_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var IND_VN_ANO_N_MAIO = 'nd'; var IND_VN_ANO_N_MAIO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_MAIO"]))); var IND_VN_ANO_N_MAIO_MAX_MIN = IND_VN_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var IND_VN_ANO_N_JUNHO = 'nd'; var IND_VN_ANO_N_JUNHO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JUNHO"]))); var IND_VN_ANO_N_JUNHO_MAX_MIN = IND_VN_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var IND_VN_ANO_N_JULHO = 'nd'; var IND_VN_ANO_N_JULHO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JULHO"]))); var IND_VN_ANO_N_JULHO_MAX_MIN = IND_VN_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var IND_VN_ANO_N_AGOSTO = 'nd'; var IND_VN_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_AGOSTO"]))); var IND_VN_ANO_N_AGOSTO_MAX_MIN = IND_VN_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var IND_VN_ANO_N_SETEMBRO = 'nd'; var IND_VN_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_SETEMBRO"]))); var IND_VN_ANO_N_SETEMBRO_MAX_MIN = IND_VN_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var IND_VN_ANO_N_OUTUBRO = 'nd'; var IND_VN_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_OUTUBRO"]))); var IND_VN_ANO_N_OUTUBRO_MAX_MIN = IND_VN_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var IND_VN_ANO_N_NOVEMBRO = 'nd'; var IND_VN_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_NOVEMBRO"]))); var IND_VN_ANO_N_NOVEMBRO_MAX_MIN = IND_VN_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var IND_VN_ANO_N_DEZEMBRO = 'nd'; var IND_VN_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_DEZEMBRO"]))); var IND_VN_ANO_N_DEZEMBRO_MAX_MIN = IND_VN_ANO_N_DEZEMBRO };

    if(@ViewData["MES_ACUM_REAL"]<1){ var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO = 'nd'; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO"]))); var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO_MAX_MIN = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO = 'nd'; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO"]))); var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO_MAX_MIN = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO = 'nd'; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO"]))); var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO_MAX_MIN = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL = 'nd'; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL"]))); var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL_MAX_MIN = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO = 'nd'; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO"]))); var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO_MAX_MIN = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO = 'nd'; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO"]))); var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO_MAX_MIN = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO = 'nd'; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO"]))); var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO_MAX_MIN = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO = 'nd'; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO"]))); var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO_MAX_MIN = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO = 'nd'; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO"]))); var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO_MAX_MIN = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO = 'nd'; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO"]))); var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO_MAX_MIN = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO = 'nd'; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO"]))); var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO_MAX_MIN = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO = 'nd'; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO"]))); var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO_MAX_MIN = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO };


    var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO_ACUM = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO;
    var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO_ACUM = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO + GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO_ACUM;
    var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO_ACUM = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO + GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO_ACUM;
    var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL_ACUM = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL + GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO_ACUM;
    var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO_ACUM = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO + GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL_ACUM;
    var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO_ACUM = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO + GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO_ACUM;
    var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO_ACUM = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO + GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO_ACUM;
    var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO_ACUM = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO + GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO_ACUM;
    var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO_ACUM = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO + GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO_ACUM;
    var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO_ACUM = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO + GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO_ACUM;
    var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO_ACUM = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO + GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO_ACUM;
    var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO_ACUM = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO + GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO_ACUM;




    if(@ViewData["MES_ACUM_REAL"]<1){ var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO_ACUM = 'nd'; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO_ACUM; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO_ACUM_MAX_MIN = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO_ACUM = 'nd'; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO_ACUM; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO_ACUM_MAX_MIN = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO_ACUM = 'nd'; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO_ACUM; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO_ACUM_MAX_MIN = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL_ACUM = 'nd'; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL_ACUM; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL_ACUM_MAX_MIN = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO_ACUM = 'nd'; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO_ACUM; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO_ACUM_MAX_MIN = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO_ACUM = 'nd'; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO_ACUM; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO_ACUM_MAX_MIN = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO_ACUM = 'nd'; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO_ACUM; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO_ACUM_MAX_MIN = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO_ACUM = 'nd'; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO_ACUM; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO_ACUM_MAX_MIN = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO_ACUM = 'nd'; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO_ACUM; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO_ACUM = 'nd'; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO_ACUM; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO_ACUM = 'nd'; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO_ACUM; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO_ACUM = 'nd'; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO_ACUM; var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO_ACUM };




    var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JANEIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JANEIRO"])));
    var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_FEVEREIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_FEVEREIRO"]))) + GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JANEIRO_ACUM;
    var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_MARCO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_MARCO"]))) + GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_FEVEREIRO_ACUM;
    var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_ABRIL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_ABRIL"]))) + GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_MARCO_ACUM;
    var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_MAIO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_MAIO"]))) + GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_ABRIL_ACUM;
    var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JUNHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JUNHO"]))) + GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_MAIO_ACUM;
    var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JULHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JULHO"]))) + GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JUNHO_ACUM;
    var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_AGOSTO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_AGOSTO"]))) + GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JULHO_ACUM;
    var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_SETEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_SETEMBRO"]))) + GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_AGOSTO_ACUM;
    var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_OUTUBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_OUTUBRO"]))) + GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_SETEMBRO_ACUM;
    var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_NOVEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_NOVEMBRO"]))) + GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_OUTUBRO_ACUM;
    var GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_DEZEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_DEZEMBRO"]))) + GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_NOVEMBRO_ACUM;


    var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ= Math.max(
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO_ACUM_MAX_MIN,

                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JANEIRO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_MARCO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_ABRIL_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_MAIO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JUNHO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JULHO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_AGOSTO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_DEZEMBRO_ACUM
                             );
    var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ= Math.min(

                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO_ACUM_MAX_MIN,

                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JANEIRO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_MARCO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_ABRIL_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_MAIO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JUNHO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JULHO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_AGOSTO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_DEZEMBRO_ACUM
                           );
    var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon= Math.max(
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL_MAX_MIN ,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO_MAX_MIN ,



                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_DEZEMBRO"])))

                            );
    var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon= Math.min(
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL_MAX_MIN ,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO_MAX_MIN ,


                           @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_DEZEMBRO"])))

                          );

    //NOTA TA: Aqui trato o minimo e o maximo do eixo principal
    if(Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ)>=Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ))
    {
        var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ_=(Math.ceil(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ),0).toString().length-1);
        var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ_= (Math.floor(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ),0).toString().length-1);
        //alert(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ_);
        //alert(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ_);
    }
    else
    {
        var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ_=(Math.ceil(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ),0).toString().length-1);
        var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ_= (Math.floor(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ),0).toString().length-1);}

    //NOTA TA: Aqui trato o minimo e o maximo do eixo secundario

    if(Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon)>=Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon))
    {
        var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon_=(Math.ceil(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon),0).toString().length-1);
        var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon_= (Math.floor(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon),0).toString().length-1);
        //alert(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon_);
        //alert(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon_);
    }
    else
    {
        var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon_=(Math.ceil(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon),0).toString().length-1);
        var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon_= (Math.floor(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon),0).toString().length-1);}


    if(Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ)/Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ)>=Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon)/Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon))
    { if(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ > 0 && GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ <0 ){ var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon__=(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ_*GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon_)/GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ_;} else { var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon__=GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon_;}
        if(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon > 0 && GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon <0 ){ var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ__=(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon__*GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ_)/GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon_;} else { var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ__=GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ_;}}
    else
    {if(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon > 0 && GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon <0 ){ var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ__=(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon_*GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ_)/GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon_;} else { var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ__=GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ_;}
        if(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ > 0 && GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ <0 ){ var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon__=(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ__*GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon_)/GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ_;} else { var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon__=GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon_;}
    }



    if(Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ)/Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ)>=Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon)/Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon))
    { if(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ > 0 && GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ <0 ){ var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon__=(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ_*GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon_)/GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ_;} else { var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon__=GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon_;}
        if(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon > 0 && GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon <0 ){ var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ__=(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon__*GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ_)/GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon_;} else { var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ__=GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ_;}}
    else
    {if(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon > 0 && GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon <0 ){ var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ__=(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon_*GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ_)/GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon_;} else { var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ__=GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ_;}
        if(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ > 0 && GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ <0 ){ var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon__=(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ__*GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon_)/GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ_;} else { var GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon__=GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon_;}
    }

 var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_002=document.getElementById('GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_002').getContext('2d');

    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_002=new Chart(GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_002, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'Remuneração de Orgãos Sociais(ac) ' + ANO_VERSAO_REAL_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(250 , 83 , 0)',
                   data: [
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO_ACUM,
                   ],
                   type: 'line'


               },
                              {
                                  label: 'Remuneração de Orgãos Sociais(ac) ' + ANO_VERSAO_ANTE_,
                                  yAxisID: 'A',
                                  //backgroundColor: 'rgb(201, 10, 10)',
                                  borderColor: 'rgb(0,221,0)',
                                  data: [
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JANEIRO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_MARCO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_ABRIL_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_MAIO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JUNHO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JULHO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_AGOSTO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_DEZEMBRO_ACUM,
                                  ],
                                  type: 'line'


                              },
                {
                    label:  'Remuneração de Orgãos Sociais(m) ' + ANO_VERSAO_REAL_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(250 , 83 , 0, 0.5)',
                    borderColor: 'rgba(250 , 83 , 0, 0.5)',
                    data: [
                  GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO ,
                  GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO ,
                  GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO ,
                  GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL,
                  GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO ,
                  GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO ,
                  GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO ,
                  GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO ,
                  GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO ,
                  GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO ,
                  GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO ,
                  GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO ,
                    ],
                },
                {
                    label:  'Remuneração de Orgãos Sociais(m) ' + ANO_VERSAO_ANTE_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(0,221,0, 0.4)',
                    borderColor: 'rgba(0,221,0, 0.4)',
                    data: [
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JANEIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_FEVEREIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_MARCO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_ABRIL"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_MAIO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JUNHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JULHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_AGOSTO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_SETEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_OUTUBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_NOVEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_DEZEMBRO"]))),
                    ],
                },


            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'GASTOS_PESSOAL_REM_ORG_SOC_MENSAL_1',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                min:  Math.round(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ__,0),
                                                max:  Math.round(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString();
                                                }
                                            }
                                        },

                    { id: 'B',
                        type: 'linear',
                        position: 'right',
                        ticks: {
                            min: Math.round(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_secon__,0),
                            max:  Math.round(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_secon__,0),
                            beginAtZero: false,
                            callback: function(value, index, values) {
                                return value.toLocaleString();
                            }
                        }
                    },






                ]
            }
        },

    });

@*</script>*@
@*------------------------------------------------GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_003-----------------------------------------------------------*@
@*<script>*@

    var IND_VN_ANO_N_JANEIRO_ACUM = IND_VN_ANO_N_JANEIRO;
    var IND_VN_ANO_N_FEVEREIRO_ACUM = IND_VN_ANO_N_FEVEREIRO + IND_VN_ANO_N_JANEIRO_ACUM;
    var IND_VN_ANO_N_MARCO_ACUM = IND_VN_ANO_N_MARCO + IND_VN_ANO_N_FEVEREIRO_ACUM;
    var IND_VN_ANO_N_ABRIL_ACUM = IND_VN_ANO_N_ABRIL + IND_VN_ANO_N_MARCO_ACUM;
    var IND_VN_ANO_N_MAIO_ACUM = IND_VN_ANO_N_MAIO + IND_VN_ANO_N_ABRIL_ACUM;
    var IND_VN_ANO_N_JUNHO_ACUM = IND_VN_ANO_N_JUNHO + IND_VN_ANO_N_MAIO_ACUM;
    var IND_VN_ANO_N_JULHO_ACUM = IND_VN_ANO_N_JULHO + IND_VN_ANO_N_JUNHO_ACUM;
    var IND_VN_ANO_N_AGOSTO_ACUM = IND_VN_ANO_N_AGOSTO + IND_VN_ANO_N_JULHO_ACUM;
    var IND_VN_ANO_N_SETEMBRO_ACUM = IND_VN_ANO_N_SETEMBRO + IND_VN_ANO_N_AGOSTO_ACUM;
    var IND_VN_ANO_N_OUTUBRO_ACUM = IND_VN_ANO_N_OUTUBRO + IND_VN_ANO_N_SETEMBRO_ACUM;
    var IND_VN_ANO_N_NOVEMBRO_ACUM = IND_VN_ANO_N_NOVEMBRO + IND_VN_ANO_N_OUTUBRO_ACUM;
    var IND_VN_ANO_N_DEZEMBRO_ACUM = IND_VN_ANO_N_DEZEMBRO + IND_VN_ANO_N_NOVEMBRO_ACUM;



    var IND_VN_ANO_N_1_JANEIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JANEIRO"])));
    var IND_VN_ANO_N_1_FEVEREIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_FEVEREIRO"]))) + IND_VN_ANO_N_1_JANEIRO_ACUM;
    var IND_VN_ANO_N_1_MARCO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_MARCO"]))) + IND_VN_ANO_N_1_FEVEREIRO_ACUM;
    var IND_VN_ANO_N_1_ABRIL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_ABRIL"]))) + IND_VN_ANO_N_1_MARCO_ACUM;
    var IND_VN_ANO_N_1_MAIO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_MAIO"]))) + IND_VN_ANO_N_1_ABRIL_ACUM;
    var IND_VN_ANO_N_1_JUNHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JUNHO"]))) + IND_VN_ANO_N_1_MAIO_ACUM;
    var IND_VN_ANO_N_1_JULHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JULHO"]))) + IND_VN_ANO_N_1_JUNHO_ACUM;
    var IND_VN_ANO_N_1_AGOSTO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_AGOSTO"]))) + IND_VN_ANO_N_1_JULHO_ACUM;
    var IND_VN_ANO_N_1_SETEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_SETEMBRO"]))) + IND_VN_ANO_N_1_AGOSTO_ACUM;
    var IND_VN_ANO_N_1_OUTUBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_OUTUBRO"]))) + IND_VN_ANO_N_1_SETEMBRO_ACUM;
    var IND_VN_ANO_N_1_NOVEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_NOVEMBRO"]))) + IND_VN_ANO_N_1_OUTUBRO_ACUM;
    var IND_VN_ANO_N_1_DEZEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_DEZEMBRO"]))) + IND_VN_ANO_N_1_NOVEMBRO_ACUM;




    if(@ViewData["MES_ACUM_REAL"]<1){ var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_JANEIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_JANEIRO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO_ACUM/IND_VN_ANO_N_JANEIRO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_FEVEREIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_FEVEREIRO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO_ACUM/IND_VN_ANO_N_FEVEREIRO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_MARCO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_MARCO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO_ACUM/IND_VN_ANO_N_MARCO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_MARCO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_ABRIL_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_ABRIL_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL_ACUM/IND_VN_ANO_N_ABRIL_ACUM*100; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_ABRIL_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_MAIO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_MAIO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO_ACUM/IND_VN_ANO_N_MAIO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_MAIO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_JUNHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_JUNHO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO_ACUM/IND_VN_ANO_N_JUNHO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_JUNHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_JULHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_JULHO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO_ACUM/IND_VN_ANO_N_JULHO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_JULHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_AGOSTO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_AGOSTO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO_ACUM/IND_VN_ANO_N_AGOSTO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_SETEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_SETEMBRO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO_ACUM/IND_VN_ANO_N_SETEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_OUTUBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_OUTUBRO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO_ACUM/IND_VN_ANO_N_OUTUBRO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_NOVEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_NOVEMBRO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO_ACUM/IND_VN_ANO_N_NOVEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_DEZEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_DEZEMBRO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO_ACUM/IND_VN_ANO_N_DEZEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_DEZEMBRO_ACUM };



    if(@ViewData["MES_ACUM_REAL"]<1){ var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_JANEIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_JANEIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_JANEIRO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JANEIRO_ACUM/IND_VN_ANO_N_1_JANEIRO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_JANEIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_FEVEREIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_FEVEREIRO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_FEVEREIRO_ACUM/IND_VN_ANO_N_1_FEVEREIRO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_FEVEREIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_MARCO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_MARCO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_MARCO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_MARCO_ACUM/IND_VN_ANO_N_1_MARCO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_MARCO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_ABRIL_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_ABRIL_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_ABRIL_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_ABRIL_ACUM/IND_VN_ANO_N_1_ABRIL_ACUM*100; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_ABRIL_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_MAIO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_MAIO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_MAIO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_MAIO_ACUM/IND_VN_ANO_N_1_MAIO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_MAIO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_JUNHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_JUNHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_JUNHO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JUNHO_ACUM/IND_VN_ANO_N_1_JUNHO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_JUNHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_JULHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_JULHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_JULHO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JULHO_ACUM/IND_VN_ANO_N_1_JULHO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_JULHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_AGOSTO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_AGOSTO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_AGOSTO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_AGOSTO_ACUM/IND_VN_ANO_N_1_AGOSTO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_AGOSTO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_SETEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_SETEMBRO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_SETEMBRO_ACUM/IND_VN_ANO_N_1_SETEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_SETEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_OUTUBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_OUTUBRO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_OUTUBRO_ACUM/IND_VN_ANO_N_1_OUTUBRO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_OUTUBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_NOVEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_NOVEMBRO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_NOVEMBRO_ACUM/IND_VN_ANO_N_1_NOVEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_NOVEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_DEZEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_DEZEMBRO_ACUM= GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_DEZEMBRO_ACUM/IND_VN_ANO_N_1_DEZEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_DEZEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_DEZEMBRO_ACUM };



    if(@ViewData["MES_ACUM_REAL"]<1){ var VAR_VN_ANO_N_JANEIRO_ACUM = 'nd'; var VAR_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JANEIRO_ACUM= ((IND_VN_ANO_N_JANEIRO_ACUM-IND_VN_ANO_N_1_JANEIRO_ACUM)/Math.abs(IND_VN_ANO_N_1_JANEIRO_ACUM))*100; var VAR_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = VAR_VN_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var VAR_VN_ANO_N_FEVEREIRO_ACUM = 'nd'; var VAR_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_FEVEREIRO_ACUM= ((IND_VN_ANO_N_FEVEREIRO_ACUM-IND_VN_ANO_N_1_FEVEREIRO_ACUM)/Math.abs(IND_VN_ANO_N_1_FEVEREIRO_ACUM))*100; var VAR_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = VAR_VN_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var VAR_VN_ANO_N_MARCO_ACUM = 'nd'; var VAR_VN_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_MARCO_ACUM= ((IND_VN_ANO_N_MARCO_ACUM-IND_VN_ANO_N_1_MARCO_ACUM)/Math.abs(IND_VN_ANO_N_1_MARCO_ACUM))*100; var VAR_VN_ANO_N_MARCO_ACUM_MAX_MIN = VAR_VN_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var VAR_VN_ANO_N_ABRIL_ACUM = 'nd'; var VAR_VN_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_ABRIL_ACUM= ((IND_VN_ANO_N_ABRIL_ACUM-IND_VN_ANO_N_1_ABRIL_ACUM)/Math.abs(IND_VN_ANO_N_1_ABRIL_ACUM))*100; var VAR_VN_ANO_N_ABRIL_ACUM_MAX_MIN = VAR_VN_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var VAR_VN_ANO_N_MAIO_ACUM = 'nd'; var VAR_VN_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_MAIO_ACUM= ((IND_VN_ANO_N_MAIO_ACUM-IND_VN_ANO_N_1_MAIO_ACUM)/Math.abs(IND_VN_ANO_N_1_MAIO_ACUM))*100; var VAR_VN_ANO_N_MAIO_ACUM_MAX_MIN = VAR_VN_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var VAR_VN_ANO_N_JUNHO_ACUM = 'nd'; var VAR_VN_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JUNHO_ACUM= ((IND_VN_ANO_N_JUNHO_ACUM-IND_VN_ANO_N_1_JUNHO_ACUM)/Math.abs(IND_VN_ANO_N_1_JUNHO_ACUM))*100; var VAR_VN_ANO_N_JUNHO_ACUM_MAX_MIN = VAR_VN_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var VAR_VN_ANO_N_JULHO_ACUM = 'nd'; var VAR_VN_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JULHO_ACUM= ((IND_VN_ANO_N_JULHO_ACUM-IND_VN_ANO_N_1_JULHO_ACUM)/Math.abs(IND_VN_ANO_N_1_JULHO_ACUM))*100; var VAR_VN_ANO_N_JULHO_ACUM_MAX_MIN = VAR_VN_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var VAR_VN_ANO_N_AGOSTO_ACUM = 'nd'; var VAR_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_AGOSTO_ACUM= ((IND_VN_ANO_N_AGOSTO_ACUM-IND_VN_ANO_N_1_AGOSTO_ACUM)/Math.abs(IND_VN_ANO_N_1_AGOSTO_ACUM))*100; var VAR_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = VAR_VN_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var VAR_VN_ANO_N_SETEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_SETEMBRO_ACUM= ((IND_VN_ANO_N_SETEMBRO_ACUM-IND_VN_ANO_N_1_SETEMBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_SETEMBRO_ACUM))*100; var VAR_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var VAR_VN_ANO_N_OUTUBRO_ACUM = 'nd'; var VAR_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_OUTUBRO_ACUM= ((IND_VN_ANO_N_OUTUBRO_ACUM-IND_VN_ANO_N_1_OUTUBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_OUTUBRO_ACUM))*100; var VAR_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var VAR_VN_ANO_N_NOVEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_NOVEMBRO_ACUM= ((IND_VN_ANO_N_NOVEMBRO_ACUM-IND_VN_ANO_N_1_NOVEMBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_NOVEMBRO_ACUM))*100; var VAR_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var VAR_VN_ANO_N_DEZEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_DEZEMBRO_ACUM= ((IND_VN_ANO_N_DEZEMBRO_ACUM-IND_VN_ANO_N_1_DEZEMBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_DEZEMBRO_ACUM))*100; var VAR_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_DEZEMBRO_ACUM };



    if(@ViewData["MES_ACUM_REAL"]<1){ var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO_ACUM= ((GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO_ACUM-GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JANEIRO_ACUM)/Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JANEIRO_ACUM))*100; var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO_ACUM= ((GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO_ACUM-GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_FEVEREIRO_ACUM)/Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_FEVEREIRO_ACUM))*100; var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO_ACUM= ((GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO_ACUM-GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_MARCO_ACUM)/Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_MARCO_ACUM))*100; var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL_ACUM= ((GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL_ACUM-GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_ABRIL_ACUM)/Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_ABRIL_ACUM))*100; var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO_ACUM= ((GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO_ACUM-GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_MAIO_ACUM)/Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_MAIO_ACUM))*100; var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO_ACUM= ((GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO_ACUM-GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JUNHO_ACUM)/Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JUNHO_ACUM))*100; var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO_ACUM= ((GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO_ACUM-GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JULHO_ACUM)/Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_JULHO_ACUM))*100; var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO_ACUM= ((GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO_ACUM-GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_AGOSTO_ACUM)/Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_AGOSTO_ACUM))*100; var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO_ACUM= ((GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO_ACUM-GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_SETEMBRO_ACUM)/Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_SETEMBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO_ACUM= ((GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO_ACUM-GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_OUTUBRO_ACUM)/Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_OUTUBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO_ACUM= ((GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO_ACUM-GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_NOVEMBRO_ACUM)/Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_NOVEMBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO_ACUM= ((GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO_ACUM-GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_DEZEMBRO_ACUM)/Math.abs(GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_1_DEZEMBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO_ACUM };

    if( PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_JANEIRO_ACUM > PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_JANEIRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO_ACUM=PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_JANEIRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO_ACUM=PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_JANEIRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_FEVEREIRO_ACUM > PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_FEVEREIRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO_ACUM=PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_FEVEREIRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO_ACUM=PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_FEVEREIRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_MARCO_ACUM > PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_MARCO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO_ACUM=PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_MARCO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO_ACUM=PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_MARCO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_ABRIL_ACUM > PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_ABRIL_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL_ACUM=PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_ABRIL_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL_ACUM=PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_ABRIL_ACUM ; }
    if( PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_MAIO_ACUM > PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_MAIO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO_ACUM=PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_MAIO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO_ACUM=PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_MAIO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_JUNHO_ACUM > PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_JUNHO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO_ACUM=PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_JUNHO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO_ACUM=PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_JUNHO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_JULHO_ACUM > PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_JULHO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO_ACUM=PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_JULHO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO_ACUM=PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_JULHO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_AGOSTO_ACUM > PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_AGOSTO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO_ACUM=PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_AGOSTO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO_ACUM=PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_AGOSTO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_SETEMBRO_ACUM > PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_SETEMBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO_ACUM=PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_SETEMBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO_ACUM=PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_SETEMBRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_OUTUBRO_ACUM > PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_OUTUBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO_ACUM=PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_OUTUBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO_ACUM=PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_OUTUBRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_NOVEMBRO_ACUM > PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_NOVEMBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO_ACUM=PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_NOVEMBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO_ACUM=PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_NOVEMBRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_DEZEMBRO_ACUM > PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_DEZEMBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO_ACUM=PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_DEZEMBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO_ACUM=PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_DEZEMBRO_ACUM ; }



    var fillBetweenLinesPlugin = {
        afterDatasetsDraw: function (chart) {
            var ctx = chart.chart.ctx;
            var xaxis = chart.scales['x-axis-0'];
            var yaxis = chart.scales['y-axis-0'];
            var datasets = chart.data.datasets;
            ctx.save();

            for (var d = 0; d < datasets.length; d++) {
                var dataset = datasets[d];
                if (dataset.fillBetweenSet == undefined) {
                    continue;
                }

                // get meta for both data sets
                var meta1 = chart.getDatasetMeta(d);
                var meta2 = chart.getDatasetMeta(dataset.fillBetweenSet);

                // do not draw fill if one of the datasets is hidden
                if (meta1.hidden || meta2.hidden) continue;

                // create fill areas in pairs
                for (var p = 0; p < meta1.data.length-1;p++) {
                    // if null skip
                    if (dataset.data[p] == null || dataset.data[p+1] == null) continue;

                    ctx.beginPath();

                    // trace line 1
                    var curr = meta1.data[p];
                    var next = meta1.data[p+1];
                    ctx.moveTo(curr._view.x, curr._view.y);
                    ctx.lineTo(curr._view.x, curr._view.y);
                    if (curr._view.steppedLine === true) {
                        ctx.lineTo(next._view.x, curr._view.y);
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else if (next._view.tension === 0) {
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else {
                        ctx.bezierCurveTo(
                          curr._view.controlPointNextX,
                          curr._view.controlPointNextY,
                          next._view.controlPointPreviousX,
                          next._view.controlPointPreviousY,
                          next._view.x,
                          next._view.y
                        );
                    }

                    // connect dataset1 to dataset2
                    var curr = meta2.data[p+1];
                    var next = meta2.data[p];
                    ctx.lineTo(curr._view.x, curr._view.y);

                    // trace BACKWORDS set2 to complete the box
                    if (curr._view.steppedLine === true) {
                        ctx.lineTo(curr._view.x, next._view.y);
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else if (next._view.tension === 0) {
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else {
                        // reverse bezier
                        ctx.bezierCurveTo(
                          curr._view.controlPointPreviousX,
                          curr._view.controlPointPreviousY,
                          next._view.controlPointNextX,
                          next._view.controlPointNextY,
                          next._view.x,
                          next._view.y
                        );
                    }

                    // close the loop and fill with shading
                    ctx.closePath();
                    ctx.fillStyle = dataset.fillBetweenColor || "rgba(0,0,0,0.1)";
                    ctx.fill();
                } // end for p loop
            }
        } // end afterDatasetsDraw
    }; // end fillBetweenLinesPlugin

    Chart.pluginService.register(fillBetweenLinesPlugin);



    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_003=document.getElementById('GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_003').getContext('2d');

    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_003=new Chart(GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_003, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label:  'Peso Remuneração de Orgãos SociaisvsVN(ac) ' + ANO_VERSAO_REAL_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(250 , 83 , 0)',
                   //borderColor: "#F00",
                   fill: false,
                   steppedLine: false,
                   tension: 0.5,
                   fillBetweenSet: 1,
                   fillBetweenColor: "rgba(0, 221, 0, 0.1)",
                   data: [
                   PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_JANEIRO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_FEVEREIRO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_MARCO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_ABRIL_ACUM,
                   PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_MAIO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_JUNHO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_JULHO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_AGOSTO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_SETEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_OUTUBRO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_NOVEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_DEZEMBRO_ACUM,

                   ],
                   type: 'line'


               },
                {
                    label: 'Peso Remuneração de Orgãos SociaisvsVN(ac) ' + ANO_VERSAO_ANTE_,
                    yAxisID: 'A',
                    //backgroundColor: 'rgb(17, 121, 240)',
                    borderColor: 'rgb(0,221,0)',
                    //borderColor: "#00F",
                    fill: false,
                    steppedLine: false,
                    tension: 0.5,
                    data: [
                   PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_JANEIRO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_FEVEREIRO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_MARCO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_ABRIL_ACUM,
                   PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_MAIO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_JUNHO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_JULHO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_AGOSTO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_SETEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_OUTUBRO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_NOVEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_ORG_SOC_VN_ANO_N_1_DEZEMBRO_ACUM,
                    ],
                    type: 'line'
                },
    {
        label: 'Ineficiência',
        yAxisID: 'A',
        backgroundColor: "rgba(255, 0, 0, 0.2)",
        borderColor: 'rgba(255, 255, 255, 0.1)',
        //borderColor: "#0D0",
        fill: false,
        steppedLine: false,
        tension: 0.5,
        fillBetweenSet: 1,
        fillBetweenColor: "rgba(255, 0, 0, 0.2)",
        data: [
    INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JANEIRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_FEVEREIRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MARCO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_ABRIL_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_MAIO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JUNHO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_JULHO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_AGOSTO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_SETEMBRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_OUTUBRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_NOVEMBRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_REM_ORG_SOC_ANO_N_DEZEMBRO_ACUM,
        ],
        type: 'line'
    },

            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'GASTOS_PESSOAL_REM_ORG_SOC COMP',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                //min:  Math.round(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ__,0),
                                                //max:  Math.round(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString()+ "%";
                                                }
                                            }
                                        },

                    //{ id: 'B',
                    //type: 'linear',
                    //position: 'right',
                    //ticks: {
                    //    //min:  Math.round(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_min_princ__,0),
                    //    //max:  Math.round(GASTOS_PESSOAL_REM_ORG_SOC_Mensal_Eixo_max_princ__,0),
                    //    beginAtZero: true,
                    //    callback: function(value, index, values) {
                    //        return value.toLocaleString();
                    //        }
                    //    }
                    //},






                ]
            }
        },

    });

@*</script>*@

@*------------------------------------------------GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_004-----------------------------------------------------------*@
@*<script>*@

    if(@ViewData["MES_ACUM_REAL"]<1){ var IND_VN_ANO_N_JANEIRO = 'nd'; var IND_VN_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JANEIRO"]))); var IND_VN_ANO_N_JANEIRO_MAX_MIN = IND_VN_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var IND_VN_ANO_N_FEVEREIRO = 'nd'; var IND_VN_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_FEVEREIRO"]))); var IND_VN_ANO_N_FEVEREIRO_MAX_MIN = IND_VN_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var IND_VN_ANO_N_MARCO = 'nd'; var IND_VN_ANO_N_MARCO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_MARCO"]))); var IND_VN_ANO_N_MARCO_MAX_MIN = IND_VN_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var IND_VN_ANO_N_ABRIL = 'nd'; var IND_VN_ANO_N_ABRIL_MAX_MIN = 0;  } else { var IND_VN_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_ABRIL"]))); var IND_VN_ANO_N_ABRIL_MAX_MIN = IND_VN_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var IND_VN_ANO_N_MAIO = 'nd'; var IND_VN_ANO_N_MAIO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_MAIO"]))); var IND_VN_ANO_N_MAIO_MAX_MIN = IND_VN_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var IND_VN_ANO_N_JUNHO = 'nd'; var IND_VN_ANO_N_JUNHO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JUNHO"]))); var IND_VN_ANO_N_JUNHO_MAX_MIN = IND_VN_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var IND_VN_ANO_N_JULHO = 'nd'; var IND_VN_ANO_N_JULHO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JULHO"]))); var IND_VN_ANO_N_JULHO_MAX_MIN = IND_VN_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var IND_VN_ANO_N_AGOSTO = 'nd'; var IND_VN_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_AGOSTO"]))); var IND_VN_ANO_N_AGOSTO_MAX_MIN = IND_VN_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var IND_VN_ANO_N_SETEMBRO = 'nd'; var IND_VN_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_SETEMBRO"]))); var IND_VN_ANO_N_SETEMBRO_MAX_MIN = IND_VN_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var IND_VN_ANO_N_OUTUBRO = 'nd'; var IND_VN_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_OUTUBRO"]))); var IND_VN_ANO_N_OUTUBRO_MAX_MIN = IND_VN_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var IND_VN_ANO_N_NOVEMBRO = 'nd'; var IND_VN_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_NOVEMBRO"]))); var IND_VN_ANO_N_NOVEMBRO_MAX_MIN = IND_VN_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var IND_VN_ANO_N_DEZEMBRO = 'nd'; var IND_VN_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_DEZEMBRO"]))); var IND_VN_ANO_N_DEZEMBRO_MAX_MIN = IND_VN_ANO_N_DEZEMBRO };

    if(@ViewData["MES_ACUM_REAL"]<1){ var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO = 'nd'; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO"]))); var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO_MAX_MIN = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO = 'nd'; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO"]))); var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO_MAX_MIN = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO = 'nd'; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO"]))); var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO_MAX_MIN = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL = 'nd'; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL"]))); var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL_MAX_MIN = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO = 'nd'; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO"]))); var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO_MAX_MIN = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO = 'nd'; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO"]))); var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO_MAX_MIN = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO = 'nd'; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO"]))); var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO_MAX_MIN = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO = 'nd'; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO"]))); var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO_MAX_MIN = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO = 'nd'; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO"]))); var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO_MAX_MIN = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO = 'nd'; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO"]))); var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO_MAX_MIN = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO = 'nd'; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO"]))); var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO_MAX_MIN = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO = 'nd'; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO"]))); var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO_MAX_MIN = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO };


    var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO_ACUM = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO;
    var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO_ACUM = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO + GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO_ACUM;
    var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO_ACUM = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO + GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO_ACUM;
    var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL_ACUM = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL + GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO_ACUM;
    var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO_ACUM = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO + GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL_ACUM;
    var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO_ACUM = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO + GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO_ACUM;
    var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO_ACUM = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO + GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO_ACUM;
    var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO_ACUM = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO + GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO_ACUM;
    var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO_ACUM = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO + GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO_ACUM;
    var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO_ACUM = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO + GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO_ACUM;
    var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO_ACUM = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO + GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO_ACUM;
    var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO_ACUM = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO + GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO_ACUM;




    if(@ViewData["MES_ACUM_REAL"]<1){ var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO_ACUM = 'nd'; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO_ACUM; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO_ACUM_MAX_MIN = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO_ACUM = 'nd'; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO_ACUM; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO_ACUM_MAX_MIN = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO_ACUM = 'nd'; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO_ACUM; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO_ACUM_MAX_MIN = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL_ACUM = 'nd'; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL_ACUM; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL_ACUM_MAX_MIN = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO_ACUM = 'nd'; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO_ACUM; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO_ACUM_MAX_MIN = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO_ACUM = 'nd'; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO_ACUM; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO_ACUM_MAX_MIN = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO_ACUM = 'nd'; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO_ACUM; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO_ACUM_MAX_MIN = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO_ACUM = 'nd'; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO_ACUM; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO_ACUM_MAX_MIN = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO_ACUM = 'nd'; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO_ACUM; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO_ACUM = 'nd'; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO_ACUM; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO_ACUM = 'nd'; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO_ACUM; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO_ACUM = 'nd'; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO_ACUM; var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO_ACUM };




    var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JANEIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JANEIRO"])));
    var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_FEVEREIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_FEVEREIRO"]))) + GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JANEIRO_ACUM;
    var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_MARCO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_MARCO"]))) + GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_FEVEREIRO_ACUM;
    var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_ABRIL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_ABRIL"]))) + GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_MARCO_ACUM;
    var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_MAIO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_MAIO"]))) + GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_ABRIL_ACUM;
    var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JUNHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JUNHO"]))) + GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_MAIO_ACUM;
    var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JULHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JULHO"]))) + GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JUNHO_ACUM;
    var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_AGOSTO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_AGOSTO"]))) + GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JULHO_ACUM;
    var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_SETEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_SETEMBRO"]))) + GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_AGOSTO_ACUM;
    var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_OUTUBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_OUTUBRO"]))) + GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_SETEMBRO_ACUM;
    var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_NOVEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_NOVEMBRO"]))) + GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_OUTUBRO_ACUM;
    var GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_DEZEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_DEZEMBRO"]))) + GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_NOVEMBRO_ACUM;


    var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ= Math.max(
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO_ACUM_MAX_MIN,

                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JANEIRO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_MARCO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_ABRIL_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_MAIO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JUNHO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JULHO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_AGOSTO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_DEZEMBRO_ACUM
                             );
    var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ= Math.min(

                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO_ACUM_MAX_MIN,

                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JANEIRO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_MARCO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_ABRIL_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_MAIO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JUNHO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JULHO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_AGOSTO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_DEZEMBRO_ACUM
                           );
    var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon= Math.max(
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL_MAX_MIN ,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO_MAX_MIN ,



                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_DEZEMBRO"])))

                            );
    var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon= Math.min(
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL_MAX_MIN ,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO_MAX_MIN ,


                           @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_DEZEMBRO"])))

                          );

    //NOTA TA: Aqui trato o minimo e o maximo do eixo principal
    if(Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ)>=Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ))
    {
        var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ_=(Math.ceil(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ),0).toString().length-1);
        var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ_= (Math.floor(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ),0).toString().length-1);
        //alert(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ_);
        //alert(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ_);
    }
    else
    {
        var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ_=(Math.ceil(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ),0).toString().length-1);
        var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ_= (Math.floor(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ),0).toString().length-1);}

    //NOTA TA: Aqui trato o minimo e o maximo do eixo secundario

    if(Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon)>=Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon))
    {
        var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon_=(Math.ceil(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon),0).toString().length-1);
        var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon_= (Math.floor(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon),0).toString().length-1);
        //alert(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon_);
        //alert(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon_);
    }
    else
    {
        var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon_=(Math.ceil(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon),0).toString().length-1);
        var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon_= (Math.floor(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon),0).toString().length-1);}


    if(Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ)/Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ)>=Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon)/Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon))
    { if(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ > 0 && GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ <0 ){ var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon__=(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ_*GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon_)/GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ_;} else { var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon__=GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon_;}
        if(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon > 0 && GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon <0 ){ var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ__=(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon__*GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ_)/GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon_;} else { var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ__=GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ_;}}
    else
    {if(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon > 0 && GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon <0 ){ var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ__=(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon_*GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ_)/GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon_;} else { var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ__=GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ_;}
        if(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ > 0 && GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ <0 ){ var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon__=(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ__*GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon_)/GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ_;} else { var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon__=GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon_;}
    }



    if(Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ)/Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ)>=Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon)/Math.abs(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon))
    { if(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ > 0 && GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ <0 ){ var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon__=(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ_*GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon_)/GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ_;} else { var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon__=GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon_;}
        if(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon > 0 && GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon <0 ){ var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ__=(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon__*GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ_)/GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon_;} else { var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ__=GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ_;}}
    else
    {if(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon > 0 && GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon <0 ){ var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ__=(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon_*GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ_)/GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon_;} else { var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ__=GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ_;}
        if(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ > 0 && GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ <0 ){ var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon__=(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ__*GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon_)/GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ_;} else { var GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon__=GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon_;}
    }



    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_004=document.getElementById('GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_004').getContext('2d');

    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_004=new Chart(GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_004, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'Trab. Esp.(ac) ' + ANO_VERSAO_REAL_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(250 , 83 , 0)',
                   data: [
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO_ACUM,
                   ],
                   type: 'line'


               },
                              {
                                  label: 'Trab. Esp.(ac) ' + ANO_VERSAO_ANTE_,
                                  yAxisID: 'A',
                                  //backgroundColor: 'rgb(201, 10, 10)',
                                  borderColor: 'rgb(0,221,0)',
                                  data: [
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JANEIRO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_MARCO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_ABRIL_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_MAIO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JUNHO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JULHO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_AGOSTO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_DEZEMBRO_ACUM,
                                  ],
                                  type: 'line'


                              },
                {
                    label:  'Trab. Esp.(m) ' + ANO_VERSAO_REAL_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(250 , 83 , 0, 0.5)',
                    borderColor: 'rgba(250 , 83 , 0, 0.5)',
                    data: [
                  GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO ,
                  GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO ,
                  GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO ,
                  GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL,
                  GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO ,
                  GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO ,
                  GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO ,
                  GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO ,
                  GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO ,
                  GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO ,
                  GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO ,
                  GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO ,
                    ],
                },
                {
                    label:  'Trab. Esp.(m) ' + ANO_VERSAO_ANTE_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(0,221,0, 0.4)',
                    borderColor: 'rgba(0,221,0, 0.4)',
                    data: [
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JANEIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_FEVEREIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_MARCO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_ABRIL"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_MAIO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JUNHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JULHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_AGOSTO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_SETEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_OUTUBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_NOVEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_DEZEMBRO"]))),
                    ],
                },


            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'GASTOS_PESSOAL_REM_PESSOAL_MENSAL_1',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                min:  Math.round(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ__,0),
                                                max:  Math.round(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString();
                                                }
                                            }
                                        },

                    { id: 'B',
                        type: 'linear',
                        position: 'right',
                        ticks: {
                            min: Math.round(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_secon__,0),
                            max:  Math.round(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_secon__,0),
                            beginAtZero: false,
                            callback: function(value, index, values) {
                                return value.toLocaleString();
                            }
                        }
                    },






                ]
            }
        },

    });

@*</script>*@

@*------------------------------------------------GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_005-----------------------------------------------------------*@
@*<script>*@

    var IND_VN_ANO_N_JANEIRO_ACUM = IND_VN_ANO_N_JANEIRO;
    var IND_VN_ANO_N_FEVEREIRO_ACUM = IND_VN_ANO_N_FEVEREIRO + IND_VN_ANO_N_JANEIRO_ACUM;
    var IND_VN_ANO_N_MARCO_ACUM = IND_VN_ANO_N_MARCO + IND_VN_ANO_N_FEVEREIRO_ACUM;
    var IND_VN_ANO_N_ABRIL_ACUM = IND_VN_ANO_N_ABRIL + IND_VN_ANO_N_MARCO_ACUM;
    var IND_VN_ANO_N_MAIO_ACUM = IND_VN_ANO_N_MAIO + IND_VN_ANO_N_ABRIL_ACUM;
    var IND_VN_ANO_N_JUNHO_ACUM = IND_VN_ANO_N_JUNHO + IND_VN_ANO_N_MAIO_ACUM;
    var IND_VN_ANO_N_JULHO_ACUM = IND_VN_ANO_N_JULHO + IND_VN_ANO_N_JUNHO_ACUM;
    var IND_VN_ANO_N_AGOSTO_ACUM = IND_VN_ANO_N_AGOSTO + IND_VN_ANO_N_JULHO_ACUM;
    var IND_VN_ANO_N_SETEMBRO_ACUM = IND_VN_ANO_N_SETEMBRO + IND_VN_ANO_N_AGOSTO_ACUM;
    var IND_VN_ANO_N_OUTUBRO_ACUM = IND_VN_ANO_N_OUTUBRO + IND_VN_ANO_N_SETEMBRO_ACUM;
    var IND_VN_ANO_N_NOVEMBRO_ACUM = IND_VN_ANO_N_NOVEMBRO + IND_VN_ANO_N_OUTUBRO_ACUM;
    var IND_VN_ANO_N_DEZEMBRO_ACUM = IND_VN_ANO_N_DEZEMBRO + IND_VN_ANO_N_NOVEMBRO_ACUM;



    var IND_VN_ANO_N_1_JANEIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JANEIRO"])));
    var IND_VN_ANO_N_1_FEVEREIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_FEVEREIRO"]))) + IND_VN_ANO_N_1_JANEIRO_ACUM;
    var IND_VN_ANO_N_1_MARCO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_MARCO"]))) + IND_VN_ANO_N_1_FEVEREIRO_ACUM;
    var IND_VN_ANO_N_1_ABRIL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_ABRIL"]))) + IND_VN_ANO_N_1_MARCO_ACUM;
    var IND_VN_ANO_N_1_MAIO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_MAIO"]))) + IND_VN_ANO_N_1_ABRIL_ACUM;
    var IND_VN_ANO_N_1_JUNHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JUNHO"]))) + IND_VN_ANO_N_1_MAIO_ACUM;
    var IND_VN_ANO_N_1_JULHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JULHO"]))) + IND_VN_ANO_N_1_JUNHO_ACUM;
    var IND_VN_ANO_N_1_AGOSTO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_AGOSTO"]))) + IND_VN_ANO_N_1_JULHO_ACUM;
    var IND_VN_ANO_N_1_SETEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_SETEMBRO"]))) + IND_VN_ANO_N_1_AGOSTO_ACUM;
    var IND_VN_ANO_N_1_OUTUBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_OUTUBRO"]))) + IND_VN_ANO_N_1_SETEMBRO_ACUM;
    var IND_VN_ANO_N_1_NOVEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_NOVEMBRO"]))) + IND_VN_ANO_N_1_OUTUBRO_ACUM;
    var IND_VN_ANO_N_1_DEZEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_DEZEMBRO"]))) + IND_VN_ANO_N_1_NOVEMBRO_ACUM;




    if(@ViewData["MES_ACUM_REAL"]<1){ var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_JANEIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_JANEIRO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO_ACUM/IND_VN_ANO_N_JANEIRO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_FEVEREIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_FEVEREIRO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO_ACUM/IND_VN_ANO_N_FEVEREIRO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_MARCO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_MARCO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO_ACUM/IND_VN_ANO_N_MARCO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_MARCO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_ABRIL_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_ABRIL_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL_ACUM/IND_VN_ANO_N_ABRIL_ACUM*100; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_ABRIL_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_MAIO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_MAIO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO_ACUM/IND_VN_ANO_N_MAIO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_MAIO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_JUNHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_JUNHO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO_ACUM/IND_VN_ANO_N_JUNHO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_JUNHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_JULHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_JULHO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO_ACUM/IND_VN_ANO_N_JULHO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_JULHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_AGOSTO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_AGOSTO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO_ACUM/IND_VN_ANO_N_AGOSTO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_SETEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_SETEMBRO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO_ACUM/IND_VN_ANO_N_SETEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_OUTUBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_OUTUBRO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO_ACUM/IND_VN_ANO_N_OUTUBRO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_NOVEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_NOVEMBRO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO_ACUM/IND_VN_ANO_N_NOVEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_DEZEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_DEZEMBRO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO_ACUM/IND_VN_ANO_N_DEZEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_DEZEMBRO_ACUM };



    if(@ViewData["MES_ACUM_REAL"]<1){ var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_JANEIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_JANEIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_JANEIRO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JANEIRO_ACUM/IND_VN_ANO_N_1_JANEIRO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_JANEIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_FEVEREIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_FEVEREIRO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_FEVEREIRO_ACUM/IND_VN_ANO_N_1_FEVEREIRO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_FEVEREIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_MARCO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_MARCO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_MARCO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_MARCO_ACUM/IND_VN_ANO_N_1_MARCO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_MARCO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_ABRIL_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_ABRIL_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_ABRIL_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_ABRIL_ACUM/IND_VN_ANO_N_1_ABRIL_ACUM*100; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_ABRIL_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_MAIO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_MAIO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_MAIO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_MAIO_ACUM/IND_VN_ANO_N_1_MAIO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_MAIO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_JUNHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_JUNHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_JUNHO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JUNHO_ACUM/IND_VN_ANO_N_1_JUNHO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_JUNHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_JULHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_JULHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_JULHO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JULHO_ACUM/IND_VN_ANO_N_1_JULHO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_JULHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_AGOSTO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_AGOSTO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_AGOSTO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_AGOSTO_ACUM/IND_VN_ANO_N_1_AGOSTO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_AGOSTO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_SETEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_SETEMBRO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_SETEMBRO_ACUM/IND_VN_ANO_N_1_SETEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_SETEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_OUTUBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_OUTUBRO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_OUTUBRO_ACUM/IND_VN_ANO_N_1_OUTUBRO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_OUTUBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_NOVEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_NOVEMBRO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_NOVEMBRO_ACUM/IND_VN_ANO_N_1_NOVEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_NOVEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_DEZEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_DEZEMBRO_ACUM= GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_DEZEMBRO_ACUM/IND_VN_ANO_N_1_DEZEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_DEZEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_DEZEMBRO_ACUM };



    if(@ViewData["MES_ACUM_REAL"]<1){ var VAR_VN_ANO_N_JANEIRO_ACUM = 'nd'; var VAR_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JANEIRO_ACUM= ((IND_VN_ANO_N_JANEIRO_ACUM-IND_VN_ANO_N_1_JANEIRO_ACUM)/Math.abs(IND_VN_ANO_N_1_JANEIRO_ACUM))*100; var VAR_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = VAR_VN_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var VAR_VN_ANO_N_FEVEREIRO_ACUM = 'nd'; var VAR_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_FEVEREIRO_ACUM= ((IND_VN_ANO_N_FEVEREIRO_ACUM-IND_VN_ANO_N_1_FEVEREIRO_ACUM)/Math.abs(IND_VN_ANO_N_1_FEVEREIRO_ACUM))*100; var VAR_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = VAR_VN_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var VAR_VN_ANO_N_MARCO_ACUM = 'nd'; var VAR_VN_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_MARCO_ACUM= ((IND_VN_ANO_N_MARCO_ACUM-IND_VN_ANO_N_1_MARCO_ACUM)/Math.abs(IND_VN_ANO_N_1_MARCO_ACUM))*100; var VAR_VN_ANO_N_MARCO_ACUM_MAX_MIN = VAR_VN_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var VAR_VN_ANO_N_ABRIL_ACUM = 'nd'; var VAR_VN_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_ABRIL_ACUM= ((IND_VN_ANO_N_ABRIL_ACUM-IND_VN_ANO_N_1_ABRIL_ACUM)/Math.abs(IND_VN_ANO_N_1_ABRIL_ACUM))*100; var VAR_VN_ANO_N_ABRIL_ACUM_MAX_MIN = VAR_VN_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var VAR_VN_ANO_N_MAIO_ACUM = 'nd'; var VAR_VN_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_MAIO_ACUM= ((IND_VN_ANO_N_MAIO_ACUM-IND_VN_ANO_N_1_MAIO_ACUM)/Math.abs(IND_VN_ANO_N_1_MAIO_ACUM))*100; var VAR_VN_ANO_N_MAIO_ACUM_MAX_MIN = VAR_VN_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var VAR_VN_ANO_N_JUNHO_ACUM = 'nd'; var VAR_VN_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JUNHO_ACUM= ((IND_VN_ANO_N_JUNHO_ACUM-IND_VN_ANO_N_1_JUNHO_ACUM)/Math.abs(IND_VN_ANO_N_1_JUNHO_ACUM))*100; var VAR_VN_ANO_N_JUNHO_ACUM_MAX_MIN = VAR_VN_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var VAR_VN_ANO_N_JULHO_ACUM = 'nd'; var VAR_VN_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JULHO_ACUM= ((IND_VN_ANO_N_JULHO_ACUM-IND_VN_ANO_N_1_JULHO_ACUM)/Math.abs(IND_VN_ANO_N_1_JULHO_ACUM))*100; var VAR_VN_ANO_N_JULHO_ACUM_MAX_MIN = VAR_VN_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var VAR_VN_ANO_N_AGOSTO_ACUM = 'nd'; var VAR_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_AGOSTO_ACUM= ((IND_VN_ANO_N_AGOSTO_ACUM-IND_VN_ANO_N_1_AGOSTO_ACUM)/Math.abs(IND_VN_ANO_N_1_AGOSTO_ACUM))*100; var VAR_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = VAR_VN_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var VAR_VN_ANO_N_SETEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_SETEMBRO_ACUM= ((IND_VN_ANO_N_SETEMBRO_ACUM-IND_VN_ANO_N_1_SETEMBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_SETEMBRO_ACUM))*100; var VAR_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var VAR_VN_ANO_N_OUTUBRO_ACUM = 'nd'; var VAR_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_OUTUBRO_ACUM= ((IND_VN_ANO_N_OUTUBRO_ACUM-IND_VN_ANO_N_1_OUTUBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_OUTUBRO_ACUM))*100; var VAR_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var VAR_VN_ANO_N_NOVEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_NOVEMBRO_ACUM= ((IND_VN_ANO_N_NOVEMBRO_ACUM-IND_VN_ANO_N_1_NOVEMBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_NOVEMBRO_ACUM))*100; var VAR_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var VAR_VN_ANO_N_DEZEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_DEZEMBRO_ACUM= ((IND_VN_ANO_N_DEZEMBRO_ACUM-IND_VN_ANO_N_1_DEZEMBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_DEZEMBRO_ACUM))*100; var VAR_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_DEZEMBRO_ACUM };



    if(@ViewData["MES_ACUM_REAL"]<1){ var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO_ACUM= ((GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO_ACUM-GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JANEIRO_ACUM)/Math.abs(GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JANEIRO_ACUM))*100; var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO_ACUM= ((GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO_ACUM-GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_FEVEREIRO_ACUM)/Math.abs(GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_FEVEREIRO_ACUM))*100; var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO_ACUM= ((GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO_ACUM-GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_MARCO_ACUM)/Math.abs(GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_MARCO_ACUM))*100; var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL_ACUM= ((GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL_ACUM-GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_ABRIL_ACUM)/Math.abs(GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_ABRIL_ACUM))*100; var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO_ACUM= ((GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO_ACUM-GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_MAIO_ACUM)/Math.abs(GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_MAIO_ACUM))*100; var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO_ACUM= ((GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO_ACUM-GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JUNHO_ACUM)/Math.abs(GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JUNHO_ACUM))*100; var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO_ACUM= ((GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO_ACUM-GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JULHO_ACUM)/Math.abs(GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_JULHO_ACUM))*100; var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO_ACUM= ((GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO_ACUM-GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_AGOSTO_ACUM)/Math.abs(GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_AGOSTO_ACUM))*100; var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO_ACUM= ((GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO_ACUM-GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_SETEMBRO_ACUM)/Math.abs(GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_SETEMBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO_ACUM= ((GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO_ACUM-GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_OUTUBRO_ACUM)/Math.abs(GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_OUTUBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO_ACUM= ((GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO_ACUM-GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_NOVEMBRO_ACUM)/Math.abs(GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_NOVEMBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO_ACUM= ((GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO_ACUM-GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_DEZEMBRO_ACUM)/Math.abs(GASTOS_PESSOAL_REM_PESSOAL_ANO_N_1_DEZEMBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO_ACUM };

    if( PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_JANEIRO_ACUM > PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_JANEIRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO_ACUM=PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_JANEIRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO_ACUM=PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_JANEIRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_FEVEREIRO_ACUM > PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_FEVEREIRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO_ACUM=PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_FEVEREIRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO_ACUM=PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_FEVEREIRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_MARCO_ACUM > PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_MARCO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO_ACUM=PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_MARCO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO_ACUM=PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_MARCO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_ABRIL_ACUM > PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_ABRIL_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL_ACUM=PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_ABRIL_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL_ACUM=PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_ABRIL_ACUM ; }
    if( PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_MAIO_ACUM > PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_MAIO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO_ACUM=PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_MAIO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO_ACUM=PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_MAIO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_JUNHO_ACUM > PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_JUNHO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO_ACUM=PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_JUNHO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO_ACUM=PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_JUNHO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_JULHO_ACUM > PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_JULHO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO_ACUM=PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_JULHO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO_ACUM=PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_JULHO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_AGOSTO_ACUM > PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_AGOSTO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO_ACUM=PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_AGOSTO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO_ACUM=PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_AGOSTO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_SETEMBRO_ACUM > PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_SETEMBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO_ACUM=PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_SETEMBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO_ACUM=PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_SETEMBRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_OUTUBRO_ACUM > PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_OUTUBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO_ACUM=PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_OUTUBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO_ACUM=PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_OUTUBRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_NOVEMBRO_ACUM > PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_NOVEMBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO_ACUM=PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_NOVEMBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO_ACUM=PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_NOVEMBRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_DEZEMBRO_ACUM > PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_DEZEMBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO_ACUM=PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_DEZEMBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO_ACUM=PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_DEZEMBRO_ACUM ; }



    var fillBetweenLinesPlugin = {
        afterDatasetsDraw: function (chart) {
            var ctx = chart.chart.ctx;
            var xaxis = chart.scales['x-axis-0'];
            var yaxis = chart.scales['y-axis-0'];
            var datasets = chart.data.datasets;
            ctx.save();

            for (var d = 0; d < datasets.length; d++) {
                var dataset = datasets[d];
                if (dataset.fillBetweenSet == undefined) {
                    continue;
                }

                // get meta for both data sets
                var meta1 = chart.getDatasetMeta(d);
                var meta2 = chart.getDatasetMeta(dataset.fillBetweenSet);

                // do not draw fill if one of the datasets is hidden
                if (meta1.hidden || meta2.hidden) continue;

                // create fill areas in pairs
                for (var p = 0; p < meta1.data.length-1;p++) {
                    // if null skip
                    if (dataset.data[p] == null || dataset.data[p+1] == null) continue;

                    ctx.beginPath();

                    // trace line 1
                    var curr = meta1.data[p];
                    var next = meta1.data[p+1];
                    ctx.moveTo(curr._view.x, curr._view.y);
                    ctx.lineTo(curr._view.x, curr._view.y);
                    if (curr._view.steppedLine === true) {
                        ctx.lineTo(next._view.x, curr._view.y);
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else if (next._view.tension === 0) {
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else {
                        ctx.bezierCurveTo(
                          curr._view.controlPointNextX,
                          curr._view.controlPointNextY,
                          next._view.controlPointPreviousX,
                          next._view.controlPointPreviousY,
                          next._view.x,
                          next._view.y
                        );
                    }

                    // connect dataset1 to dataset2
                    var curr = meta2.data[p+1];
                    var next = meta2.data[p];
                    ctx.lineTo(curr._view.x, curr._view.y);

                    // trace BACKWORDS set2 to complete the box
                    if (curr._view.steppedLine === true) {
                        ctx.lineTo(curr._view.x, next._view.y);
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else if (next._view.tension === 0) {
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else {
                        // reverse bezier
                        ctx.bezierCurveTo(
                          curr._view.controlPointPreviousX,
                          curr._view.controlPointPreviousY,
                          next._view.controlPointNextX,
                          next._view.controlPointNextY,
                          next._view.x,
                          next._view.y
                        );
                    }

                    // close the loop and fill with shading
                    ctx.closePath();
                    ctx.fillStyle = dataset.fillBetweenColor || "rgba(0,0,0,0.1)";
                    ctx.fill();
                } // end for p loop
            }
        } // end afterDatasetsDraw
    }; // end fillBetweenLinesPlugin

    Chart.pluginService.register(fillBetweenLinesPlugin);



    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_005=document.getElementById('GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_005').getContext('2d');

    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_005=new Chart(GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_005, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label:  'Peso Trab. Espec.vsVN(ac) ' + ANO_VERSAO_REAL_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(250 , 83 , 0)',
                   //borderColor: "#F00",
                   fill: false,
                   steppedLine: false,
                   tension: 0.5,
                   fillBetweenSet: 1,
                   fillBetweenColor: "rgba(0, 221, 0, 0.1)",
                   data: [
                   PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_JANEIRO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_FEVEREIRO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_MARCO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_ABRIL_ACUM,
                   PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_MAIO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_JUNHO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_JULHO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_AGOSTO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_SETEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_OUTUBRO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_NOVEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_DEZEMBRO_ACUM,

                   ],
                   type: 'line'


               },
                {
                    label: 'Peso Trab. Espec.vsVN(ac) ' + ANO_VERSAO_ANTE_,
                    yAxisID: 'A',
                    //backgroundColor: 'rgb(17, 121, 240)',
                    borderColor: 'rgb(0,221,0)',
                    //borderColor: "#00F",
                    fill: false,
                    steppedLine: false,
                    tension: 0.5,
                    data: [
                   PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_JANEIRO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_FEVEREIRO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_MARCO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_ABRIL_ACUM,
                   PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_MAIO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_JUNHO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_JULHO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_AGOSTO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_SETEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_OUTUBRO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_NOVEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_REM_PESSOAL_VN_ANO_N_1_DEZEMBRO_ACUM,
                    ],
                    type: 'line'
                },
    {
        label: 'Ineficiência',
        yAxisID: 'A',
        backgroundColor: "rgba(255, 0, 0, 0.2)",
        borderColor: 'rgba(255, 255, 255, 0.1)',
        //borderColor: "#0D0",
        fill: false,
        steppedLine: false,
        tension: 0.5,
        fillBetweenSet: 1,
        fillBetweenColor: "rgba(255, 0, 0, 0.2)",
        data: [
    INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JANEIRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_FEVEREIRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MARCO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_ABRIL_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_MAIO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JUNHO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_JULHO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_AGOSTO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_SETEMBRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_OUTUBRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_NOVEMBRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_REM_PESSOAL_ANO_N_DEZEMBRO_ACUM,
        ],
        type: 'line'
    },

            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'FSE_Trab. Espec. COMP',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                //min:  Math.round(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ__,0),
                                                //max:  Math.round(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString()+ "%";
                                                }
                                            }
                                        },

                    //{ id: 'B',
                    //type: 'linear',
                    //position: 'right',
                    //ticks: {
                    //    //min:  Math.round(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_min_princ__,0),
                    //    //max:  Math.round(GASTOS_PESSOAL_REM_PESSOAL_Mensal_Eixo_max_princ__,0),
                    //    beginAtZero: true,
                    //    callback: function(value, index, values) {
                    //        return value.toLocaleString();
                    //        }
                    //    }
                    //},






                ]
            }
        },

    });

@*</script>*@

@*------------------------------------------------GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_006-----------------------------------------------------------*@
@*<script>*@

    if(@ViewData["MES_ACUM_REAL"]<1){ var IND_VN_ANO_N_JANEIRO = 'nd'; var IND_VN_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JANEIRO"]))); var IND_VN_ANO_N_JANEIRO_MAX_MIN = IND_VN_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var IND_VN_ANO_N_FEVEREIRO = 'nd'; var IND_VN_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_FEVEREIRO"]))); var IND_VN_ANO_N_FEVEREIRO_MAX_MIN = IND_VN_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var IND_VN_ANO_N_MARCO = 'nd'; var IND_VN_ANO_N_MARCO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_MARCO"]))); var IND_VN_ANO_N_MARCO_MAX_MIN = IND_VN_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var IND_VN_ANO_N_ABRIL = 'nd'; var IND_VN_ANO_N_ABRIL_MAX_MIN = 0;  } else { var IND_VN_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_ABRIL"]))); var IND_VN_ANO_N_ABRIL_MAX_MIN = IND_VN_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var IND_VN_ANO_N_MAIO = 'nd'; var IND_VN_ANO_N_MAIO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_MAIO"]))); var IND_VN_ANO_N_MAIO_MAX_MIN = IND_VN_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var IND_VN_ANO_N_JUNHO = 'nd'; var IND_VN_ANO_N_JUNHO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JUNHO"]))); var IND_VN_ANO_N_JUNHO_MAX_MIN = IND_VN_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var IND_VN_ANO_N_JULHO = 'nd'; var IND_VN_ANO_N_JULHO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JULHO"]))); var IND_VN_ANO_N_JULHO_MAX_MIN = IND_VN_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var IND_VN_ANO_N_AGOSTO = 'nd'; var IND_VN_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_AGOSTO"]))); var IND_VN_ANO_N_AGOSTO_MAX_MIN = IND_VN_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var IND_VN_ANO_N_SETEMBRO = 'nd'; var IND_VN_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_SETEMBRO"]))); var IND_VN_ANO_N_SETEMBRO_MAX_MIN = IND_VN_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var IND_VN_ANO_N_OUTUBRO = 'nd'; var IND_VN_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_OUTUBRO"]))); var IND_VN_ANO_N_OUTUBRO_MAX_MIN = IND_VN_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var IND_VN_ANO_N_NOVEMBRO = 'nd'; var IND_VN_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_NOVEMBRO"]))); var IND_VN_ANO_N_NOVEMBRO_MAX_MIN = IND_VN_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var IND_VN_ANO_N_DEZEMBRO = 'nd'; var IND_VN_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_DEZEMBRO"]))); var IND_VN_ANO_N_DEZEMBRO_MAX_MIN = IND_VN_ANO_N_DEZEMBRO };

    if(@ViewData["MES_ACUM_REAL"]<1){ var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO = 'nd'; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO"]))); var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO_MAX_MIN = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO = 'nd'; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO"]))); var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO_MAX_MIN = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO = 'nd'; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO"]))); var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO_MAX_MIN = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL = 'nd'; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL"]))); var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL_MAX_MIN = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO = 'nd'; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO"]))); var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO_MAX_MIN = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO = 'nd'; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO"]))); var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO_MAX_MIN = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO = 'nd'; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO"]))); var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO_MAX_MIN = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO = 'nd'; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO"]))); var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO_MAX_MIN = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO = 'nd'; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO"]))); var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO_MAX_MIN = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO = 'nd'; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO"]))); var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO_MAX_MIN = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO = 'nd'; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO"]))); var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO_MAX_MIN = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO = 'nd'; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO"]))); var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO_MAX_MIN = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO };


    var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO_ACUM = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO;
    var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO_ACUM = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO + GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO_ACUM;
    var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO_ACUM = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO + GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO_ACUM;
    var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL_ACUM = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL + GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO_ACUM;
    var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO_ACUM = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO + GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL_ACUM;
    var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO_ACUM = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO + GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO_ACUM;
    var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO_ACUM = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO + GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO_ACUM;
    var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO_ACUM = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO + GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO_ACUM;
    var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO_ACUM = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO + GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO_ACUM;
    var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO_ACUM = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO + GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO_ACUM;
    var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO_ACUM = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO + GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO_ACUM;
    var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO_ACUM = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO + GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO_ACUM;




    if(@ViewData["MES_ACUM_REAL"]<1){ var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO_ACUM = 'nd'; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO_ACUM; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO_ACUM_MAX_MIN = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO_ACUM = 'nd'; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO_ACUM; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO_ACUM_MAX_MIN = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO_ACUM = 'nd'; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO_ACUM; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO_ACUM_MAX_MIN = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL_ACUM = 'nd'; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL_ACUM; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL_ACUM_MAX_MIN = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO_ACUM = 'nd'; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO_ACUM; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO_ACUM_MAX_MIN = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO_ACUM = 'nd'; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO_ACUM; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO_ACUM_MAX_MIN = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO_ACUM = 'nd'; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO_ACUM; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO_ACUM_MAX_MIN = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO_ACUM = 'nd'; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO_ACUM; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO_ACUM_MAX_MIN = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO_ACUM = 'nd'; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO_ACUM; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO_ACUM = 'nd'; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO_ACUM; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO_ACUM = 'nd'; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO_ACUM; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO_ACUM = 'nd'; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO_ACUM; var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO_ACUM };




    var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JANEIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JANEIRO"])));
    var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_FEVEREIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_FEVEREIRO"]))) + GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JANEIRO_ACUM;
    var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_MARCO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_MARCO"]))) + GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_FEVEREIRO_ACUM;
    var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_ABRIL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_ABRIL"]))) + GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_MARCO_ACUM;
    var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_MAIO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_MAIO"]))) + GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_ABRIL_ACUM;
    var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JUNHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JUNHO"]))) + GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_MAIO_ACUM;
    var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JULHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JULHO"]))) + GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JUNHO_ACUM;
    var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_AGOSTO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_AGOSTO"]))) + GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JULHO_ACUM;
    var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_SETEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_SETEMBRO"]))) + GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_AGOSTO_ACUM;
    var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_OUTUBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_OUTUBRO"]))) + GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_SETEMBRO_ACUM;
    var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_NOVEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_NOVEMBRO"]))) + GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_OUTUBRO_ACUM;
    var GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_DEZEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_DEZEMBRO"]))) + GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_NOVEMBRO_ACUM;


    var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ= Math.max(
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO_ACUM_MAX_MIN,

                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JANEIRO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_MARCO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_ABRIL_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_MAIO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JUNHO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JULHO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_AGOSTO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_DEZEMBRO_ACUM
                             );
    var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ= Math.min(

                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO_ACUM_MAX_MIN,

                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JANEIRO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_MARCO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_ABRIL_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_MAIO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JUNHO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JULHO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_AGOSTO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_DEZEMBRO_ACUM
                           );
    var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon= Math.max(
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO_MAX_MIN ,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO_MAX_MIN ,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO_MAX_MIN ,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL_MAX_MIN ,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO_MAX_MIN ,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO_MAX_MIN ,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO_MAX_MIN ,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO_MAX_MIN ,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO_MAX_MIN ,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO_MAX_MIN ,



                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_DEZEMBRO"])))

                            );
    var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon= Math.min(
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO_MAX_MIN ,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO_MAX_MIN ,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO_MAX_MIN ,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL_MAX_MIN ,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO_MAX_MIN ,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO_MAX_MIN ,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO_MAX_MIN ,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO_MAX_MIN ,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO_MAX_MIN ,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO_MAX_MIN ,


                           @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_DEZEMBRO"])))

                          );

    //NOTA TA: Aqui trato o minimo e o maximo do eixo principal
    if(Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ)>=Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ))
    {
        var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ_=(Math.ceil(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ),0).toString().length-1);
        var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ_= (Math.floor(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ),0).toString().length-1);
        //alert(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ_);
        //alert(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ_);
    }
    else
    {
        var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ_=(Math.ceil(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ),0).toString().length-1);
        var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ_= (Math.floor(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ),0).toString().length-1);}

    //NOTA TA: Aqui trato o minimo e o maximo do eixo secundario

    if(Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon)>=Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon))
    {
        var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon_=(Math.ceil(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon),0).toString().length-1);
        var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon_= (Math.floor(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon),0).toString().length-1);
        //alert(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon_);
        //alert(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon_);
    }
    else
    {
        var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon_=(Math.ceil(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon),0).toString().length-1);
        var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon_= (Math.floor(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon),0).toString().length-1);}


    if(Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ)/Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ)>=Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon)/Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon))
    { if(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ > 0 && GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ <0 ){ var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon__=(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ_*GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon_)/GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ_;} else { var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon__=GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon_;}
        if(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon > 0 && GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon <0 ){ var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ__=(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon__*GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ_)/GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon_;} else { var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ__=GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ_;}}
    else
    {if(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon > 0 && GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon <0 ){ var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ__=(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon_*GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ_)/GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon_;} else { var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ__=GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ_;}
        if(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ > 0 && GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ <0 ){ var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon__=(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ__*GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon_)/GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ_;} else { var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon__=GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon_;}
    }



    if(Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ)/Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ)>=Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon)/Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon))
    { if(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ > 0 && GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ <0 ){ var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon__=(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ_*GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon_)/GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ_;} else { var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon__=GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon_;}
        if(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon > 0 && GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon <0 ){ var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ__=(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon__*GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ_)/GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon_;} else { var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ__=GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ_;}}
    else
    {if(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon > 0 && GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon <0 ){ var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ__=(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon_*GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ_)/GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon_;} else { var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ__=GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ_;}
        if(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ > 0 && GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ <0 ){ var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon__=(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ__*GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon_)/GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ_;} else { var GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon__=GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon_;}
    }



    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_006=document.getElementById('GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_006').getContext('2d');

    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_006=new Chart(GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_006, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'Publ. Prop.(ac) ' + ANO_VERSAO_REAL_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(250 , 83 , 0)',
                   data: [
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO_ACUM,
                   ],
                   type: 'line'


               },
                              {
                                  label: 'Publ. Prop.(ac) ' + ANO_VERSAO_ANTE_,
                                  yAxisID: 'A',
                                  //backgroundColor: 'rgb(201, 10, 10)',
                                  borderColor: 'rgb(0,221,0)',
                                  data: [
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JANEIRO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_MARCO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_ABRIL_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_MAIO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JUNHO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JULHO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_AGOSTO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_DEZEMBRO_ACUM,
                                  ],
                                  type: 'line'


                              },
                {
                    label:  'Publ. Prop.(m) ' + ANO_VERSAO_REAL_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(250 , 83 , 0, 0.5)',
                    borderColor: 'rgba(250 , 83 , 0, 0.5)',
                    data: [
                  GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO ,
                  GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO ,
                  GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO ,
                  GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL,
                  GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO ,
                  GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO ,
                  GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO ,
                  GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO ,
                  GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO ,
                  GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO ,
                  GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO ,
                  GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO ,
                    ],
                },
                {
                    label:  'Publ. Prop.(m) ' + ANO_VERSAO_ANTE_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(0,221,0, 0.4)',
                    borderColor: 'rgba(0,221,0, 0.4)',
                    data: [
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JANEIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_FEVEREIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_MARCO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_ABRIL"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_MAIO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JUNHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JULHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_AGOSTO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_SETEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_OUTUBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_NOVEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_DEZEMBRO"]))),
                    ],
                },


            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'GASTOS_PESSOAL_BEN_POS_EMP_MENSAL_1',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                min:  Math.round(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ__,0),
                                                max:  Math.round(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString();
                                                }
                                            }
                                        },

                    { id: 'B',
                        type: 'linear',
                        position: 'right',
                        ticks: {
                            min: Math.round(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_secon__,0),
                            max:  Math.round(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_secon__,0),
                            beginAtZero: false,
                            callback: function(value, index, values) {
                                return value.toLocaleString();
                            }
                        }
                    },






                ]
            }
        },

    });

@*</script>*@

@*------------------------------------------------GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_007-----------------------------------------------------------*@
@*<script>*@

    var IND_VN_ANO_N_JANEIRO_ACUM = IND_VN_ANO_N_JANEIRO;
    var IND_VN_ANO_N_FEVEREIRO_ACUM = IND_VN_ANO_N_FEVEREIRO + IND_VN_ANO_N_JANEIRO_ACUM;
    var IND_VN_ANO_N_MARCO_ACUM = IND_VN_ANO_N_MARCO + IND_VN_ANO_N_FEVEREIRO_ACUM;
    var IND_VN_ANO_N_ABRIL_ACUM = IND_VN_ANO_N_ABRIL + IND_VN_ANO_N_MARCO_ACUM;
    var IND_VN_ANO_N_MAIO_ACUM = IND_VN_ANO_N_MAIO + IND_VN_ANO_N_ABRIL_ACUM;
    var IND_VN_ANO_N_JUNHO_ACUM = IND_VN_ANO_N_JUNHO + IND_VN_ANO_N_MAIO_ACUM;
    var IND_VN_ANO_N_JULHO_ACUM = IND_VN_ANO_N_JULHO + IND_VN_ANO_N_JUNHO_ACUM;
    var IND_VN_ANO_N_AGOSTO_ACUM = IND_VN_ANO_N_AGOSTO + IND_VN_ANO_N_JULHO_ACUM;
    var IND_VN_ANO_N_SETEMBRO_ACUM = IND_VN_ANO_N_SETEMBRO + IND_VN_ANO_N_AGOSTO_ACUM;
    var IND_VN_ANO_N_OUTUBRO_ACUM = IND_VN_ANO_N_OUTUBRO + IND_VN_ANO_N_SETEMBRO_ACUM;
    var IND_VN_ANO_N_NOVEMBRO_ACUM = IND_VN_ANO_N_NOVEMBRO + IND_VN_ANO_N_OUTUBRO_ACUM;
    var IND_VN_ANO_N_DEZEMBRO_ACUM = IND_VN_ANO_N_DEZEMBRO + IND_VN_ANO_N_NOVEMBRO_ACUM;



    var IND_VN_ANO_N_1_JANEIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JANEIRO"])));
    var IND_VN_ANO_N_1_FEVEREIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_FEVEREIRO"]))) + IND_VN_ANO_N_1_JANEIRO_ACUM;
    var IND_VN_ANO_N_1_MARCO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_MARCO"]))) + IND_VN_ANO_N_1_FEVEREIRO_ACUM;
    var IND_VN_ANO_N_1_ABRIL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_ABRIL"]))) + IND_VN_ANO_N_1_MARCO_ACUM;
    var IND_VN_ANO_N_1_MAIO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_MAIO"]))) + IND_VN_ANO_N_1_ABRIL_ACUM;
    var IND_VN_ANO_N_1_JUNHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JUNHO"]))) + IND_VN_ANO_N_1_MAIO_ACUM;
    var IND_VN_ANO_N_1_JULHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JULHO"]))) + IND_VN_ANO_N_1_JUNHO_ACUM;
    var IND_VN_ANO_N_1_AGOSTO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_AGOSTO"]))) + IND_VN_ANO_N_1_JULHO_ACUM;
    var IND_VN_ANO_N_1_SETEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_SETEMBRO"]))) + IND_VN_ANO_N_1_AGOSTO_ACUM;
    var IND_VN_ANO_N_1_OUTUBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_OUTUBRO"]))) + IND_VN_ANO_N_1_SETEMBRO_ACUM;
    var IND_VN_ANO_N_1_NOVEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_NOVEMBRO"]))) + IND_VN_ANO_N_1_OUTUBRO_ACUM;
    var IND_VN_ANO_N_1_DEZEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_DEZEMBRO"]))) + IND_VN_ANO_N_1_NOVEMBRO_ACUM;




    if(@ViewData["MES_ACUM_REAL"]<1){ var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_JANEIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_JANEIRO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO_ACUM/IND_VN_ANO_N_JANEIRO_ACUM*100; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_FEVEREIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_FEVEREIRO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO_ACUM/IND_VN_ANO_N_FEVEREIRO_ACUM*100; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_MARCO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_MARCO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO_ACUM/IND_VN_ANO_N_MARCO_ACUM*100; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_MARCO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_ABRIL_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_ABRIL_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL_ACUM/IND_VN_ANO_N_ABRIL_ACUM*100; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_ABRIL_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_MAIO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_MAIO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO_ACUM/IND_VN_ANO_N_MAIO_ACUM*100; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_MAIO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_JUNHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_JUNHO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO_ACUM/IND_VN_ANO_N_JUNHO_ACUM*100; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_JUNHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_JULHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_JULHO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO_ACUM/IND_VN_ANO_N_JULHO_ACUM*100; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_JULHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_AGOSTO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_AGOSTO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO_ACUM/IND_VN_ANO_N_AGOSTO_ACUM*100; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_SETEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_SETEMBRO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO_ACUM/IND_VN_ANO_N_SETEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_OUTUBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_OUTUBRO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO_ACUM/IND_VN_ANO_N_OUTUBRO_ACUM*100; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_NOVEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_NOVEMBRO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO_ACUM/IND_VN_ANO_N_NOVEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_DEZEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_DEZEMBRO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO_ACUM/IND_VN_ANO_N_DEZEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_DEZEMBRO_ACUM };



    if(@ViewData["MES_ACUM_REAL"]<1){ var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_JANEIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_JANEIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_JANEIRO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JANEIRO_ACUM/IND_VN_ANO_N_1_JANEIRO_ACUM*100; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_JANEIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_FEVEREIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_FEVEREIRO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_FEVEREIRO_ACUM/IND_VN_ANO_N_1_FEVEREIRO_ACUM*100; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_FEVEREIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_MARCO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_MARCO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_MARCO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_MARCO_ACUM/IND_VN_ANO_N_1_MARCO_ACUM*100; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_MARCO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_ABRIL_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_ABRIL_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_ABRIL_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_ABRIL_ACUM/IND_VN_ANO_N_1_ABRIL_ACUM*100; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_ABRIL_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_MAIO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_MAIO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_MAIO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_MAIO_ACUM/IND_VN_ANO_N_1_MAIO_ACUM*100; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_MAIO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_JUNHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_JUNHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_JUNHO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JUNHO_ACUM/IND_VN_ANO_N_1_JUNHO_ACUM*100; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_JUNHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_JULHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_JULHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_JULHO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JULHO_ACUM/IND_VN_ANO_N_1_JULHO_ACUM*100; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_JULHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_AGOSTO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_AGOSTO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_AGOSTO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_AGOSTO_ACUM/IND_VN_ANO_N_1_AGOSTO_ACUM*100; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_AGOSTO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_SETEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_SETEMBRO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_SETEMBRO_ACUM/IND_VN_ANO_N_1_SETEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_SETEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_OUTUBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_OUTUBRO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_OUTUBRO_ACUM/IND_VN_ANO_N_1_OUTUBRO_ACUM*100; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_OUTUBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_NOVEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_NOVEMBRO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_NOVEMBRO_ACUM/IND_VN_ANO_N_1_NOVEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_NOVEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_DEZEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_DEZEMBRO_ACUM= GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_DEZEMBRO_ACUM/IND_VN_ANO_N_1_DEZEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_DEZEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_DEZEMBRO_ACUM };



    if(@ViewData["MES_ACUM_REAL"]<1){ var VAR_VN_ANO_N_JANEIRO_ACUM = 'nd'; var VAR_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JANEIRO_ACUM= ((IND_VN_ANO_N_JANEIRO_ACUM-IND_VN_ANO_N_1_JANEIRO_ACUM)/Math.abs(IND_VN_ANO_N_1_JANEIRO_ACUM))*100; var VAR_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = VAR_VN_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var VAR_VN_ANO_N_FEVEREIRO_ACUM = 'nd'; var VAR_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_FEVEREIRO_ACUM= ((IND_VN_ANO_N_FEVEREIRO_ACUM-IND_VN_ANO_N_1_FEVEREIRO_ACUM)/Math.abs(IND_VN_ANO_N_1_FEVEREIRO_ACUM))*100; var VAR_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = VAR_VN_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var VAR_VN_ANO_N_MARCO_ACUM = 'nd'; var VAR_VN_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_MARCO_ACUM= ((IND_VN_ANO_N_MARCO_ACUM-IND_VN_ANO_N_1_MARCO_ACUM)/Math.abs(IND_VN_ANO_N_1_MARCO_ACUM))*100; var VAR_VN_ANO_N_MARCO_ACUM_MAX_MIN = VAR_VN_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var VAR_VN_ANO_N_ABRIL_ACUM = 'nd'; var VAR_VN_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_ABRIL_ACUM= ((IND_VN_ANO_N_ABRIL_ACUM-IND_VN_ANO_N_1_ABRIL_ACUM)/Math.abs(IND_VN_ANO_N_1_ABRIL_ACUM))*100; var VAR_VN_ANO_N_ABRIL_ACUM_MAX_MIN = VAR_VN_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var VAR_VN_ANO_N_MAIO_ACUM = 'nd'; var VAR_VN_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_MAIO_ACUM= ((IND_VN_ANO_N_MAIO_ACUM-IND_VN_ANO_N_1_MAIO_ACUM)/Math.abs(IND_VN_ANO_N_1_MAIO_ACUM))*100; var VAR_VN_ANO_N_MAIO_ACUM_MAX_MIN = VAR_VN_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var VAR_VN_ANO_N_JUNHO_ACUM = 'nd'; var VAR_VN_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JUNHO_ACUM= ((IND_VN_ANO_N_JUNHO_ACUM-IND_VN_ANO_N_1_JUNHO_ACUM)/Math.abs(IND_VN_ANO_N_1_JUNHO_ACUM))*100; var VAR_VN_ANO_N_JUNHO_ACUM_MAX_MIN = VAR_VN_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var VAR_VN_ANO_N_JULHO_ACUM = 'nd'; var VAR_VN_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JULHO_ACUM= ((IND_VN_ANO_N_JULHO_ACUM-IND_VN_ANO_N_1_JULHO_ACUM)/Math.abs(IND_VN_ANO_N_1_JULHO_ACUM))*100; var VAR_VN_ANO_N_JULHO_ACUM_MAX_MIN = VAR_VN_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var VAR_VN_ANO_N_AGOSTO_ACUM = 'nd'; var VAR_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_AGOSTO_ACUM= ((IND_VN_ANO_N_AGOSTO_ACUM-IND_VN_ANO_N_1_AGOSTO_ACUM)/Math.abs(IND_VN_ANO_N_1_AGOSTO_ACUM))*100; var VAR_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = VAR_VN_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var VAR_VN_ANO_N_SETEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_SETEMBRO_ACUM= ((IND_VN_ANO_N_SETEMBRO_ACUM-IND_VN_ANO_N_1_SETEMBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_SETEMBRO_ACUM))*100; var VAR_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var VAR_VN_ANO_N_OUTUBRO_ACUM = 'nd'; var VAR_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_OUTUBRO_ACUM= ((IND_VN_ANO_N_OUTUBRO_ACUM-IND_VN_ANO_N_1_OUTUBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_OUTUBRO_ACUM))*100; var VAR_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var VAR_VN_ANO_N_NOVEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_NOVEMBRO_ACUM= ((IND_VN_ANO_N_NOVEMBRO_ACUM-IND_VN_ANO_N_1_NOVEMBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_NOVEMBRO_ACUM))*100; var VAR_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var VAR_VN_ANO_N_DEZEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_DEZEMBRO_ACUM= ((IND_VN_ANO_N_DEZEMBRO_ACUM-IND_VN_ANO_N_1_DEZEMBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_DEZEMBRO_ACUM))*100; var VAR_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_DEZEMBRO_ACUM };



    if(@ViewData["MES_ACUM_REAL"]<1){ var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO_ACUM= ((GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO_ACUM-GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JANEIRO_ACUM)/Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JANEIRO_ACUM))*100; var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO_ACUM= ((GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO_ACUM-GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_FEVEREIRO_ACUM)/Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_FEVEREIRO_ACUM))*100; var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO_ACUM= ((GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO_ACUM-GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_MARCO_ACUM)/Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_MARCO_ACUM))*100; var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL_ACUM= ((GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL_ACUM-GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_ABRIL_ACUM)/Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_ABRIL_ACUM))*100; var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO_ACUM= ((GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO_ACUM-GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_MAIO_ACUM)/Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_MAIO_ACUM))*100; var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO_ACUM= ((GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO_ACUM-GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JUNHO_ACUM)/Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JUNHO_ACUM))*100; var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO_ACUM= ((GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO_ACUM-GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JULHO_ACUM)/Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_JULHO_ACUM))*100; var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO_ACUM= ((GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO_ACUM-GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_AGOSTO_ACUM)/Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_AGOSTO_ACUM))*100; var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO_ACUM= ((GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO_ACUM-GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_SETEMBRO_ACUM)/Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_SETEMBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO_ACUM= ((GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO_ACUM-GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_OUTUBRO_ACUM)/Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_OUTUBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO_ACUM= ((GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO_ACUM-GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_NOVEMBRO_ACUM)/Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_NOVEMBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO_ACUM= ((GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO_ACUM-GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_DEZEMBRO_ACUM)/Math.abs(GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_1_DEZEMBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO_ACUM };

    if( PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_JANEIRO_ACUM > PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_JANEIRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO_ACUM=PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_JANEIRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO_ACUM=PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_JANEIRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_FEVEREIRO_ACUM > PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_FEVEREIRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO_ACUM=PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_FEVEREIRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO_ACUM=PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_FEVEREIRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_MARCO_ACUM > PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_MARCO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO_ACUM=PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_MARCO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO_ACUM=PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_MARCO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_ABRIL_ACUM > PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_ABRIL_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL_ACUM=PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_ABRIL_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL_ACUM=PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_ABRIL_ACUM ; }
    if( PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_MAIO_ACUM > PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_MAIO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO_ACUM=PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_MAIO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO_ACUM=PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_MAIO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_JUNHO_ACUM > PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_JUNHO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO_ACUM=PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_JUNHO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO_ACUM=PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_JUNHO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_JULHO_ACUM > PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_JULHO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO_ACUM=PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_JULHO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO_ACUM=PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_JULHO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_AGOSTO_ACUM > PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_AGOSTO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO_ACUM=PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_AGOSTO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO_ACUM=PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_AGOSTO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_SETEMBRO_ACUM > PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_SETEMBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO_ACUM=PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_SETEMBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO_ACUM=PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_SETEMBRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_OUTUBRO_ACUM > PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_OUTUBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO_ACUM=PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_OUTUBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO_ACUM=PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_OUTUBRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_NOVEMBRO_ACUM > PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_NOVEMBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO_ACUM=PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_NOVEMBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO_ACUM=PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_NOVEMBRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_DEZEMBRO_ACUM > PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_DEZEMBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO_ACUM=PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_DEZEMBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO_ACUM=PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_DEZEMBRO_ACUM ; }



    var fillBetweenLinesPlugin = {
        afterDatasetsDraw: function (chart) {
            var ctx = chart.chart.ctx;
            var xaxis = chart.scales['x-axis-0'];
            var yaxis = chart.scales['y-axis-0'];
            var datasets = chart.data.datasets;
            ctx.save();

            for (var d = 0; d < datasets.length; d++) {
                var dataset = datasets[d];
                if (dataset.fillBetweenSet == undefined) {
                    continue;
                }

                // get meta for both data sets
                var meta1 = chart.getDatasetMeta(d);
                var meta2 = chart.getDatasetMeta(dataset.fillBetweenSet);

                // do not draw fill if one of the datasets is hidden
                if (meta1.hidden || meta2.hidden) continue;

                // create fill areas in pairs
                for (var p = 0; p < meta1.data.length-1;p++) {
                    // if null skip
                    if (dataset.data[p] == null || dataset.data[p+1] == null) continue;

                    ctx.beginPath();

                    // trace line 1
                    var curr = meta1.data[p];
                    var next = meta1.data[p+1];
                    ctx.moveTo(curr._view.x, curr._view.y);
                    ctx.lineTo(curr._view.x, curr._view.y);
                    if (curr._view.steppedLine === true) {
                        ctx.lineTo(next._view.x, curr._view.y);
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else if (next._view.tension === 0) {
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else {
                        ctx.bezierCurveTo(
                          curr._view.controlPointNextX,
                          curr._view.controlPointNextY,
                          next._view.controlPointPreviousX,
                          next._view.controlPointPreviousY,
                          next._view.x,
                          next._view.y
                        );
                    }

                    // connect dataset1 to dataset2
                    var curr = meta2.data[p+1];
                    var next = meta2.data[p];
                    ctx.lineTo(curr._view.x, curr._view.y);

                    // trace BACKWORDS set2 to complete the box
                    if (curr._view.steppedLine === true) {
                        ctx.lineTo(curr._view.x, next._view.y);
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else if (next._view.tension === 0) {
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else {
                        // reverse bezier
                        ctx.bezierCurveTo(
                          curr._view.controlPointPreviousX,
                          curr._view.controlPointPreviousY,
                          next._view.controlPointNextX,
                          next._view.controlPointNextY,
                          next._view.x,
                          next._view.y
                        );
                    }

                    // close the loop and fill with shading
                    ctx.closePath();
                    ctx.fillStyle = dataset.fillBetweenColor || "rgba(0,0,0,0.1)";
                    ctx.fill();
                } // end for p loop
            }
        } // end afterDatasetsDraw
    }; // end fillBetweenLinesPlugin

    Chart.pluginService.register(fillBetweenLinesPlugin);



    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_007=document.getElementById('GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_007').getContext('2d');

    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_007=new Chart(GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_007, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label:  'Peso Publ. Prop.vsVN(ac) ' + ANO_VERSAO_REAL_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(250 , 83 , 0)',
                   //borderColor: "#F00",
                   fill: false,
                   steppedLine: false,
                   tension: 0.5,
                   fillBetweenSet: 1,
                   fillBetweenColor: "rgba(0, 221, 0, 0.1)",
                   data: [
                   PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_JANEIRO_ACUM,
                   PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_FEVEREIRO_ACUM,
                   PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_MARCO_ACUM,
                   PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_ABRIL_ACUM,
                   PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_MAIO_ACUM,
                   PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_JUNHO_ACUM,
                   PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_JULHO_ACUM,
                   PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_AGOSTO_ACUM,
                   PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_SETEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_OUTUBRO_ACUM,
                   PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_NOVEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_DEZEMBRO_ACUM,

                   ],
                   type: 'line'


               },
                {
                    label: 'Peso Publ. Prop.vsVN(ac) ' + ANO_VERSAO_ANTE_,
                    yAxisID: 'A',
                    //backgroundColor: 'rgb(17, 121, 240)',
                    borderColor: 'rgb(0,221,0)',
                    //borderColor: "#00F",
                    fill: false,
                    steppedLine: false,
                    tension: 0.5,
                    data: [
                   PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_JANEIRO_ACUM,
                   PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_FEVEREIRO_ACUM,
                   PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_MARCO_ACUM,
                   PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_ABRIL_ACUM,
                   PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_MAIO_ACUM,
                   PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_JUNHO_ACUM,
                   PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_JULHO_ACUM,
                   PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_AGOSTO_ACUM,
                   PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_SETEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_OUTUBRO_ACUM,
                   PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_NOVEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_BEN_POS_EMP_VN_ANO_N_1_DEZEMBRO_ACUM,
                    ],
                    type: 'line'
                },
    {
        label: 'Ineficiência',
        yAxisID: 'A',
        backgroundColor: "rgba(255, 0, 0, 0.2)",
        borderColor: 'rgba(255, 255, 255, 0.1)',
        //borderColor: "#0D0",
        fill: false,
        steppedLine: false,
        tension: 0.5,
        fillBetweenSet: 1,
        fillBetweenColor: "rgba(255, 0, 0, 0.2)",
        data: [
    INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JANEIRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_FEVEREIRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MARCO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_ABRIL_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_MAIO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JUNHO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_JULHO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_AGOSTO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_SETEMBRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_OUTUBRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_NOVEMBRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_BEN_POS_EMP_ANO_N_DEZEMBRO_ACUM,
        ],
        type: 'line'
    },

            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'FSE_Publ. Prop. COMP',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                //min:  Math.round(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ__,0),
                                                //max:  Math.round(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString()+ "%";
                                                }
                                            }
                                        },

                    //{ id: 'B',
                    //type: 'linear',
                    //position: 'right',
                    //ticks: {
                    //    //min:  Math.round(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_min_princ__,0),
                    //    //max:  Math.round(GASTOS_PESSOAL_BEN_POS_EMP_Mensal_Eixo_max_princ__,0),
                    //    beginAtZero: true,
                    //    callback: function(value, index, values) {
                    //        return value.toLocaleString();
                    //        }
                    //    }
                    //},






                ]
            }
        },

    });

@*</script>*@

@*------------------------------------------------GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_008-----------------------------------------------------------*@
@*<script>*@

    if(@ViewData["MES_ACUM_REAL"]<1){ var IND_VN_ANO_N_JANEIRO = 'nd'; var IND_VN_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JANEIRO"]))); var IND_VN_ANO_N_JANEIRO_MAX_MIN = IND_VN_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var IND_VN_ANO_N_FEVEREIRO = 'nd'; var IND_VN_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_FEVEREIRO"]))); var IND_VN_ANO_N_FEVEREIRO_MAX_MIN = IND_VN_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var IND_VN_ANO_N_MARCO = 'nd'; var IND_VN_ANO_N_MARCO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_MARCO"]))); var IND_VN_ANO_N_MARCO_MAX_MIN = IND_VN_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var IND_VN_ANO_N_ABRIL = 'nd'; var IND_VN_ANO_N_ABRIL_MAX_MIN = 0;  } else { var IND_VN_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_ABRIL"]))); var IND_VN_ANO_N_ABRIL_MAX_MIN = IND_VN_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var IND_VN_ANO_N_MAIO = 'nd'; var IND_VN_ANO_N_MAIO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_MAIO"]))); var IND_VN_ANO_N_MAIO_MAX_MIN = IND_VN_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var IND_VN_ANO_N_JUNHO = 'nd'; var IND_VN_ANO_N_JUNHO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JUNHO"]))); var IND_VN_ANO_N_JUNHO_MAX_MIN = IND_VN_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var IND_VN_ANO_N_JULHO = 'nd'; var IND_VN_ANO_N_JULHO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JULHO"]))); var IND_VN_ANO_N_JULHO_MAX_MIN = IND_VN_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var IND_VN_ANO_N_AGOSTO = 'nd'; var IND_VN_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_AGOSTO"]))); var IND_VN_ANO_N_AGOSTO_MAX_MIN = IND_VN_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var IND_VN_ANO_N_SETEMBRO = 'nd'; var IND_VN_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_SETEMBRO"]))); var IND_VN_ANO_N_SETEMBRO_MAX_MIN = IND_VN_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var IND_VN_ANO_N_OUTUBRO = 'nd'; var IND_VN_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_OUTUBRO"]))); var IND_VN_ANO_N_OUTUBRO_MAX_MIN = IND_VN_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var IND_VN_ANO_N_NOVEMBRO = 'nd'; var IND_VN_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_NOVEMBRO"]))); var IND_VN_ANO_N_NOVEMBRO_MAX_MIN = IND_VN_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var IND_VN_ANO_N_DEZEMBRO = 'nd'; var IND_VN_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_DEZEMBRO"]))); var IND_VN_ANO_N_DEZEMBRO_MAX_MIN = IND_VN_ANO_N_DEZEMBRO };

    if(@ViewData["MES_ACUM_REAL"]<1){ var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO = 'nd'; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO"]))); var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO_MAX_MIN = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO = 'nd'; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO"]))); var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO_MAX_MIN = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO = 'nd'; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO"]))); var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO_MAX_MIN = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL = 'nd'; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL"]))); var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL_MAX_MIN = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO = 'nd'; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO"]))); var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO_MAX_MIN = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO = 'nd'; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO"]))); var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO_MAX_MIN = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO = 'nd'; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO"]))); var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO_MAX_MIN = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO = 'nd'; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO"]))); var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO_MAX_MIN = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO = 'nd'; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO"]))); var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO_MAX_MIN = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO = 'nd'; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO"]))); var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO_MAX_MIN = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO = 'nd'; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO"]))); var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO_MAX_MIN = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO = 'nd'; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO"]))); var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO_MAX_MIN = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO };


    var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO_ACUM = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO;
    var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO_ACUM = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO + GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO_ACUM;
    var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO_ACUM = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO + GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO_ACUM;
    var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL_ACUM = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL + GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO_ACUM;
    var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO_ACUM = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO + GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL_ACUM;
    var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO_ACUM = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO + GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO_ACUM;
    var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO_ACUM = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO + GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO_ACUM;
    var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO_ACUM = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO + GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO_ACUM;
    var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO_ACUM = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO + GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO_ACUM;
    var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO_ACUM = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO + GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO_ACUM;
    var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO_ACUM = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO + GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO_ACUM;
    var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO_ACUM = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO + GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO_ACUM;




    if(@ViewData["MES_ACUM_REAL"]<1){ var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO_ACUM = 'nd'; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO_ACUM; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO_ACUM_MAX_MIN = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO_ACUM = 'nd'; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO_ACUM; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO_ACUM_MAX_MIN = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO_ACUM = 'nd'; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO_ACUM; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO_ACUM_MAX_MIN = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL_ACUM = 'nd'; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL_ACUM; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL_ACUM_MAX_MIN = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO_ACUM = 'nd'; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO_ACUM; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO_ACUM_MAX_MIN = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO_ACUM = 'nd'; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO_ACUM; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO_ACUM_MAX_MIN = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO_ACUM = 'nd'; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO_ACUM; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO_ACUM_MAX_MIN = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO_ACUM = 'nd'; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO_ACUM; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO_ACUM_MAX_MIN = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO_ACUM = 'nd'; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO_ACUM; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO_ACUM = 'nd'; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO_ACUM; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO_ACUM = 'nd'; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO_ACUM; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO_ACUM = 'nd'; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO_ACUM; var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO_ACUM };




    var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JANEIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JANEIRO"])));
    var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_FEVEREIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_FEVEREIRO"]))) + GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JANEIRO_ACUM;
    var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_MARCO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_MARCO"]))) + GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_FEVEREIRO_ACUM;
    var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_ABRIL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_ABRIL"]))) + GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_MARCO_ACUM;
    var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_MAIO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_MAIO"]))) + GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_ABRIL_ACUM;
    var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JUNHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JUNHO"]))) + GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_MAIO_ACUM;
    var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JULHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JULHO"]))) + GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JUNHO_ACUM;
    var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_AGOSTO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_AGOSTO"]))) + GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JULHO_ACUM;
    var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_SETEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_SETEMBRO"]))) + GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_AGOSTO_ACUM;
    var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_OUTUBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_OUTUBRO"]))) + GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_SETEMBRO_ACUM;
    var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_NOVEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_NOVEMBRO"]))) + GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_OUTUBRO_ACUM;
    var GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_DEZEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_DEZEMBRO"]))) + GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_NOVEMBRO_ACUM;


    var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ= Math.max(
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO_ACUM_MAX_MIN,

                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JANEIRO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_MARCO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_ABRIL_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_MAIO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JUNHO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JULHO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_AGOSTO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_DEZEMBRO_ACUM
                             );
    var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ= Math.min(

                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO_ACUM_MAX_MIN,

                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JANEIRO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_MARCO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_ABRIL_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_MAIO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JUNHO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JULHO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_AGOSTO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_DEZEMBRO_ACUM
                           );
    var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon= Math.max(
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO_MAX_MIN ,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO_MAX_MIN ,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO_MAX_MIN ,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL_MAX_MIN ,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO_MAX_MIN ,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO_MAX_MIN ,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO_MAX_MIN ,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO_MAX_MIN ,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO_MAX_MIN ,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO_MAX_MIN ,



                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_DEZEMBRO"])))

                            );
    var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon= Math.min(
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO_MAX_MIN ,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO_MAX_MIN ,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO_MAX_MIN ,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL_MAX_MIN ,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO_MAX_MIN ,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO_MAX_MIN ,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO_MAX_MIN ,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO_MAX_MIN ,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO_MAX_MIN ,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO_MAX_MIN ,


                           @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_DEZEMBRO"])))

                          );

    //NOTA TA: Aqui trato o minimo e o maximo do eixo principal
    if(Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ)>=Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ))
    {
        var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ_=(Math.ceil(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ),0).toString().length-1);
        var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ_= (Math.floor(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ),0).toString().length-1);
        //alert(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ_);
        //alert(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ_);
    }
    else
    {
        var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ_=(Math.ceil(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ),0).toString().length-1);
        var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ_= (Math.floor(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ),0).toString().length-1);}

    //NOTA TA: Aqui trato o minimo e o maximo do eixo secundario

    if(Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon)>=Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon))
    {
        var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon_=(Math.ceil(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon),0).toString().length-1);
        var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon_= (Math.floor(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon),0).toString().length-1);
        //alert(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon_);
        //alert(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon_);
    }
    else
    {
        var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon_=(Math.ceil(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon),0).toString().length-1);
        var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon_= (Math.floor(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon),0).toString().length-1);}


    if(Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ)/Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ)>=Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon)/Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon))
    { if(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ > 0 && GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ <0 ){ var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon__=(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ_*GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon_)/GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ_;} else { var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon__=GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon_;}
        if(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon > 0 && GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon <0 ){ var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ__=(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon__*GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ_)/GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon_;} else { var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ__=GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ_;}}
    else
    {if(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon > 0 && GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon <0 ){ var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ__=(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon_*GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ_)/GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon_;} else { var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ__=GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ_;}
        if(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ > 0 && GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ <0 ){ var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon__=(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ__*GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon_)/GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ_;} else { var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon__=GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon_;}
    }



    if(Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ)/Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ)>=Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon)/Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon))
    { if(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ > 0 && GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ <0 ){ var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon__=(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ_*GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon_)/GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ_;} else { var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon__=GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon_;}
        if(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon > 0 && GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon <0 ){ var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ__=(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon__*GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ_)/GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon_;} else { var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ__=GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ_;}}
    else
    {if(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon > 0 && GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon <0 ){ var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ__=(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon_*GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ_)/GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon_;} else { var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ__=GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ_;}
        if(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ > 0 && GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ <0 ){ var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon__=(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ__*GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon_)/GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ_;} else { var GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon__=GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon_;}
    }



    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_008=document.getElementById('GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_008').getContext('2d');

    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_008=new Chart(GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_008, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'Vigil. Segu.(ac) ' + ANO_VERSAO_REAL_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(250 , 83 , 0)',
                   data: [
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO_ACUM,
                   ],
                   type: 'line'


               },
                              {
                                  label: 'Vigil. Segu.(ac) ' + ANO_VERSAO_ANTE_,
                                  yAxisID: 'A',
                                  //backgroundColor: 'rgb(201, 10, 10)',
                                  borderColor: 'rgb(0,221,0)',
                                  data: [
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JANEIRO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_MARCO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_ABRIL_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_MAIO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JUNHO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JULHO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_AGOSTO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_DEZEMBRO_ACUM,
                                  ],
                                  type: 'line'


                              },
                {
                    label:  'Vigil. Segu.(m) ' + ANO_VERSAO_REAL_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(250 , 83 , 0, 0.5)',
                    borderColor: 'rgba(250 , 83 , 0, 0.5)',
                    data: [
                  GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO ,
                  GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO ,
                  GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO ,
                  GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL,
                  GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO ,
                  GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO ,
                  GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO ,
                  GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO ,
                  GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO ,
                  GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO ,
                  GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO ,
                  GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO ,
                    ],
                },
                {
                    label:  'Vigil. Segu.(m) ' + ANO_VERSAO_ANTE_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(0,221,0, 0.4)',
                    borderColor: 'rgba(0,221,0, 0.4)',
                    data: [
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JANEIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_FEVEREIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_MARCO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_ABRIL"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_MAIO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JUNHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JULHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_AGOSTO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_SETEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_OUTUBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_NOVEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_DEZEMBRO"]))),
                    ],
                },


            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'GASTOS_PESSOAL_INDEMNIZACOES_MENSAL_1',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                min:  Math.round(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ__,0),
                                                max:  Math.round(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString();
                                                }
                                            }
                                        },

                    { id: 'B',
                        type: 'linear',
                        position: 'right',
                        ticks: {
                            min: Math.round(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_secon__,0),
                            max:  Math.round(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_secon__,0),
                            beginAtZero: false,
                            callback: function(value, index, values) {
                                return value.toLocaleString();
                            }
                        }
                    },






                ]
            }
        },

    });

@*</script>*@

@*------------------------------------------------GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_009-----------------------------------------------------------*@
@*<script>*@

    var IND_VN_ANO_N_JANEIRO_ACUM = IND_VN_ANO_N_JANEIRO;
    var IND_VN_ANO_N_FEVEREIRO_ACUM = IND_VN_ANO_N_FEVEREIRO + IND_VN_ANO_N_JANEIRO_ACUM;
    var IND_VN_ANO_N_MARCO_ACUM = IND_VN_ANO_N_MARCO + IND_VN_ANO_N_FEVEREIRO_ACUM;
    var IND_VN_ANO_N_ABRIL_ACUM = IND_VN_ANO_N_ABRIL + IND_VN_ANO_N_MARCO_ACUM;
    var IND_VN_ANO_N_MAIO_ACUM = IND_VN_ANO_N_MAIO + IND_VN_ANO_N_ABRIL_ACUM;
    var IND_VN_ANO_N_JUNHO_ACUM = IND_VN_ANO_N_JUNHO + IND_VN_ANO_N_MAIO_ACUM;
    var IND_VN_ANO_N_JULHO_ACUM = IND_VN_ANO_N_JULHO + IND_VN_ANO_N_JUNHO_ACUM;
    var IND_VN_ANO_N_AGOSTO_ACUM = IND_VN_ANO_N_AGOSTO + IND_VN_ANO_N_JULHO_ACUM;
    var IND_VN_ANO_N_SETEMBRO_ACUM = IND_VN_ANO_N_SETEMBRO + IND_VN_ANO_N_AGOSTO_ACUM;
    var IND_VN_ANO_N_OUTUBRO_ACUM = IND_VN_ANO_N_OUTUBRO + IND_VN_ANO_N_SETEMBRO_ACUM;
    var IND_VN_ANO_N_NOVEMBRO_ACUM = IND_VN_ANO_N_NOVEMBRO + IND_VN_ANO_N_OUTUBRO_ACUM;
    var IND_VN_ANO_N_DEZEMBRO_ACUM = IND_VN_ANO_N_DEZEMBRO + IND_VN_ANO_N_NOVEMBRO_ACUM;



    var IND_VN_ANO_N_1_JANEIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JANEIRO"])));
    var IND_VN_ANO_N_1_FEVEREIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_FEVEREIRO"]))) + IND_VN_ANO_N_1_JANEIRO_ACUM;
    var IND_VN_ANO_N_1_MARCO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_MARCO"]))) + IND_VN_ANO_N_1_FEVEREIRO_ACUM;
    var IND_VN_ANO_N_1_ABRIL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_ABRIL"]))) + IND_VN_ANO_N_1_MARCO_ACUM;
    var IND_VN_ANO_N_1_MAIO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_MAIO"]))) + IND_VN_ANO_N_1_ABRIL_ACUM;
    var IND_VN_ANO_N_1_JUNHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JUNHO"]))) + IND_VN_ANO_N_1_MAIO_ACUM;
    var IND_VN_ANO_N_1_JULHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JULHO"]))) + IND_VN_ANO_N_1_JUNHO_ACUM;
    var IND_VN_ANO_N_1_AGOSTO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_AGOSTO"]))) + IND_VN_ANO_N_1_JULHO_ACUM;
    var IND_VN_ANO_N_1_SETEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_SETEMBRO"]))) + IND_VN_ANO_N_1_AGOSTO_ACUM;
    var IND_VN_ANO_N_1_OUTUBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_OUTUBRO"]))) + IND_VN_ANO_N_1_SETEMBRO_ACUM;
    var IND_VN_ANO_N_1_NOVEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_NOVEMBRO"]))) + IND_VN_ANO_N_1_OUTUBRO_ACUM;
    var IND_VN_ANO_N_1_DEZEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_DEZEMBRO"]))) + IND_VN_ANO_N_1_NOVEMBRO_ACUM;




    if(@ViewData["MES_ACUM_REAL"]<1){ var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_JANEIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_JANEIRO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO_ACUM/IND_VN_ANO_N_JANEIRO_ACUM*100; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_FEVEREIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_FEVEREIRO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO_ACUM/IND_VN_ANO_N_FEVEREIRO_ACUM*100; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_MARCO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_MARCO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO_ACUM/IND_VN_ANO_N_MARCO_ACUM*100; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_MARCO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_ABRIL_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_ABRIL_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL_ACUM/IND_VN_ANO_N_ABRIL_ACUM*100; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_ABRIL_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_MAIO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_MAIO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO_ACUM/IND_VN_ANO_N_MAIO_ACUM*100; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_MAIO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_JUNHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_JUNHO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO_ACUM/IND_VN_ANO_N_JUNHO_ACUM*100; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_JUNHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_JULHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_JULHO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO_ACUM/IND_VN_ANO_N_JULHO_ACUM*100; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_JULHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_AGOSTO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_AGOSTO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO_ACUM/IND_VN_ANO_N_AGOSTO_ACUM*100; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_SETEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_SETEMBRO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO_ACUM/IND_VN_ANO_N_SETEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_OUTUBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_OUTUBRO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO_ACUM/IND_VN_ANO_N_OUTUBRO_ACUM*100; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_NOVEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_NOVEMBRO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO_ACUM/IND_VN_ANO_N_NOVEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_DEZEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_DEZEMBRO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO_ACUM/IND_VN_ANO_N_DEZEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_DEZEMBRO_ACUM };



    if(@ViewData["MES_ACUM_REAL"]<1){ var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_JANEIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_JANEIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_JANEIRO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JANEIRO_ACUM/IND_VN_ANO_N_1_JANEIRO_ACUM*100; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_JANEIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_FEVEREIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_FEVEREIRO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_FEVEREIRO_ACUM/IND_VN_ANO_N_1_FEVEREIRO_ACUM*100; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_FEVEREIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_MARCO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_MARCO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_MARCO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_MARCO_ACUM/IND_VN_ANO_N_1_MARCO_ACUM*100; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_MARCO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_ABRIL_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_ABRIL_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_ABRIL_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_ABRIL_ACUM/IND_VN_ANO_N_1_ABRIL_ACUM*100; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_ABRIL_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_MAIO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_MAIO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_MAIO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_MAIO_ACUM/IND_VN_ANO_N_1_MAIO_ACUM*100; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_MAIO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_JUNHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_JUNHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_JUNHO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JUNHO_ACUM/IND_VN_ANO_N_1_JUNHO_ACUM*100; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_JUNHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_JULHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_JULHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_JULHO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JULHO_ACUM/IND_VN_ANO_N_1_JULHO_ACUM*100; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_JULHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_AGOSTO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_AGOSTO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_AGOSTO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_AGOSTO_ACUM/IND_VN_ANO_N_1_AGOSTO_ACUM*100; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_AGOSTO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_SETEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_SETEMBRO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_SETEMBRO_ACUM/IND_VN_ANO_N_1_SETEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_SETEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_OUTUBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_OUTUBRO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_OUTUBRO_ACUM/IND_VN_ANO_N_1_OUTUBRO_ACUM*100; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_OUTUBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_NOVEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_NOVEMBRO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_NOVEMBRO_ACUM/IND_VN_ANO_N_1_NOVEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_NOVEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_DEZEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_DEZEMBRO_ACUM= GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_DEZEMBRO_ACUM/IND_VN_ANO_N_1_DEZEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_DEZEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_DEZEMBRO_ACUM };



    if(@ViewData["MES_ACUM_REAL"]<1){ var VAR_VN_ANO_N_JANEIRO_ACUM = 'nd'; var VAR_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JANEIRO_ACUM= ((IND_VN_ANO_N_JANEIRO_ACUM-IND_VN_ANO_N_1_JANEIRO_ACUM)/Math.abs(IND_VN_ANO_N_1_JANEIRO_ACUM))*100; var VAR_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = VAR_VN_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var VAR_VN_ANO_N_FEVEREIRO_ACUM = 'nd'; var VAR_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_FEVEREIRO_ACUM= ((IND_VN_ANO_N_FEVEREIRO_ACUM-IND_VN_ANO_N_1_FEVEREIRO_ACUM)/Math.abs(IND_VN_ANO_N_1_FEVEREIRO_ACUM))*100; var VAR_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = VAR_VN_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var VAR_VN_ANO_N_MARCO_ACUM = 'nd'; var VAR_VN_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_MARCO_ACUM= ((IND_VN_ANO_N_MARCO_ACUM-IND_VN_ANO_N_1_MARCO_ACUM)/Math.abs(IND_VN_ANO_N_1_MARCO_ACUM))*100; var VAR_VN_ANO_N_MARCO_ACUM_MAX_MIN = VAR_VN_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var VAR_VN_ANO_N_ABRIL_ACUM = 'nd'; var VAR_VN_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_ABRIL_ACUM= ((IND_VN_ANO_N_ABRIL_ACUM-IND_VN_ANO_N_1_ABRIL_ACUM)/Math.abs(IND_VN_ANO_N_1_ABRIL_ACUM))*100; var VAR_VN_ANO_N_ABRIL_ACUM_MAX_MIN = VAR_VN_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var VAR_VN_ANO_N_MAIO_ACUM = 'nd'; var VAR_VN_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_MAIO_ACUM= ((IND_VN_ANO_N_MAIO_ACUM-IND_VN_ANO_N_1_MAIO_ACUM)/Math.abs(IND_VN_ANO_N_1_MAIO_ACUM))*100; var VAR_VN_ANO_N_MAIO_ACUM_MAX_MIN = VAR_VN_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var VAR_VN_ANO_N_JUNHO_ACUM = 'nd'; var VAR_VN_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JUNHO_ACUM= ((IND_VN_ANO_N_JUNHO_ACUM-IND_VN_ANO_N_1_JUNHO_ACUM)/Math.abs(IND_VN_ANO_N_1_JUNHO_ACUM))*100; var VAR_VN_ANO_N_JUNHO_ACUM_MAX_MIN = VAR_VN_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var VAR_VN_ANO_N_JULHO_ACUM = 'nd'; var VAR_VN_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JULHO_ACUM= ((IND_VN_ANO_N_JULHO_ACUM-IND_VN_ANO_N_1_JULHO_ACUM)/Math.abs(IND_VN_ANO_N_1_JULHO_ACUM))*100; var VAR_VN_ANO_N_JULHO_ACUM_MAX_MIN = VAR_VN_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var VAR_VN_ANO_N_AGOSTO_ACUM = 'nd'; var VAR_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_AGOSTO_ACUM= ((IND_VN_ANO_N_AGOSTO_ACUM-IND_VN_ANO_N_1_AGOSTO_ACUM)/Math.abs(IND_VN_ANO_N_1_AGOSTO_ACUM))*100; var VAR_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = VAR_VN_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var VAR_VN_ANO_N_SETEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_SETEMBRO_ACUM= ((IND_VN_ANO_N_SETEMBRO_ACUM-IND_VN_ANO_N_1_SETEMBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_SETEMBRO_ACUM))*100; var VAR_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var VAR_VN_ANO_N_OUTUBRO_ACUM = 'nd'; var VAR_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_OUTUBRO_ACUM= ((IND_VN_ANO_N_OUTUBRO_ACUM-IND_VN_ANO_N_1_OUTUBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_OUTUBRO_ACUM))*100; var VAR_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var VAR_VN_ANO_N_NOVEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_NOVEMBRO_ACUM= ((IND_VN_ANO_N_NOVEMBRO_ACUM-IND_VN_ANO_N_1_NOVEMBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_NOVEMBRO_ACUM))*100; var VAR_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var VAR_VN_ANO_N_DEZEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_DEZEMBRO_ACUM= ((IND_VN_ANO_N_DEZEMBRO_ACUM-IND_VN_ANO_N_1_DEZEMBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_DEZEMBRO_ACUM))*100; var VAR_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_DEZEMBRO_ACUM };



    if(@ViewData["MES_ACUM_REAL"]<1){ var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO_ACUM= ((GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO_ACUM-GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JANEIRO_ACUM)/Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JANEIRO_ACUM))*100; var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO_ACUM= ((GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO_ACUM-GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_FEVEREIRO_ACUM)/Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_FEVEREIRO_ACUM))*100; var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO_ACUM= ((GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO_ACUM-GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_MARCO_ACUM)/Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_MARCO_ACUM))*100; var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL_ACUM= ((GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL_ACUM-GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_ABRIL_ACUM)/Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_ABRIL_ACUM))*100; var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO_ACUM= ((GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO_ACUM-GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_MAIO_ACUM)/Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_MAIO_ACUM))*100; var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO_ACUM= ((GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO_ACUM-GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JUNHO_ACUM)/Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JUNHO_ACUM))*100; var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO_ACUM= ((GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO_ACUM-GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JULHO_ACUM)/Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_JULHO_ACUM))*100; var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO_ACUM= ((GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO_ACUM-GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_AGOSTO_ACUM)/Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_AGOSTO_ACUM))*100; var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO_ACUM= ((GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO_ACUM-GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_SETEMBRO_ACUM)/Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_SETEMBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO_ACUM= ((GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO_ACUM-GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_OUTUBRO_ACUM)/Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_OUTUBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO_ACUM= ((GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO_ACUM-GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_NOVEMBRO_ACUM)/Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_NOVEMBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO_ACUM= ((GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO_ACUM-GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_DEZEMBRO_ACUM)/Math.abs(GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_1_DEZEMBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO_ACUM };

    if( PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_JANEIRO_ACUM > PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_JANEIRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO_ACUM=PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_JANEIRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO_ACUM=PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_JANEIRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_FEVEREIRO_ACUM > PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_FEVEREIRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO_ACUM=PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_FEVEREIRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO_ACUM=PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_FEVEREIRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_MARCO_ACUM > PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_MARCO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO_ACUM=PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_MARCO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO_ACUM=PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_MARCO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_ABRIL_ACUM > PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_ABRIL_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL_ACUM=PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_ABRIL_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL_ACUM=PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_ABRIL_ACUM ; }
    if( PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_MAIO_ACUM > PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_MAIO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO_ACUM=PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_MAIO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO_ACUM=PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_MAIO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_JUNHO_ACUM > PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_JUNHO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO_ACUM=PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_JUNHO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO_ACUM=PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_JUNHO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_JULHO_ACUM > PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_JULHO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO_ACUM=PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_JULHO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO_ACUM=PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_JULHO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_AGOSTO_ACUM > PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_AGOSTO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO_ACUM=PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_AGOSTO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO_ACUM=PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_AGOSTO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_SETEMBRO_ACUM > PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_SETEMBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO_ACUM=PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_SETEMBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO_ACUM=PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_SETEMBRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_OUTUBRO_ACUM > PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_OUTUBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO_ACUM=PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_OUTUBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO_ACUM=PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_OUTUBRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_NOVEMBRO_ACUM > PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_NOVEMBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO_ACUM=PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_NOVEMBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO_ACUM=PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_NOVEMBRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_DEZEMBRO_ACUM > PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_DEZEMBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO_ACUM=PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_DEZEMBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO_ACUM=PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_DEZEMBRO_ACUM ; }



    var fillBetweenLinesPlugin = {
        afterDatasetsDraw: function (chart) {
            var ctx = chart.chart.ctx;
            var xaxis = chart.scales['x-axis-0'];
            var yaxis = chart.scales['y-axis-0'];
            var datasets = chart.data.datasets;
            ctx.save();

            for (var d = 0; d < datasets.length; d++) {
                var dataset = datasets[d];
                if (dataset.fillBetweenSet == undefined) {
                    continue;
                }

                // get meta for both data sets
                var meta1 = chart.getDatasetMeta(d);
                var meta2 = chart.getDatasetMeta(dataset.fillBetweenSet);

                // do not draw fill if one of the datasets is hidden
                if (meta1.hidden || meta2.hidden) continue;

                // create fill areas in pairs
                for (var p = 0; p < meta1.data.length-1;p++) {
                    // if null skip
                    if (dataset.data[p] == null || dataset.data[p+1] == null) continue;

                    ctx.beginPath();

                    // trace line 1
                    var curr = meta1.data[p];
                    var next = meta1.data[p+1];
                    ctx.moveTo(curr._view.x, curr._view.y);
                    ctx.lineTo(curr._view.x, curr._view.y);
                    if (curr._view.steppedLine === true) {
                        ctx.lineTo(next._view.x, curr._view.y);
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else if (next._view.tension === 0) {
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else {
                        ctx.bezierCurveTo(
                          curr._view.controlPointNextX,
                          curr._view.controlPointNextY,
                          next._view.controlPointPreviousX,
                          next._view.controlPointPreviousY,
                          next._view.x,
                          next._view.y
                        );
                    }

                    // connect dataset1 to dataset2
                    var curr = meta2.data[p+1];
                    var next = meta2.data[p];
                    ctx.lineTo(curr._view.x, curr._view.y);

                    // trace BACKWORDS set2 to complete the box
                    if (curr._view.steppedLine === true) {
                        ctx.lineTo(curr._view.x, next._view.y);
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else if (next._view.tension === 0) {
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else {
                        // reverse bezier
                        ctx.bezierCurveTo(
                          curr._view.controlPointPreviousX,
                          curr._view.controlPointPreviousY,
                          next._view.controlPointNextX,
                          next._view.controlPointNextY,
                          next._view.x,
                          next._view.y
                        );
                    }

                    // close the loop and fill with shading
                    ctx.closePath();
                    ctx.fillStyle = dataset.fillBetweenColor || "rgba(0,0,0,0.1)";
                    ctx.fill();
                } // end for p loop
            }
        } // end afterDatasetsDraw
    }; // end fillBetweenLinesPlugin

    Chart.pluginService.register(fillBetweenLinesPlugin);



    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_009=document.getElementById('GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_009').getContext('2d');

    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_009=new Chart(GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_009, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label:  'Peso Vigil. Segu.vsVN(ac) ' + ANO_VERSAO_REAL_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(250 , 83 , 0)',
                   //borderColor: "#F00",
                   fill: false,
                   steppedLine: false,
                   tension: 0.5,
                   fillBetweenSet: 1,
                   fillBetweenColor: "rgba(0, 221, 0, 0.1)",
                   data: [
                   PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_JANEIRO_ACUM,
                   PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_FEVEREIRO_ACUM,
                   PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_MARCO_ACUM,
                   PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_ABRIL_ACUM,
                   PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_MAIO_ACUM,
                   PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_JUNHO_ACUM,
                   PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_JULHO_ACUM,
                   PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_AGOSTO_ACUM,
                   PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_SETEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_OUTUBRO_ACUM,
                   PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_NOVEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_DEZEMBRO_ACUM,

                   ],
                   type: 'line'


               },
                {
                    label: 'Peso Vigil. Segu.vsVN(ac) ' + ANO_VERSAO_ANTE_,
                    yAxisID: 'A',
                    //backgroundColor: 'rgb(17, 121, 240)',
                    borderColor: 'rgb(0,221,0)',
                    //borderColor: "#00F",
                    fill: false,
                    steppedLine: false,
                    tension: 0.5,
                    data: [
                   PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_JANEIRO_ACUM,
                   PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_FEVEREIRO_ACUM,
                   PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_MARCO_ACUM,
                   PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_ABRIL_ACUM,
                   PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_MAIO_ACUM,
                   PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_JUNHO_ACUM,
                   PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_JULHO_ACUM,
                   PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_AGOSTO_ACUM,
                   PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_SETEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_OUTUBRO_ACUM,
                   PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_NOVEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_INDEMNIZACOES_VN_ANO_N_1_DEZEMBRO_ACUM,
                    ],
                    type: 'line'
                },
    {
        label: 'Ineficiência',
        yAxisID: 'A',
        backgroundColor: "rgba(255, 0, 0, 0.2)",
        borderColor: 'rgba(255, 255, 255, 0.1)',
        //borderColor: "#0D0",
        fill: false,
        steppedLine: false,
        tension: 0.5,
        fillBetweenSet: 1,
        fillBetweenColor: "rgba(255, 0, 0, 0.2)",
        data: [
    INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JANEIRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_FEVEREIRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MARCO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_ABRIL_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_MAIO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JUNHO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_JULHO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_AGOSTO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_SETEMBRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_OUTUBRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_NOVEMBRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_INDEMNIZACOES_ANO_N_DEZEMBRO_ACUM,
        ],
        type: 'line'
    },

            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'FSE_Vigil. Segu. COMP',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                //min:  Math.round(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_min_princ__,0),
                                                //max:  Math.round(GASTOS_PESSOAL_INDEMNIZACOES_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString()+ "%";
                                                }
                                            }
                                        },







                ]
            }
        },

    });

@*</script>*@

@*------------------------------------------------GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_010-----------------------------------------------------------*@
@*<script>*@

    if(@ViewData["MES_ACUM_REAL"]<1){ var IND_VN_ANO_N_JANEIRO = 'nd'; var IND_VN_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JANEIRO"]))); var IND_VN_ANO_N_JANEIRO_MAX_MIN = IND_VN_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var IND_VN_ANO_N_FEVEREIRO = 'nd'; var IND_VN_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_FEVEREIRO"]))); var IND_VN_ANO_N_FEVEREIRO_MAX_MIN = IND_VN_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var IND_VN_ANO_N_MARCO = 'nd'; var IND_VN_ANO_N_MARCO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_MARCO"]))); var IND_VN_ANO_N_MARCO_MAX_MIN = IND_VN_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var IND_VN_ANO_N_ABRIL = 'nd'; var IND_VN_ANO_N_ABRIL_MAX_MIN = 0;  } else { var IND_VN_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_ABRIL"]))); var IND_VN_ANO_N_ABRIL_MAX_MIN = IND_VN_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var IND_VN_ANO_N_MAIO = 'nd'; var IND_VN_ANO_N_MAIO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_MAIO"]))); var IND_VN_ANO_N_MAIO_MAX_MIN = IND_VN_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var IND_VN_ANO_N_JUNHO = 'nd'; var IND_VN_ANO_N_JUNHO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JUNHO"]))); var IND_VN_ANO_N_JUNHO_MAX_MIN = IND_VN_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var IND_VN_ANO_N_JULHO = 'nd'; var IND_VN_ANO_N_JULHO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JULHO"]))); var IND_VN_ANO_N_JULHO_MAX_MIN = IND_VN_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var IND_VN_ANO_N_AGOSTO = 'nd'; var IND_VN_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_AGOSTO"]))); var IND_VN_ANO_N_AGOSTO_MAX_MIN = IND_VN_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var IND_VN_ANO_N_SETEMBRO = 'nd'; var IND_VN_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_SETEMBRO"]))); var IND_VN_ANO_N_SETEMBRO_MAX_MIN = IND_VN_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var IND_VN_ANO_N_OUTUBRO = 'nd'; var IND_VN_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_OUTUBRO"]))); var IND_VN_ANO_N_OUTUBRO_MAX_MIN = IND_VN_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var IND_VN_ANO_N_NOVEMBRO = 'nd'; var IND_VN_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_NOVEMBRO"]))); var IND_VN_ANO_N_NOVEMBRO_MAX_MIN = IND_VN_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var IND_VN_ANO_N_DEZEMBRO = 'nd'; var IND_VN_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_DEZEMBRO"]))); var IND_VN_ANO_N_DEZEMBRO_MAX_MIN = IND_VN_ANO_N_DEZEMBRO };

    if(@ViewData["MES_ACUM_REAL"]<1){ var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO = 'nd'; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO"]))); var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO_MAX_MIN = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO = 'nd'; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO"]))); var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO_MAX_MIN = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO = 'nd'; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO"]))); var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO_MAX_MIN = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL = 'nd'; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL"]))); var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL_MAX_MIN = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO = 'nd'; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO"]))); var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO_MAX_MIN = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO = 'nd'; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO"]))); var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO_MAX_MIN = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO = 'nd'; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO"]))); var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO_MAX_MIN = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO = 'nd'; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO"]))); var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO_MAX_MIN = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO = 'nd'; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO"]))); var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO_MAX_MIN = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO = 'nd'; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO"]))); var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO_MAX_MIN = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO = 'nd'; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO"]))); var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO_MAX_MIN = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO = 'nd'; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO"]))); var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO_MAX_MIN = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO };


    var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO_ACUM = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO;
    var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO_ACUM = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO + GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO_ACUM;
    var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO_ACUM = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO + GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO_ACUM;
    var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL_ACUM = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL + GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO_ACUM;
    var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO_ACUM = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO + GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL_ACUM;
    var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO_ACUM = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO + GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO_ACUM;
    var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO_ACUM = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO + GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO_ACUM;
    var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO_ACUM = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO + GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO_ACUM;
    var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO_ACUM = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO + GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO_ACUM;
    var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO_ACUM = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO + GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO_ACUM;
    var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO_ACUM = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO + GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO_ACUM;
    var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO_ACUM = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO + GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO_ACUM;




    if(@ViewData["MES_ACUM_REAL"]<1){ var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO_ACUM = 'nd'; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO_ACUM; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO_ACUM_MAX_MIN = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO_ACUM = 'nd'; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO_ACUM; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO_ACUM_MAX_MIN = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO_ACUM = 'nd'; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO_ACUM; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO_ACUM_MAX_MIN = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL_ACUM = 'nd'; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL_ACUM; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL_ACUM_MAX_MIN = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO_ACUM = 'nd'; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO_ACUM; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO_ACUM_MAX_MIN = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO_ACUM = 'nd'; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO_ACUM; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO_ACUM_MAX_MIN = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO_ACUM = 'nd'; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO_ACUM; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO_ACUM_MAX_MIN = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO_ACUM = 'nd'; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO_ACUM; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO_ACUM_MAX_MIN = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO_ACUM = 'nd'; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO_ACUM; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO_ACUM = 'nd'; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO_ACUM; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO_ACUM = 'nd'; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO_ACUM; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO_ACUM = 'nd'; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO_ACUM; var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO_ACUM };




    var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JANEIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JANEIRO"])));
    var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_FEVEREIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_FEVEREIRO"]))) + GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JANEIRO_ACUM;
    var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_MARCO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_MARCO"]))) + GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_FEVEREIRO_ACUM;
    var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_ABRIL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_ABRIL"]))) + GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_MARCO_ACUM;
    var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_MAIO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_MAIO"]))) + GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_ABRIL_ACUM;
    var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JUNHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JUNHO"]))) + GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_MAIO_ACUM;
    var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JULHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JULHO"]))) + GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JUNHO_ACUM;
    var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_AGOSTO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_AGOSTO"]))) + GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JULHO_ACUM;
    var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_SETEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_SETEMBRO"]))) + GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_AGOSTO_ACUM;
    var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_OUTUBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_OUTUBRO"]))) + GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_SETEMBRO_ACUM;
    var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_NOVEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_NOVEMBRO"]))) + GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_OUTUBRO_ACUM;
    var GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_DEZEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_DEZEMBRO"]))) + GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_NOVEMBRO_ACUM;


    var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ= Math.max(
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO_ACUM_MAX_MIN,

                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JANEIRO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_MARCO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_ABRIL_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_MAIO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JUNHO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JULHO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_AGOSTO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_DEZEMBRO_ACUM
                             );
    var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ= Math.min(

                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO_ACUM_MAX_MIN,

                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JANEIRO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_MARCO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_ABRIL_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_MAIO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JUNHO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JULHO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_AGOSTO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_DEZEMBRO_ACUM
                           );
    var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon= Math.max(
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO_MAX_MIN ,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO_MAX_MIN ,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO_MAX_MIN ,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL_MAX_MIN ,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO_MAX_MIN ,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO_MAX_MIN ,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO_MAX_MIN ,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO_MAX_MIN ,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO_MAX_MIN ,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO_MAX_MIN ,



                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_DEZEMBRO"])))

                            );
    var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon= Math.min(
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO_MAX_MIN ,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO_MAX_MIN ,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO_MAX_MIN ,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL_MAX_MIN ,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO_MAX_MIN ,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO_MAX_MIN ,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO_MAX_MIN ,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO_MAX_MIN ,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO_MAX_MIN ,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO_MAX_MIN ,


                           @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_DEZEMBRO"])))

                          );

    //NOTA TA: Aqui trato o minimo e o maximo do eixo principal
    if(Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ)>=Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ))
    {
        var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ_=(Math.ceil(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ),0).toString().length-1);
        var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ_= (Math.floor(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ),0).toString().length-1);
        //alert(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ_);
        //alert(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ_);
    }
    else
    {
        var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ_=(Math.ceil(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ),0).toString().length-1);
        var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ_= (Math.floor(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ),0).toString().length-1);}

    //NOTA TA: Aqui trato o minimo e o maximo do eixo secundario

    if(Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon)>=Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon))
    {
        var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon_=(Math.ceil(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon),0).toString().length-1);
        var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon_= (Math.floor(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon),0).toString().length-1);
        //alert(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon_);
        //alert(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon_);
    }
    else
    {
        var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon_=(Math.ceil(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon),0).toString().length-1);
        var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon_= (Math.floor(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon),0).toString().length-1);}


    if(Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ)/Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ)>=Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon)/Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon))
    { if(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ > 0 && GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ <0 ){ var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon__=(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ_*GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon_)/GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ_;} else { var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon__=GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon_;}
        if(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon > 0 && GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon <0 ){ var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ__=(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon__*GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ_)/GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon_;} else { var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ__=GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ_;}}
    else
    {if(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon > 0 && GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon <0 ){ var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ__=(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon_*GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ_)/GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon_;} else { var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ__=GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ_;}
        if(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ > 0 && GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ <0 ){ var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon__=(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ__*GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon_)/GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ_;} else { var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon__=GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon_;}
    }



    if(Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ)/Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ)>=Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon)/Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon))
    { if(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ > 0 && GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ <0 ){ var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon__=(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ_*GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon_)/GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ_;} else { var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon__=GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon_;}
        if(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon > 0 && GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon <0 ){ var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ__=(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon__*GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ_)/GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon_;} else { var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ__=GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ_;}}
    else
    {if(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon > 0 && GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon <0 ){ var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ__=(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon_*GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ_)/GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon_;} else { var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ__=GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ_;}
        if(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ > 0 && GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ <0 ){ var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon__=(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ__*GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon_)/GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ_;} else { var GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon__=GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon_;}
    }



    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_010=document.getElementById('GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_010').getContext('2d');

    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_010=new Chart(GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_010, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'Encargos s/ Remunerações(ac) ' + ANO_VERSAO_REAL_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(250 , 83 , 0)',
                   data: [
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO_ACUM,
                   ],
                   type: 'line'


               },
                              {
                                  label: 'Encargos s/ Remunerações(ac) ' + ANO_VERSAO_ANTE_,
                                  yAxisID: 'A',
                                  //backgroundColor: 'rgb(201, 10, 10)',
                                  borderColor: 'rgb(0,221,0)',
                                  data: [
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JANEIRO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_MARCO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_ABRIL_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_MAIO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JUNHO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JULHO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_AGOSTO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_DEZEMBRO_ACUM,
                                  ],
                                  type: 'line'


                              },
                {
                    label:  'Encargos s/ Remunerações(m) ' + ANO_VERSAO_REAL_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(250 , 83 , 0, 0.5)',
                    borderColor: 'rgba(250 , 83 , 0, 0.5)',
                    data: [
                  GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO ,
                  GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO ,
                  GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO ,
                  GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL,
                  GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO ,
                  GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO ,
                  GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO ,
                  GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO ,
                  GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO ,
                  GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO ,
                  GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO ,
                  GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO ,
                    ],
                },
                {
                    label:  'Encargos s/ Remunerações(m) ' + ANO_VERSAO_ANTE_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(0,221,0, 0.4)',
                    borderColor: 'rgba(0,221,0, 0.4)',
                    data: [
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JANEIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_FEVEREIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_MARCO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_ABRIL"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_MAIO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JUNHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JULHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_AGOSTO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_SETEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_OUTUBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_NOVEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_DEZEMBRO"]))),
                    ],
                },


            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'GASTOS_PESSOAL_ENC_SEG_SOC_MENSAL_1',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                min:  Math.round(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ__,0),
                                                max:  Math.round(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString();
                                                }
                                            }
                                        },

                    { id: 'B',
                        type: 'linear',
                        position: 'right',
                        ticks: {
                            min: Math.round(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_secon__,0),
                            max:  Math.round(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_secon__,0),
                            beginAtZero: false,
                            callback: function(value, index, values) {
                                return value.toLocaleString();
                            }
                        }
                    },






                ]
            }
        },

    });

@*</script>*@

@*------------------------------------------------GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_011-----------------------------------------------------------*@
@*<script>*@

    var IND_VN_ANO_N_JANEIRO_ACUM = IND_VN_ANO_N_JANEIRO;
    var IND_VN_ANO_N_FEVEREIRO_ACUM = IND_VN_ANO_N_FEVEREIRO + IND_VN_ANO_N_JANEIRO_ACUM;
    var IND_VN_ANO_N_MARCO_ACUM = IND_VN_ANO_N_MARCO + IND_VN_ANO_N_FEVEREIRO_ACUM;
    var IND_VN_ANO_N_ABRIL_ACUM = IND_VN_ANO_N_ABRIL + IND_VN_ANO_N_MARCO_ACUM;
    var IND_VN_ANO_N_MAIO_ACUM = IND_VN_ANO_N_MAIO + IND_VN_ANO_N_ABRIL_ACUM;
    var IND_VN_ANO_N_JUNHO_ACUM = IND_VN_ANO_N_JUNHO + IND_VN_ANO_N_MAIO_ACUM;
    var IND_VN_ANO_N_JULHO_ACUM = IND_VN_ANO_N_JULHO + IND_VN_ANO_N_JUNHO_ACUM;
    var IND_VN_ANO_N_AGOSTO_ACUM = IND_VN_ANO_N_AGOSTO + IND_VN_ANO_N_JULHO_ACUM;
    var IND_VN_ANO_N_SETEMBRO_ACUM = IND_VN_ANO_N_SETEMBRO + IND_VN_ANO_N_AGOSTO_ACUM;
    var IND_VN_ANO_N_OUTUBRO_ACUM = IND_VN_ANO_N_OUTUBRO + IND_VN_ANO_N_SETEMBRO_ACUM;
    var IND_VN_ANO_N_NOVEMBRO_ACUM = IND_VN_ANO_N_NOVEMBRO + IND_VN_ANO_N_OUTUBRO_ACUM;
    var IND_VN_ANO_N_DEZEMBRO_ACUM = IND_VN_ANO_N_DEZEMBRO + IND_VN_ANO_N_NOVEMBRO_ACUM;



    var IND_VN_ANO_N_1_JANEIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JANEIRO"])));
    var IND_VN_ANO_N_1_FEVEREIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_FEVEREIRO"]))) + IND_VN_ANO_N_1_JANEIRO_ACUM;
    var IND_VN_ANO_N_1_MARCO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_MARCO"]))) + IND_VN_ANO_N_1_FEVEREIRO_ACUM;
    var IND_VN_ANO_N_1_ABRIL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_ABRIL"]))) + IND_VN_ANO_N_1_MARCO_ACUM;
    var IND_VN_ANO_N_1_MAIO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_MAIO"]))) + IND_VN_ANO_N_1_ABRIL_ACUM;
    var IND_VN_ANO_N_1_JUNHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JUNHO"]))) + IND_VN_ANO_N_1_MAIO_ACUM;
    var IND_VN_ANO_N_1_JULHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JULHO"]))) + IND_VN_ANO_N_1_JUNHO_ACUM;
    var IND_VN_ANO_N_1_AGOSTO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_AGOSTO"]))) + IND_VN_ANO_N_1_JULHO_ACUM;
    var IND_VN_ANO_N_1_SETEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_SETEMBRO"]))) + IND_VN_ANO_N_1_AGOSTO_ACUM;
    var IND_VN_ANO_N_1_OUTUBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_OUTUBRO"]))) + IND_VN_ANO_N_1_SETEMBRO_ACUM;
    var IND_VN_ANO_N_1_NOVEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_NOVEMBRO"]))) + IND_VN_ANO_N_1_OUTUBRO_ACUM;
    var IND_VN_ANO_N_1_DEZEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_DEZEMBRO"]))) + IND_VN_ANO_N_1_NOVEMBRO_ACUM;




    if(@ViewData["MES_ACUM_REAL"]<1){ var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_JANEIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_JANEIRO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO_ACUM/IND_VN_ANO_N_JANEIRO_ACUM*100; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_FEVEREIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_FEVEREIRO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO_ACUM/IND_VN_ANO_N_FEVEREIRO_ACUM*100; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_MARCO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_MARCO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO_ACUM/IND_VN_ANO_N_MARCO_ACUM*100; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_MARCO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_ABRIL_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_ABRIL_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL_ACUM/IND_VN_ANO_N_ABRIL_ACUM*100; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_ABRIL_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_MAIO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_MAIO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO_ACUM/IND_VN_ANO_N_MAIO_ACUM*100; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_MAIO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_JUNHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_JUNHO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO_ACUM/IND_VN_ANO_N_JUNHO_ACUM*100; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_JUNHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_JULHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_JULHO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO_ACUM/IND_VN_ANO_N_JULHO_ACUM*100; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_JULHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_AGOSTO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_AGOSTO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO_ACUM/IND_VN_ANO_N_AGOSTO_ACUM*100; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_SETEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_SETEMBRO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO_ACUM/IND_VN_ANO_N_SETEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_OUTUBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_OUTUBRO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO_ACUM/IND_VN_ANO_N_OUTUBRO_ACUM*100; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_NOVEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_NOVEMBRO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO_ACUM/IND_VN_ANO_N_NOVEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_DEZEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_DEZEMBRO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO_ACUM/IND_VN_ANO_N_DEZEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_DEZEMBRO_ACUM };



    if(@ViewData["MES_ACUM_REAL"]<1){ var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_JANEIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_JANEIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_JANEIRO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JANEIRO_ACUM/IND_VN_ANO_N_1_JANEIRO_ACUM*100; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_JANEIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_FEVEREIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_FEVEREIRO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_FEVEREIRO_ACUM/IND_VN_ANO_N_1_FEVEREIRO_ACUM*100; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_FEVEREIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_MARCO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_MARCO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_MARCO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_MARCO_ACUM/IND_VN_ANO_N_1_MARCO_ACUM*100; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_MARCO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_ABRIL_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_ABRIL_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_ABRIL_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_ABRIL_ACUM/IND_VN_ANO_N_1_ABRIL_ACUM*100; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_ABRIL_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_MAIO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_MAIO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_MAIO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_MAIO_ACUM/IND_VN_ANO_N_1_MAIO_ACUM*100; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_MAIO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_JUNHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_JUNHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_JUNHO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JUNHO_ACUM/IND_VN_ANO_N_1_JUNHO_ACUM*100; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_JUNHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_JULHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_JULHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_JULHO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JULHO_ACUM/IND_VN_ANO_N_1_JULHO_ACUM*100; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_JULHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_AGOSTO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_AGOSTO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_AGOSTO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_AGOSTO_ACUM/IND_VN_ANO_N_1_AGOSTO_ACUM*100; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_AGOSTO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_SETEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_SETEMBRO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_SETEMBRO_ACUM/IND_VN_ANO_N_1_SETEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_SETEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_OUTUBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_OUTUBRO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_OUTUBRO_ACUM/IND_VN_ANO_N_1_OUTUBRO_ACUM*100; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_OUTUBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_NOVEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_NOVEMBRO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_NOVEMBRO_ACUM/IND_VN_ANO_N_1_NOVEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_NOVEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_DEZEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_DEZEMBRO_ACUM= GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_DEZEMBRO_ACUM/IND_VN_ANO_N_1_DEZEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_DEZEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_DEZEMBRO_ACUM };



    if(@ViewData["MES_ACUM_REAL"]<1){ var VAR_VN_ANO_N_JANEIRO_ACUM = 'nd'; var VAR_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JANEIRO_ACUM= ((IND_VN_ANO_N_JANEIRO_ACUM-IND_VN_ANO_N_1_JANEIRO_ACUM)/Math.abs(IND_VN_ANO_N_1_JANEIRO_ACUM))*100; var VAR_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = VAR_VN_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var VAR_VN_ANO_N_FEVEREIRO_ACUM = 'nd'; var VAR_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_FEVEREIRO_ACUM= ((IND_VN_ANO_N_FEVEREIRO_ACUM-IND_VN_ANO_N_1_FEVEREIRO_ACUM)/Math.abs(IND_VN_ANO_N_1_FEVEREIRO_ACUM))*100; var VAR_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = VAR_VN_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var VAR_VN_ANO_N_MARCO_ACUM = 'nd'; var VAR_VN_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_MARCO_ACUM= ((IND_VN_ANO_N_MARCO_ACUM-IND_VN_ANO_N_1_MARCO_ACUM)/Math.abs(IND_VN_ANO_N_1_MARCO_ACUM))*100; var VAR_VN_ANO_N_MARCO_ACUM_MAX_MIN = VAR_VN_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var VAR_VN_ANO_N_ABRIL_ACUM = 'nd'; var VAR_VN_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_ABRIL_ACUM= ((IND_VN_ANO_N_ABRIL_ACUM-IND_VN_ANO_N_1_ABRIL_ACUM)/Math.abs(IND_VN_ANO_N_1_ABRIL_ACUM))*100; var VAR_VN_ANO_N_ABRIL_ACUM_MAX_MIN = VAR_VN_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var VAR_VN_ANO_N_MAIO_ACUM = 'nd'; var VAR_VN_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_MAIO_ACUM= ((IND_VN_ANO_N_MAIO_ACUM-IND_VN_ANO_N_1_MAIO_ACUM)/Math.abs(IND_VN_ANO_N_1_MAIO_ACUM))*100; var VAR_VN_ANO_N_MAIO_ACUM_MAX_MIN = VAR_VN_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var VAR_VN_ANO_N_JUNHO_ACUM = 'nd'; var VAR_VN_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JUNHO_ACUM= ((IND_VN_ANO_N_JUNHO_ACUM-IND_VN_ANO_N_1_JUNHO_ACUM)/Math.abs(IND_VN_ANO_N_1_JUNHO_ACUM))*100; var VAR_VN_ANO_N_JUNHO_ACUM_MAX_MIN = VAR_VN_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var VAR_VN_ANO_N_JULHO_ACUM = 'nd'; var VAR_VN_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JULHO_ACUM= ((IND_VN_ANO_N_JULHO_ACUM-IND_VN_ANO_N_1_JULHO_ACUM)/Math.abs(IND_VN_ANO_N_1_JULHO_ACUM))*100; var VAR_VN_ANO_N_JULHO_ACUM_MAX_MIN = VAR_VN_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var VAR_VN_ANO_N_AGOSTO_ACUM = 'nd'; var VAR_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_AGOSTO_ACUM= ((IND_VN_ANO_N_AGOSTO_ACUM-IND_VN_ANO_N_1_AGOSTO_ACUM)/Math.abs(IND_VN_ANO_N_1_AGOSTO_ACUM))*100; var VAR_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = VAR_VN_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var VAR_VN_ANO_N_SETEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_SETEMBRO_ACUM= ((IND_VN_ANO_N_SETEMBRO_ACUM-IND_VN_ANO_N_1_SETEMBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_SETEMBRO_ACUM))*100; var VAR_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var VAR_VN_ANO_N_OUTUBRO_ACUM = 'nd'; var VAR_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_OUTUBRO_ACUM= ((IND_VN_ANO_N_OUTUBRO_ACUM-IND_VN_ANO_N_1_OUTUBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_OUTUBRO_ACUM))*100; var VAR_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var VAR_VN_ANO_N_NOVEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_NOVEMBRO_ACUM= ((IND_VN_ANO_N_NOVEMBRO_ACUM-IND_VN_ANO_N_1_NOVEMBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_NOVEMBRO_ACUM))*100; var VAR_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var VAR_VN_ANO_N_DEZEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_DEZEMBRO_ACUM= ((IND_VN_ANO_N_DEZEMBRO_ACUM-IND_VN_ANO_N_1_DEZEMBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_DEZEMBRO_ACUM))*100; var VAR_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_DEZEMBRO_ACUM };



    if(@ViewData["MES_ACUM_REAL"]<1){ var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO_ACUM= ((GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO_ACUM-GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JANEIRO_ACUM)/Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JANEIRO_ACUM))*100; var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO_ACUM= ((GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO_ACUM-GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_FEVEREIRO_ACUM)/Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_FEVEREIRO_ACUM))*100; var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO_ACUM= ((GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO_ACUM-GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_MARCO_ACUM)/Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_MARCO_ACUM))*100; var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL_ACUM= ((GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL_ACUM-GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_ABRIL_ACUM)/Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_ABRIL_ACUM))*100; var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO_ACUM= ((GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO_ACUM-GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_MAIO_ACUM)/Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_MAIO_ACUM))*100; var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO_ACUM= ((GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO_ACUM-GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JUNHO_ACUM)/Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JUNHO_ACUM))*100; var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO_ACUM= ((GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO_ACUM-GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JULHO_ACUM)/Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_JULHO_ACUM))*100; var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO_ACUM= ((GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO_ACUM-GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_AGOSTO_ACUM)/Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_AGOSTO_ACUM))*100; var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO_ACUM= ((GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO_ACUM-GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_SETEMBRO_ACUM)/Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_SETEMBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO_ACUM= ((GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO_ACUM-GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_OUTUBRO_ACUM)/Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_OUTUBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO_ACUM= ((GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO_ACUM-GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_NOVEMBRO_ACUM)/Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_NOVEMBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO_ACUM= ((GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO_ACUM-GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_DEZEMBRO_ACUM)/Math.abs(GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_1_DEZEMBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO_ACUM };

    if( PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_JANEIRO_ACUM > PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_JANEIRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO_ACUM=PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_JANEIRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO_ACUM=PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_JANEIRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_FEVEREIRO_ACUM > PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_FEVEREIRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO_ACUM=PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_FEVEREIRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO_ACUM=PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_FEVEREIRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_MARCO_ACUM > PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_MARCO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO_ACUM=PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_MARCO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO_ACUM=PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_MARCO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_ABRIL_ACUM > PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_ABRIL_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL_ACUM=PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_ABRIL_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL_ACUM=PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_ABRIL_ACUM ; }
    if( PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_MAIO_ACUM > PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_MAIO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO_ACUM=PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_MAIO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO_ACUM=PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_MAIO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_JUNHO_ACUM > PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_JUNHO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO_ACUM=PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_JUNHO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO_ACUM=PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_JUNHO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_JULHO_ACUM > PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_JULHO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO_ACUM=PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_JULHO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO_ACUM=PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_JULHO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_AGOSTO_ACUM > PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_AGOSTO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO_ACUM=PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_AGOSTO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO_ACUM=PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_AGOSTO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_SETEMBRO_ACUM > PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_SETEMBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO_ACUM=PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_SETEMBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO_ACUM=PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_SETEMBRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_OUTUBRO_ACUM > PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_OUTUBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO_ACUM=PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_OUTUBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO_ACUM=PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_OUTUBRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_NOVEMBRO_ACUM > PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_NOVEMBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO_ACUM=PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_NOVEMBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO_ACUM=PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_NOVEMBRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_DEZEMBRO_ACUM > PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_DEZEMBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO_ACUM=PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_DEZEMBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO_ACUM=PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_DEZEMBRO_ACUM ; }



    var fillBetweenLinesPlugin = {
        afterDatasetsDraw: function (chart) {
            var ctx = chart.chart.ctx;
            var xaxis = chart.scales['x-axis-0'];
            var yaxis = chart.scales['y-axis-0'];
            var datasets = chart.data.datasets;
            ctx.save();

            for (var d = 0; d < datasets.length; d++) {
                var dataset = datasets[d];
                if (dataset.fillBetweenSet == undefined) {
                    continue;
                }

                // get meta for both data sets
                var meta1 = chart.getDatasetMeta(d);
                var meta2 = chart.getDatasetMeta(dataset.fillBetweenSet);

                // do not draw fill if one of the datasets is hidden
                if (meta1.hidden || meta2.hidden) continue;

                // create fill areas in pairs
                for (var p = 0; p < meta1.data.length-1;p++) {
                    // if null skip
                    if (dataset.data[p] == null || dataset.data[p+1] == null) continue;

                    ctx.beginPath();

                    // trace line 1
                    var curr = meta1.data[p];
                    var next = meta1.data[p+1];
                    ctx.moveTo(curr._view.x, curr._view.y);
                    ctx.lineTo(curr._view.x, curr._view.y);
                    if (curr._view.steppedLine === true) {
                        ctx.lineTo(next._view.x, curr._view.y);
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else if (next._view.tension === 0) {
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else {
                        ctx.bezierCurveTo(
                          curr._view.controlPointNextX,
                          curr._view.controlPointNextY,
                          next._view.controlPointPreviousX,
                          next._view.controlPointPreviousY,
                          next._view.x,
                          next._view.y
                        );
                    }

                    // connect dataset1 to dataset2
                    var curr = meta2.data[p+1];
                    var next = meta2.data[p];
                    ctx.lineTo(curr._view.x, curr._view.y);

                    // trace BACKWORDS set2 to complete the box
                    if (curr._view.steppedLine === true) {
                        ctx.lineTo(curr._view.x, next._view.y);
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else if (next._view.tension === 0) {
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else {
                        // reverse bezier
                        ctx.bezierCurveTo(
                          curr._view.controlPointPreviousX,
                          curr._view.controlPointPreviousY,
                          next._view.controlPointNextX,
                          next._view.controlPointNextY,
                          next._view.x,
                          next._view.y
                        );
                    }

                    // close the loop and fill with shading
                    ctx.closePath();
                    ctx.fillStyle = dataset.fillBetweenColor || "rgba(0,0,0,0.1)";
                    ctx.fill();
                } // end for p loop
            }
        } // end afterDatasetsDraw
    }; // end fillBetweenLinesPlugin

    Chart.pluginService.register(fillBetweenLinesPlugin);



    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_011=document.getElementById('GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_011').getContext('2d');

    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_011=new Chart(GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_011, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label:  'Peso Encargos s/ RemuneraçõesvsVN(ac) ' + ANO_VERSAO_REAL_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(250 , 83 , 0)',
                   //borderColor: "#F00",
                   fill: false,
                   steppedLine: false,
                   tension: 0.5,
                   fillBetweenSet: 1,
                   fillBetweenColor: "rgba(0, 221, 0, 0.1)",
                   data: [
                   PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_JANEIRO_ACUM,
                   PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_FEVEREIRO_ACUM,
                   PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_MARCO_ACUM,
                   PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_ABRIL_ACUM,
                   PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_MAIO_ACUM,
                   PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_JUNHO_ACUM,
                   PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_JULHO_ACUM,
                   PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_AGOSTO_ACUM,
                   PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_SETEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_OUTUBRO_ACUM,
                   PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_NOVEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_DEZEMBRO_ACUM,

                   ],
                   type: 'line'


               },
                {
                    label: 'Peso Encargos s/ RemuneraçõesvsVN(ac) ' + ANO_VERSAO_ANTE_,
                    yAxisID: 'A',
                    //backgroundColor: 'rgb(17, 121, 240)',
                    borderColor: 'rgb(0,221,0)',
                    //borderColor: "#00F",
                    fill: false,
                    steppedLine: false,
                    tension: 0.5,
                    data: [
                   PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_JANEIRO_ACUM,
                   PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_FEVEREIRO_ACUM,
                   PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_MARCO_ACUM,
                   PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_ABRIL_ACUM,
                   PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_MAIO_ACUM,
                   PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_JUNHO_ACUM,
                   PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_JULHO_ACUM,
                   PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_AGOSTO_ACUM,
                   PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_SETEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_OUTUBRO_ACUM,
                   PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_NOVEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_ENC_SEG_SOC_VN_ANO_N_1_DEZEMBRO_ACUM,
                    ],
                    type: 'line'
                },
    {
        label: 'Ineficiência',
        yAxisID: 'A',
        backgroundColor: "rgba(255, 0, 0, 0.2)",
        borderColor: 'rgba(255, 255, 255, 0.1)',
        //borderColor: "#0D0",
        fill: false,
        steppedLine: false,
        tension: 0.5,
        fillBetweenSet: 1,
        fillBetweenColor: "rgba(255, 0, 0, 0.2)",
        data: [
    INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JANEIRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_FEVEREIRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MARCO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_ABRIL_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_MAIO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JUNHO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_JULHO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_AGOSTO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_SETEMBRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_OUTUBRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_NOVEMBRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_ENC_SEG_SOC_ANO_N_DEZEMBRO_ACUM,
        ],
        type: 'line'
    },

            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'FSE_Encargos s/ Remunerações COMP',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                //min:  Math.round(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_min_princ__,0),
                                                //max:  Math.round(GASTOS_PESSOAL_ENC_SEG_SOC_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString()+ "%";
                                                }
                                            }
                                        },







                ]
            }
        },

    });

@*</script>*@

@*------------------------------------------------GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_012-----------------------------------------------------------*@
@*<script>*@

    if(@ViewData["MES_ACUM_REAL"]<1){ var IND_VN_ANO_N_JANEIRO = 'nd'; var IND_VN_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JANEIRO"]))); var IND_VN_ANO_N_JANEIRO_MAX_MIN = IND_VN_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var IND_VN_ANO_N_FEVEREIRO = 'nd'; var IND_VN_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_FEVEREIRO"]))); var IND_VN_ANO_N_FEVEREIRO_MAX_MIN = IND_VN_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var IND_VN_ANO_N_MARCO = 'nd'; var IND_VN_ANO_N_MARCO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_MARCO"]))); var IND_VN_ANO_N_MARCO_MAX_MIN = IND_VN_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var IND_VN_ANO_N_ABRIL = 'nd'; var IND_VN_ANO_N_ABRIL_MAX_MIN = 0;  } else { var IND_VN_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_ABRIL"]))); var IND_VN_ANO_N_ABRIL_MAX_MIN = IND_VN_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var IND_VN_ANO_N_MAIO = 'nd'; var IND_VN_ANO_N_MAIO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_MAIO"]))); var IND_VN_ANO_N_MAIO_MAX_MIN = IND_VN_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var IND_VN_ANO_N_JUNHO = 'nd'; var IND_VN_ANO_N_JUNHO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JUNHO"]))); var IND_VN_ANO_N_JUNHO_MAX_MIN = IND_VN_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var IND_VN_ANO_N_JULHO = 'nd'; var IND_VN_ANO_N_JULHO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JULHO"]))); var IND_VN_ANO_N_JULHO_MAX_MIN = IND_VN_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var IND_VN_ANO_N_AGOSTO = 'nd'; var IND_VN_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_AGOSTO"]))); var IND_VN_ANO_N_AGOSTO_MAX_MIN = IND_VN_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var IND_VN_ANO_N_SETEMBRO = 'nd'; var IND_VN_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_SETEMBRO"]))); var IND_VN_ANO_N_SETEMBRO_MAX_MIN = IND_VN_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var IND_VN_ANO_N_OUTUBRO = 'nd'; var IND_VN_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_OUTUBRO"]))); var IND_VN_ANO_N_OUTUBRO_MAX_MIN = IND_VN_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var IND_VN_ANO_N_NOVEMBRO = 'nd'; var IND_VN_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_NOVEMBRO"]))); var IND_VN_ANO_N_NOVEMBRO_MAX_MIN = IND_VN_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var IND_VN_ANO_N_DEZEMBRO = 'nd'; var IND_VN_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_DEZEMBRO"]))); var IND_VN_ANO_N_DEZEMBRO_MAX_MIN = IND_VN_ANO_N_DEZEMBRO };

    if(@ViewData["MES_ACUM_REAL"]<1){ var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO = 'nd'; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO"]))); var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO_MAX_MIN = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO = 'nd'; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO"]))); var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO_MAX_MIN = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO = 'nd'; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO"]))); var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO_MAX_MIN = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL = 'nd'; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL"]))); var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL_MAX_MIN = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO = 'nd'; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO"]))); var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO_MAX_MIN = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO = 'nd'; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO"]))); var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO_MAX_MIN = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO = 'nd'; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO"]))); var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO_MAX_MIN = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO = 'nd'; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO"]))); var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO_MAX_MIN = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO = 'nd'; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO"]))); var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO_MAX_MIN = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO = 'nd'; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO"]))); var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO_MAX_MIN = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO = 'nd'; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO"]))); var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO_MAX_MIN = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO = 'nd'; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO"]))); var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO_MAX_MIN = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO };


    var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO_ACUM = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO;
    var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO_ACUM = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO + GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO_ACUM;
    var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO_ACUM = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO + GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO_ACUM;
    var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL_ACUM = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL + GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO_ACUM;
    var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO_ACUM = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO + GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL_ACUM;
    var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO_ACUM = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO + GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO_ACUM;
    var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO_ACUM = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO + GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO_ACUM;
    var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO_ACUM = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO + GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO_ACUM;
    var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO_ACUM = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO + GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO_ACUM;
    var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO_ACUM = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO + GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO_ACUM;
    var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO_ACUM = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO + GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO_ACUM;
    var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO_ACUM = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO + GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO_ACUM;




    if(@ViewData["MES_ACUM_REAL"]<1){ var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO_ACUM = 'nd'; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO_ACUM; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO_ACUM_MAX_MIN = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO_ACUM = 'nd'; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO_ACUM; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO_ACUM_MAX_MIN = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO_ACUM = 'nd'; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO_ACUM; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO_ACUM_MAX_MIN = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL_ACUM = 'nd'; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL_ACUM; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL_ACUM_MAX_MIN = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO_ACUM = 'nd'; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO_ACUM; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO_ACUM_MAX_MIN = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO_ACUM = 'nd'; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO_ACUM; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO_ACUM_MAX_MIN = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO_ACUM = 'nd'; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO_ACUM; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO_ACUM_MAX_MIN = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO_ACUM = 'nd'; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO_ACUM; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO_ACUM_MAX_MIN = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO_ACUM = 'nd'; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO_ACUM; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO_ACUM = 'nd'; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO_ACUM; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO_ACUM = 'nd'; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO_ACUM; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO_ACUM = 'nd'; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO_ACUM; var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO_ACUM };




    var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JANEIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JANEIRO"])));
    var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_FEVEREIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_FEVEREIRO"]))) + GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JANEIRO_ACUM;
    var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_MARCO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_MARCO"]))) + GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_FEVEREIRO_ACUM;
    var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_ABRIL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_ABRIL"]))) + GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_MARCO_ACUM;
    var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_MAIO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_MAIO"]))) + GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_ABRIL_ACUM;
    var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JUNHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JUNHO"]))) + GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_MAIO_ACUM;
    var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JULHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JULHO"]))) + GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JUNHO_ACUM;
    var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_AGOSTO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_AGOSTO"]))) + GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JULHO_ACUM;
    var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_SETEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_SETEMBRO"]))) + GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_AGOSTO_ACUM;
    var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_OUTUBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_OUTUBRO"]))) + GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_SETEMBRO_ACUM;
    var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_NOVEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_NOVEMBRO"]))) + GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_OUTUBRO_ACUM;
    var GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_DEZEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_DEZEMBRO"]))) + GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_NOVEMBRO_ACUM;


    var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ= Math.max(
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO_ACUM_MAX_MIN,

                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JANEIRO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_MARCO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_ABRIL_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_MAIO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JUNHO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JULHO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_AGOSTO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_DEZEMBRO_ACUM
                             );
    var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ= Math.min(

                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO_ACUM_MAX_MIN,

                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JANEIRO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_MARCO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_ABRIL_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_MAIO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JUNHO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JULHO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_AGOSTO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_DEZEMBRO_ACUM
                           );
    var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon= Math.max(
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO_MAX_MIN ,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO_MAX_MIN ,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO_MAX_MIN ,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL_MAX_MIN ,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO_MAX_MIN ,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO_MAX_MIN ,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO_MAX_MIN ,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO_MAX_MIN ,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO_MAX_MIN ,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO_MAX_MIN ,



                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_DEZEMBRO"])))

                            );
    var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon= Math.min(
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO_MAX_MIN ,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO_MAX_MIN ,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO_MAX_MIN ,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL_MAX_MIN ,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO_MAX_MIN ,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO_MAX_MIN ,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO_MAX_MIN ,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO_MAX_MIN ,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO_MAX_MIN ,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO_MAX_MIN ,


                           @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_DEZEMBRO"])))

                          );

    //NOTA TA: Aqui trato o minimo e o maximo do eixo principal
    if(Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ)>=Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ))
    {
        var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ_=(Math.ceil(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ),0).toString().length-1);
        var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ_= (Math.floor(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ),0).toString().length-1);
        //alert(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ_);
        //alert(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ_);
    }
    else
    {
        var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ_=(Math.ceil(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ),0).toString().length-1);
        var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ_= (Math.floor(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ),0).toString().length-1);}

    //NOTA TA: Aqui trato o minimo e o maximo do eixo secundario

    if(Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon)>=Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon))
    {
        var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon_=(Math.ceil(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon),0).toString().length-1);
        var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon_= (Math.floor(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon),0).toString().length-1);
        //alert(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon_);
        //alert(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon_);
    }
    else
    {
        var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon_=(Math.ceil(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon),0).toString().length-1);
        var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon_= (Math.floor(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon),0).toString().length-1);}


    if(Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ)/Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ)>=Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon)/Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon))
    { if(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ > 0 && GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ <0 ){ var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon__=(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ_*GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon_)/GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ_;} else { var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon__=GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon_;}
        if(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon > 0 && GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon <0 ){ var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ__=(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon__*GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ_)/GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon_;} else { var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ__=GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ_;}}
    else
    {if(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon > 0 && GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon <0 ){ var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ__=(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon_*GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ_)/GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon_;} else { var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ__=GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ_;}
        if(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ > 0 && GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ <0 ){ var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon__=(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ__*GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon_)/GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ_;} else { var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon__=GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon_;}
    }



    if(Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ)/Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ)>=Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon)/Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon))
    { if(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ > 0 && GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ <0 ){ var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon__=(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ_*GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon_)/GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ_;} else { var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon__=GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon_;}
        if(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon > 0 && GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon <0 ){ var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ__=(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon__*GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ_)/GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon_;} else { var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ__=GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ_;}}
    else
    {if(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon > 0 && GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon <0 ){ var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ__=(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon_*GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ_)/GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon_;} else { var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ__=GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ_;}
        if(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ > 0 && GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ <0 ){ var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon__=(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ__*GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon_)/GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ_;} else { var GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon__=GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon_;}
    }



    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_012=document.getElementById('GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_012').getContext('2d');

    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_012=new Chart(GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_012, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'Comissões(ac) ' + ANO_VERSAO_REAL_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(250 , 83 , 0)',
                   data: [
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO_ACUM,
                   ],
                   type: 'line'


               },
                              {
                                  label: 'Comissões(ac) ' + ANO_VERSAO_ANTE_,
                                  yAxisID: 'A',
                                  //backgroundColor: 'rgb(201, 10, 10)',
                                  borderColor: 'rgb(0,221,0)',
                                  data: [
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JANEIRO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_MARCO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_ABRIL_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_MAIO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JUNHO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JULHO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_AGOSTO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_DEZEMBRO_ACUM,
                                  ],
                                  type: 'line'


                              },
                {
                    label:  'Comissões(m) ' + ANO_VERSAO_REAL_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(250 , 83 , 0, 0.5)',
                    borderColor: 'rgba(250 , 83 , 0, 0.5)',
                    data: [
                  GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO ,
                  GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO ,
                  GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO ,
                  GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL,
                  GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO ,
                  GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO ,
                  GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO ,
                  GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO ,
                  GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO ,
                  GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO ,
                  GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO ,
                  GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO ,
                    ],
                },
                {
                    label:  'Comissões(m) ' + ANO_VERSAO_ANTE_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(0,221,0, 0.4)',
                    borderColor: 'rgba(0,221,0, 0.4)',
                    data: [
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JANEIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_FEVEREIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_MARCO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_ABRIL"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_MAIO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JUNHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JULHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_AGOSTO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_SETEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_OUTUBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_NOVEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_DEZEMBRO"]))),
                    ],
                },


            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'GASTOS_PESSOAL_GAST_ACAO_SOC_MENSAL_1',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                min:  Math.round(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ__,0),
                                                max:  Math.round(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString();
                                                }
                                            }
                                        },

                    { id: 'B',
                        type: 'linear',
                        position: 'right',
                        ticks: {
                            min: Math.round(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_secon__,0),
                            max:  Math.round(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_secon__,0),
                            beginAtZero: false,
                            callback: function(value, index, values) {
                                return value.toLocaleString();
                            }
                        }
                    },






                ]
            }
        },

    });

@*</script>*@

@*------------------------------------------------GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_013-----------------------------------------------------------*@
@*<script>*@

    var IND_VN_ANO_N_JANEIRO_ACUM = IND_VN_ANO_N_JANEIRO;
    var IND_VN_ANO_N_FEVEREIRO_ACUM = IND_VN_ANO_N_FEVEREIRO + IND_VN_ANO_N_JANEIRO_ACUM;
    var IND_VN_ANO_N_MARCO_ACUM = IND_VN_ANO_N_MARCO + IND_VN_ANO_N_FEVEREIRO_ACUM;
    var IND_VN_ANO_N_ABRIL_ACUM = IND_VN_ANO_N_ABRIL + IND_VN_ANO_N_MARCO_ACUM;
    var IND_VN_ANO_N_MAIO_ACUM = IND_VN_ANO_N_MAIO + IND_VN_ANO_N_ABRIL_ACUM;
    var IND_VN_ANO_N_JUNHO_ACUM = IND_VN_ANO_N_JUNHO + IND_VN_ANO_N_MAIO_ACUM;
    var IND_VN_ANO_N_JULHO_ACUM = IND_VN_ANO_N_JULHO + IND_VN_ANO_N_JUNHO_ACUM;
    var IND_VN_ANO_N_AGOSTO_ACUM = IND_VN_ANO_N_AGOSTO + IND_VN_ANO_N_JULHO_ACUM;
    var IND_VN_ANO_N_SETEMBRO_ACUM = IND_VN_ANO_N_SETEMBRO + IND_VN_ANO_N_AGOSTO_ACUM;
    var IND_VN_ANO_N_OUTUBRO_ACUM = IND_VN_ANO_N_OUTUBRO + IND_VN_ANO_N_SETEMBRO_ACUM;
    var IND_VN_ANO_N_NOVEMBRO_ACUM = IND_VN_ANO_N_NOVEMBRO + IND_VN_ANO_N_OUTUBRO_ACUM;
    var IND_VN_ANO_N_DEZEMBRO_ACUM = IND_VN_ANO_N_DEZEMBRO + IND_VN_ANO_N_NOVEMBRO_ACUM;



    var IND_VN_ANO_N_1_JANEIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JANEIRO"])));
    var IND_VN_ANO_N_1_FEVEREIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_FEVEREIRO"]))) + IND_VN_ANO_N_1_JANEIRO_ACUM;
    var IND_VN_ANO_N_1_MARCO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_MARCO"]))) + IND_VN_ANO_N_1_FEVEREIRO_ACUM;
    var IND_VN_ANO_N_1_ABRIL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_ABRIL"]))) + IND_VN_ANO_N_1_MARCO_ACUM;
    var IND_VN_ANO_N_1_MAIO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_MAIO"]))) + IND_VN_ANO_N_1_ABRIL_ACUM;
    var IND_VN_ANO_N_1_JUNHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JUNHO"]))) + IND_VN_ANO_N_1_MAIO_ACUM;
    var IND_VN_ANO_N_1_JULHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JULHO"]))) + IND_VN_ANO_N_1_JUNHO_ACUM;
    var IND_VN_ANO_N_1_AGOSTO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_AGOSTO"]))) + IND_VN_ANO_N_1_JULHO_ACUM;
    var IND_VN_ANO_N_1_SETEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_SETEMBRO"]))) + IND_VN_ANO_N_1_AGOSTO_ACUM;
    var IND_VN_ANO_N_1_OUTUBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_OUTUBRO"]))) + IND_VN_ANO_N_1_SETEMBRO_ACUM;
    var IND_VN_ANO_N_1_NOVEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_NOVEMBRO"]))) + IND_VN_ANO_N_1_OUTUBRO_ACUM;
    var IND_VN_ANO_N_1_DEZEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_DEZEMBRO"]))) + IND_VN_ANO_N_1_NOVEMBRO_ACUM;




    if(@ViewData["MES_ACUM_REAL"]<1){ var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_JANEIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_JANEIRO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO_ACUM/IND_VN_ANO_N_JANEIRO_ACUM*100; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_FEVEREIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_FEVEREIRO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO_ACUM/IND_VN_ANO_N_FEVEREIRO_ACUM*100; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_MARCO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_MARCO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO_ACUM/IND_VN_ANO_N_MARCO_ACUM*100; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_MARCO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_ABRIL_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_ABRIL_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL_ACUM/IND_VN_ANO_N_ABRIL_ACUM*100; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_ABRIL_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_MAIO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_MAIO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO_ACUM/IND_VN_ANO_N_MAIO_ACUM*100; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_MAIO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_JUNHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_JUNHO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO_ACUM/IND_VN_ANO_N_JUNHO_ACUM*100; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_JUNHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_JULHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_JULHO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO_ACUM/IND_VN_ANO_N_JULHO_ACUM*100; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_JULHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_AGOSTO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_AGOSTO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO_ACUM/IND_VN_ANO_N_AGOSTO_ACUM*100; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_SETEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_SETEMBRO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO_ACUM/IND_VN_ANO_N_SETEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_OUTUBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_OUTUBRO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO_ACUM/IND_VN_ANO_N_OUTUBRO_ACUM*100; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_NOVEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_NOVEMBRO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO_ACUM/IND_VN_ANO_N_NOVEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_DEZEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_DEZEMBRO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO_ACUM/IND_VN_ANO_N_DEZEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_DEZEMBRO_ACUM };



    if(@ViewData["MES_ACUM_REAL"]<1){ var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_JANEIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_JANEIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_JANEIRO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JANEIRO_ACUM/IND_VN_ANO_N_1_JANEIRO_ACUM*100; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_JANEIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_FEVEREIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_FEVEREIRO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_FEVEREIRO_ACUM/IND_VN_ANO_N_1_FEVEREIRO_ACUM*100; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_FEVEREIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_MARCO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_MARCO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_MARCO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_MARCO_ACUM/IND_VN_ANO_N_1_MARCO_ACUM*100; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_MARCO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_ABRIL_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_ABRIL_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_ABRIL_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_ABRIL_ACUM/IND_VN_ANO_N_1_ABRIL_ACUM*100; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_ABRIL_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_MAIO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_MAIO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_MAIO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_MAIO_ACUM/IND_VN_ANO_N_1_MAIO_ACUM*100; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_MAIO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_JUNHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_JUNHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_JUNHO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JUNHO_ACUM/IND_VN_ANO_N_1_JUNHO_ACUM*100; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_JUNHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_JULHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_JULHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_JULHO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JULHO_ACUM/IND_VN_ANO_N_1_JULHO_ACUM*100; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_JULHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_AGOSTO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_AGOSTO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_AGOSTO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_AGOSTO_ACUM/IND_VN_ANO_N_1_AGOSTO_ACUM*100; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_AGOSTO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_SETEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_SETEMBRO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_SETEMBRO_ACUM/IND_VN_ANO_N_1_SETEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_SETEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_OUTUBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_OUTUBRO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_OUTUBRO_ACUM/IND_VN_ANO_N_1_OUTUBRO_ACUM*100; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_OUTUBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_NOVEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_NOVEMBRO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_NOVEMBRO_ACUM/IND_VN_ANO_N_1_NOVEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_NOVEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_DEZEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_DEZEMBRO_ACUM= GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_DEZEMBRO_ACUM/IND_VN_ANO_N_1_DEZEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_DEZEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_DEZEMBRO_ACUM };



    if(@ViewData["MES_ACUM_REAL"]<1){ var VAR_VN_ANO_N_JANEIRO_ACUM = 'nd'; var VAR_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JANEIRO_ACUM= ((IND_VN_ANO_N_JANEIRO_ACUM-IND_VN_ANO_N_1_JANEIRO_ACUM)/Math.abs(IND_VN_ANO_N_1_JANEIRO_ACUM))*100; var VAR_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = VAR_VN_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var VAR_VN_ANO_N_FEVEREIRO_ACUM = 'nd'; var VAR_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_FEVEREIRO_ACUM= ((IND_VN_ANO_N_FEVEREIRO_ACUM-IND_VN_ANO_N_1_FEVEREIRO_ACUM)/Math.abs(IND_VN_ANO_N_1_FEVEREIRO_ACUM))*100; var VAR_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = VAR_VN_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var VAR_VN_ANO_N_MARCO_ACUM = 'nd'; var VAR_VN_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_MARCO_ACUM= ((IND_VN_ANO_N_MARCO_ACUM-IND_VN_ANO_N_1_MARCO_ACUM)/Math.abs(IND_VN_ANO_N_1_MARCO_ACUM))*100; var VAR_VN_ANO_N_MARCO_ACUM_MAX_MIN = VAR_VN_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var VAR_VN_ANO_N_ABRIL_ACUM = 'nd'; var VAR_VN_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_ABRIL_ACUM= ((IND_VN_ANO_N_ABRIL_ACUM-IND_VN_ANO_N_1_ABRIL_ACUM)/Math.abs(IND_VN_ANO_N_1_ABRIL_ACUM))*100; var VAR_VN_ANO_N_ABRIL_ACUM_MAX_MIN = VAR_VN_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var VAR_VN_ANO_N_MAIO_ACUM = 'nd'; var VAR_VN_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_MAIO_ACUM= ((IND_VN_ANO_N_MAIO_ACUM-IND_VN_ANO_N_1_MAIO_ACUM)/Math.abs(IND_VN_ANO_N_1_MAIO_ACUM))*100; var VAR_VN_ANO_N_MAIO_ACUM_MAX_MIN = VAR_VN_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var VAR_VN_ANO_N_JUNHO_ACUM = 'nd'; var VAR_VN_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JUNHO_ACUM= ((IND_VN_ANO_N_JUNHO_ACUM-IND_VN_ANO_N_1_JUNHO_ACUM)/Math.abs(IND_VN_ANO_N_1_JUNHO_ACUM))*100; var VAR_VN_ANO_N_JUNHO_ACUM_MAX_MIN = VAR_VN_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var VAR_VN_ANO_N_JULHO_ACUM = 'nd'; var VAR_VN_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JULHO_ACUM= ((IND_VN_ANO_N_JULHO_ACUM-IND_VN_ANO_N_1_JULHO_ACUM)/Math.abs(IND_VN_ANO_N_1_JULHO_ACUM))*100; var VAR_VN_ANO_N_JULHO_ACUM_MAX_MIN = VAR_VN_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var VAR_VN_ANO_N_AGOSTO_ACUM = 'nd'; var VAR_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_AGOSTO_ACUM= ((IND_VN_ANO_N_AGOSTO_ACUM-IND_VN_ANO_N_1_AGOSTO_ACUM)/Math.abs(IND_VN_ANO_N_1_AGOSTO_ACUM))*100; var VAR_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = VAR_VN_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var VAR_VN_ANO_N_SETEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_SETEMBRO_ACUM= ((IND_VN_ANO_N_SETEMBRO_ACUM-IND_VN_ANO_N_1_SETEMBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_SETEMBRO_ACUM))*100; var VAR_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var VAR_VN_ANO_N_OUTUBRO_ACUM = 'nd'; var VAR_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_OUTUBRO_ACUM= ((IND_VN_ANO_N_OUTUBRO_ACUM-IND_VN_ANO_N_1_OUTUBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_OUTUBRO_ACUM))*100; var VAR_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var VAR_VN_ANO_N_NOVEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_NOVEMBRO_ACUM= ((IND_VN_ANO_N_NOVEMBRO_ACUM-IND_VN_ANO_N_1_NOVEMBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_NOVEMBRO_ACUM))*100; var VAR_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var VAR_VN_ANO_N_DEZEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_DEZEMBRO_ACUM= ((IND_VN_ANO_N_DEZEMBRO_ACUM-IND_VN_ANO_N_1_DEZEMBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_DEZEMBRO_ACUM))*100; var VAR_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_DEZEMBRO_ACUM };



    if(@ViewData["MES_ACUM_REAL"]<1){ var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO_ACUM= ((GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO_ACUM-GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JANEIRO_ACUM)/Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JANEIRO_ACUM))*100; var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO_ACUM= ((GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO_ACUM-GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_FEVEREIRO_ACUM)/Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_FEVEREIRO_ACUM))*100; var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO_ACUM= ((GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO_ACUM-GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_MARCO_ACUM)/Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_MARCO_ACUM))*100; var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL_ACUM= ((GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL_ACUM-GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_ABRIL_ACUM)/Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_ABRIL_ACUM))*100; var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO_ACUM= ((GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO_ACUM-GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_MAIO_ACUM)/Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_MAIO_ACUM))*100; var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO_ACUM= ((GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO_ACUM-GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JUNHO_ACUM)/Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JUNHO_ACUM))*100; var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO_ACUM= ((GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO_ACUM-GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JULHO_ACUM)/Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_JULHO_ACUM))*100; var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO_ACUM= ((GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO_ACUM-GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_AGOSTO_ACUM)/Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_AGOSTO_ACUM))*100; var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO_ACUM= ((GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO_ACUM-GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_SETEMBRO_ACUM)/Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_SETEMBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO_ACUM= ((GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO_ACUM-GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_OUTUBRO_ACUM)/Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_OUTUBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO_ACUM= ((GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO_ACUM-GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_NOVEMBRO_ACUM)/Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_NOVEMBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO_ACUM= ((GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO_ACUM-GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_DEZEMBRO_ACUM)/Math.abs(GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_1_DEZEMBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO_ACUM };

    if( PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_JANEIRO_ACUM > PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_JANEIRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO_ACUM=PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_JANEIRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO_ACUM=PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_JANEIRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_FEVEREIRO_ACUM > PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_FEVEREIRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO_ACUM=PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_FEVEREIRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO_ACUM=PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_FEVEREIRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_MARCO_ACUM > PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_MARCO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO_ACUM=PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_MARCO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO_ACUM=PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_MARCO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_ABRIL_ACUM > PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_ABRIL_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL_ACUM=PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_ABRIL_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL_ACUM=PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_ABRIL_ACUM ; }
    if( PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_MAIO_ACUM > PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_MAIO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO_ACUM=PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_MAIO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO_ACUM=PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_MAIO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_JUNHO_ACUM > PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_JUNHO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO_ACUM=PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_JUNHO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO_ACUM=PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_JUNHO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_JULHO_ACUM > PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_JULHO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO_ACUM=PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_JULHO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO_ACUM=PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_JULHO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_AGOSTO_ACUM > PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_AGOSTO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO_ACUM=PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_AGOSTO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO_ACUM=PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_AGOSTO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_SETEMBRO_ACUM > PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_SETEMBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO_ACUM=PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_SETEMBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO_ACUM=PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_SETEMBRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_OUTUBRO_ACUM > PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_OUTUBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO_ACUM=PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_OUTUBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO_ACUM=PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_OUTUBRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_NOVEMBRO_ACUM > PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_NOVEMBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO_ACUM=PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_NOVEMBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO_ACUM=PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_NOVEMBRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_DEZEMBRO_ACUM > PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_DEZEMBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO_ACUM=PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_DEZEMBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO_ACUM=PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_DEZEMBRO_ACUM ; }



    var fillBetweenLinesPlugin = {
        afterDatasetsDraw: function (chart) {
            var ctx = chart.chart.ctx;
            var xaxis = chart.scales['x-axis-0'];
            var yaxis = chart.scales['y-axis-0'];
            var datasets = chart.data.datasets;
            ctx.save();

            for (var d = 0; d < datasets.length; d++) {
                var dataset = datasets[d];
                if (dataset.fillBetweenSet == undefined) {
                    continue;
                }

                // get meta for both data sets
                var meta1 = chart.getDatasetMeta(d);
                var meta2 = chart.getDatasetMeta(dataset.fillBetweenSet);

                // do not draw fill if one of the datasets is hidden
                if (meta1.hidden || meta2.hidden) continue;

                // create fill areas in pairs
                for (var p = 0; p < meta1.data.length-1;p++) {
                    // if null skip
                    if (dataset.data[p] == null || dataset.data[p+1] == null) continue;

                    ctx.beginPath();

                    // trace line 1
                    var curr = meta1.data[p];
                    var next = meta1.data[p+1];
                    ctx.moveTo(curr._view.x, curr._view.y);
                    ctx.lineTo(curr._view.x, curr._view.y);
                    if (curr._view.steppedLine === true) {
                        ctx.lineTo(next._view.x, curr._view.y);
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else if (next._view.tension === 0) {
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else {
                        ctx.bezierCurveTo(
                          curr._view.controlPointNextX,
                          curr._view.controlPointNextY,
                          next._view.controlPointPreviousX,
                          next._view.controlPointPreviousY,
                          next._view.x,
                          next._view.y
                        );
                    }

                    // connect dataset1 to dataset2
                    var curr = meta2.data[p+1];
                    var next = meta2.data[p];
                    ctx.lineTo(curr._view.x, curr._view.y);

                    // trace BACKWORDS set2 to complete the box
                    if (curr._view.steppedLine === true) {
                        ctx.lineTo(curr._view.x, next._view.y);
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else if (next._view.tension === 0) {
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else {
                        // reverse bezier
                        ctx.bezierCurveTo(
                          curr._view.controlPointPreviousX,
                          curr._view.controlPointPreviousY,
                          next._view.controlPointNextX,
                          next._view.controlPointNextY,
                          next._view.x,
                          next._view.y
                        );
                    }

                    // close the loop and fill with shading
                    ctx.closePath();
                    ctx.fillStyle = dataset.fillBetweenColor || "rgba(0,0,0,0.1)";
                    ctx.fill();
                } // end for p loop
            }
        } // end afterDatasetsDraw
    }; // end fillBetweenLinesPlugin

    Chart.pluginService.register(fillBetweenLinesPlugin);



    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_013=document.getElementById('GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_013').getContext('2d');

    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_013=new Chart(GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_013, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label:  'Peso ComissõesvsVN(ac) ' + ANO_VERSAO_REAL_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(250 , 83 , 0)',
                   //borderColor: "#F00",
                   fill: false,
                   steppedLine: false,
                   tension: 0.5,
                   fillBetweenSet: 1,
                   fillBetweenColor: "rgba(0, 221, 0, 0.1)",
                   data: [
                   PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_JANEIRO_ACUM,
                   PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_FEVEREIRO_ACUM,
                   PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_MARCO_ACUM,
                   PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_ABRIL_ACUM,
                   PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_MAIO_ACUM,
                   PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_JUNHO_ACUM,
                   PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_JULHO_ACUM,
                   PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_AGOSTO_ACUM,
                   PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_SETEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_OUTUBRO_ACUM,
                   PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_NOVEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_DEZEMBRO_ACUM,

                   ],
                   type: 'line'


               },
                {
                    label: 'Peso ComissõesvsVN(ac) ' + ANO_VERSAO_ANTE_,
                    yAxisID: 'A',
                    //backgroundColor: 'rgb(17, 121, 240)',
                    borderColor: 'rgb(0,221,0)',
                    //borderColor: "#00F",
                    fill: false,
                    steppedLine: false,
                    tension: 0.5,
                    data: [
                   PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_JANEIRO_ACUM,
                   PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_FEVEREIRO_ACUM,
                   PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_MARCO_ACUM,
                   PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_ABRIL_ACUM,
                   PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_MAIO_ACUM,
                   PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_JUNHO_ACUM,
                   PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_JULHO_ACUM,
                   PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_AGOSTO_ACUM,
                   PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_SETEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_OUTUBRO_ACUM,
                   PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_NOVEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_GAST_ACAO_SOC_VN_ANO_N_1_DEZEMBRO_ACUM,
                    ],
                    type: 'line'
                },
    {
        label: 'Ineficiência',
        yAxisID: 'A',
        backgroundColor: "rgba(255, 0, 0, 0.2)",
        borderColor: 'rgba(255, 255, 255, 0.1)',
        //borderColor: "#0D0",
        fill: false,
        steppedLine: false,
        tension: 0.5,
        fillBetweenSet: 1,
        fillBetweenColor: "rgba(255, 0, 0, 0.2)",
        data: [
    INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JANEIRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_FEVEREIRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MARCO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_ABRIL_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_MAIO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JUNHO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_JULHO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_AGOSTO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_SETEMBRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_OUTUBRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_NOVEMBRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_GAST_ACAO_SOC_ANO_N_DEZEMBRO_ACUM,
        ],
        type: 'line'
    },

            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'FSE_Comissões COMP',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                //min:  Math.round(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_min_princ__,0),
                                                //max:  Math.round(GASTOS_PESSOAL_GAST_ACAO_SOC_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString()+ "%";
                                                }
                                            }
                                        },







                ]
            }
        },

    });

@*</script>*@

@*------------------------------------------------GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_014-----------------------------------------------------------*@
@*<script>*@

    if(@ViewData["MES_ACUM_REAL"]<1){ var IND_VN_ANO_N_JANEIRO = 'nd'; var IND_VN_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JANEIRO"]))); var IND_VN_ANO_N_JANEIRO_MAX_MIN = IND_VN_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var IND_VN_ANO_N_FEVEREIRO = 'nd'; var IND_VN_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_FEVEREIRO"]))); var IND_VN_ANO_N_FEVEREIRO_MAX_MIN = IND_VN_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var IND_VN_ANO_N_MARCO = 'nd'; var IND_VN_ANO_N_MARCO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_MARCO"]))); var IND_VN_ANO_N_MARCO_MAX_MIN = IND_VN_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var IND_VN_ANO_N_ABRIL = 'nd'; var IND_VN_ANO_N_ABRIL_MAX_MIN = 0;  } else { var IND_VN_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_ABRIL"]))); var IND_VN_ANO_N_ABRIL_MAX_MIN = IND_VN_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var IND_VN_ANO_N_MAIO = 'nd'; var IND_VN_ANO_N_MAIO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_MAIO"]))); var IND_VN_ANO_N_MAIO_MAX_MIN = IND_VN_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var IND_VN_ANO_N_JUNHO = 'nd'; var IND_VN_ANO_N_JUNHO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JUNHO"]))); var IND_VN_ANO_N_JUNHO_MAX_MIN = IND_VN_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var IND_VN_ANO_N_JULHO = 'nd'; var IND_VN_ANO_N_JULHO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_JULHO"]))); var IND_VN_ANO_N_JULHO_MAX_MIN = IND_VN_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var IND_VN_ANO_N_AGOSTO = 'nd'; var IND_VN_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_AGOSTO"]))); var IND_VN_ANO_N_AGOSTO_MAX_MIN = IND_VN_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var IND_VN_ANO_N_SETEMBRO = 'nd'; var IND_VN_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_SETEMBRO"]))); var IND_VN_ANO_N_SETEMBRO_MAX_MIN = IND_VN_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var IND_VN_ANO_N_OUTUBRO = 'nd'; var IND_VN_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_OUTUBRO"]))); var IND_VN_ANO_N_OUTUBRO_MAX_MIN = IND_VN_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var IND_VN_ANO_N_NOVEMBRO = 'nd'; var IND_VN_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_NOVEMBRO"]))); var IND_VN_ANO_N_NOVEMBRO_MAX_MIN = IND_VN_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var IND_VN_ANO_N_DEZEMBRO = 'nd'; var IND_VN_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var IND_VN_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_DEZEMBRO"]))); var IND_VN_ANO_N_DEZEMBRO_MAX_MIN = IND_VN_ANO_N_DEZEMBRO };

    if(@ViewData["MES_ACUM_REAL"]<1){ var GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO = 'nd'; var GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO"]))); var GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO_MAX_MIN = GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO };
    if(@ViewData["MES_ACUM_REAL"]<2){ var GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO = 'nd'; var GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO"]))); var GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO_MAX_MIN = GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO };
    if(@ViewData["MES_ACUM_REAL"]<3){ var GASTOS_PESSOAL_OUTROS_ANO_N_MARCO = 'nd'; var GASTOS_PESSOAL_OUTROS_ANO_N_MARCO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_OUTROS_ANO_N_MARCO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_MARCO"]))); var GASTOS_PESSOAL_OUTROS_ANO_N_MARCO_MAX_MIN = GASTOS_PESSOAL_OUTROS_ANO_N_MARCO };
    if(@ViewData["MES_ACUM_REAL"]<4){ var GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL = 'nd'; var GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL"]))); var GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL_MAX_MIN = GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL };
    if(@ViewData["MES_ACUM_REAL"]<5){ var GASTOS_PESSOAL_OUTROS_ANO_N_MAIO = 'nd'; var GASTOS_PESSOAL_OUTROS_ANO_N_MAIO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_OUTROS_ANO_N_MAIO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_MAIO"]))); var GASTOS_PESSOAL_OUTROS_ANO_N_MAIO_MAX_MIN = GASTOS_PESSOAL_OUTROS_ANO_N_MAIO };
    if(@ViewData["MES_ACUM_REAL"]<6){ var GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO = 'nd'; var GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO"]))); var GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO_MAX_MIN = GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO };
    if(@ViewData["MES_ACUM_REAL"]<7){ var GASTOS_PESSOAL_OUTROS_ANO_N_JULHO = 'nd'; var GASTOS_PESSOAL_OUTROS_ANO_N_JULHO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_OUTROS_ANO_N_JULHO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_JULHO"]))); var GASTOS_PESSOAL_OUTROS_ANO_N_JULHO_MAX_MIN = GASTOS_PESSOAL_OUTROS_ANO_N_JULHO };
    if(@ViewData["MES_ACUM_REAL"]<8){ var GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO = 'nd'; var GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO"]))); var GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO_MAX_MIN = GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO };
    if(@ViewData["MES_ACUM_REAL"]<9){ var GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO = 'nd'; var GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO"]))); var GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO_MAX_MIN = GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<10){ var GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO = 'nd'; var GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO"]))); var GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO_MAX_MIN = GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO };
    if(@ViewData["MES_ACUM_REAL"]<11){ var GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO = 'nd'; var GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO"]))); var GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO_MAX_MIN = GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO };
    if(@ViewData["MES_ACUM_REAL"]<12){ var GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO = 'nd'; var GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO= @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO"]))); var GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO_MAX_MIN = GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO };


    var GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO_ACUM = GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO;
    var GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO_ACUM = GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO + GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO_ACUM;
    var GASTOS_PESSOAL_OUTROS_ANO_N_MARCO_ACUM = GASTOS_PESSOAL_OUTROS_ANO_N_MARCO + GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO_ACUM;
    var GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL_ACUM = GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL + GASTOS_PESSOAL_OUTROS_ANO_N_MARCO_ACUM;
    var GASTOS_PESSOAL_OUTROS_ANO_N_MAIO_ACUM = GASTOS_PESSOAL_OUTROS_ANO_N_MAIO + GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL_ACUM;
    var GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO_ACUM = GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO + GASTOS_PESSOAL_OUTROS_ANO_N_MAIO_ACUM;
    var GASTOS_PESSOAL_OUTROS_ANO_N_JULHO_ACUM = GASTOS_PESSOAL_OUTROS_ANO_N_JULHO + GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO_ACUM;
    var GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO_ACUM = GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO + GASTOS_PESSOAL_OUTROS_ANO_N_JULHO_ACUM;
    var GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO_ACUM = GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO + GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO_ACUM;
    var GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO_ACUM = GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO + GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO_ACUM;
    var GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO_ACUM = GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO + GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO_ACUM;
    var GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO_ACUM = GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO + GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO_ACUM;




    if(@ViewData["MES_ACUM_REAL"]<1){ var GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO_ACUM = 'nd'; var GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO_ACUM; var GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO_ACUM_MAX_MIN = GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO_ACUM = 'nd'; var GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO_ACUM; var GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO_ACUM_MAX_MIN = GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var GASTOS_PESSOAL_OUTROS_ANO_N_MARCO_ACUM = 'nd'; var GASTOS_PESSOAL_OUTROS_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_OUTROS_ANO_N_MARCO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_MARCO_ACUM; var GASTOS_PESSOAL_OUTROS_ANO_N_MARCO_ACUM_MAX_MIN = GASTOS_PESSOAL_OUTROS_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL_ACUM = 'nd'; var GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL_ACUM; var GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL_ACUM_MAX_MIN = GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var GASTOS_PESSOAL_OUTROS_ANO_N_MAIO_ACUM = 'nd'; var GASTOS_PESSOAL_OUTROS_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_OUTROS_ANO_N_MAIO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_MAIO_ACUM; var GASTOS_PESSOAL_OUTROS_ANO_N_MAIO_ACUM_MAX_MIN = GASTOS_PESSOAL_OUTROS_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO_ACUM = 'nd'; var GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO_ACUM; var GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO_ACUM_MAX_MIN = GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var GASTOS_PESSOAL_OUTROS_ANO_N_JULHO_ACUM = 'nd'; var GASTOS_PESSOAL_OUTROS_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_OUTROS_ANO_N_JULHO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_JULHO_ACUM; var GASTOS_PESSOAL_OUTROS_ANO_N_JULHO_ACUM_MAX_MIN = GASTOS_PESSOAL_OUTROS_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO_ACUM = 'nd'; var GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO_ACUM; var GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO_ACUM_MAX_MIN = GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO_ACUM = 'nd'; var GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO_ACUM; var GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO_ACUM = 'nd'; var GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO_ACUM; var GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO_ACUM = 'nd'; var GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO_ACUM; var GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO_ACUM = 'nd'; var GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO_ACUM; var GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO_ACUM_MAX_MIN = GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO_ACUM };




    var GASTOS_PESSOAL_OUTROS_ANO_N_1_JANEIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_JANEIRO"])));
    var GASTOS_PESSOAL_OUTROS_ANO_N_1_FEVEREIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_FEVEREIRO"]))) + GASTOS_PESSOAL_OUTROS_ANO_N_1_JANEIRO_ACUM;
    var GASTOS_PESSOAL_OUTROS_ANO_N_1_MARCO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_MARCO"]))) + GASTOS_PESSOAL_OUTROS_ANO_N_1_FEVEREIRO_ACUM;
    var GASTOS_PESSOAL_OUTROS_ANO_N_1_ABRIL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_ABRIL"]))) + GASTOS_PESSOAL_OUTROS_ANO_N_1_MARCO_ACUM;
    var GASTOS_PESSOAL_OUTROS_ANO_N_1_MAIO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_MAIO"]))) + GASTOS_PESSOAL_OUTROS_ANO_N_1_ABRIL_ACUM;
    var GASTOS_PESSOAL_OUTROS_ANO_N_1_JUNHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_JUNHO"]))) + GASTOS_PESSOAL_OUTROS_ANO_N_1_MAIO_ACUM;
    var GASTOS_PESSOAL_OUTROS_ANO_N_1_JULHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_JULHO"]))) + GASTOS_PESSOAL_OUTROS_ANO_N_1_JUNHO_ACUM;
    var GASTOS_PESSOAL_OUTROS_ANO_N_1_AGOSTO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_AGOSTO"]))) + GASTOS_PESSOAL_OUTROS_ANO_N_1_JULHO_ACUM;
    var GASTOS_PESSOAL_OUTROS_ANO_N_1_SETEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_SETEMBRO"]))) + GASTOS_PESSOAL_OUTROS_ANO_N_1_AGOSTO_ACUM;
    var GASTOS_PESSOAL_OUTROS_ANO_N_1_OUTUBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_OUTUBRO"]))) + GASTOS_PESSOAL_OUTROS_ANO_N_1_SETEMBRO_ACUM;
    var GASTOS_PESSOAL_OUTROS_ANO_N_1_NOVEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_NOVEMBRO"]))) + GASTOS_PESSOAL_OUTROS_ANO_N_1_OUTUBRO_ACUM;
    var GASTOS_PESSOAL_OUTROS_ANO_N_1_DEZEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_DEZEMBRO"]))) + GASTOS_PESSOAL_OUTROS_ANO_N_1_NOVEMBRO_ACUM;


    var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ= Math.max(
                       GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_OUTROS_ANO_N_MARCO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_OUTROS_ANO_N_MAIO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_OUTROS_ANO_N_JULHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO_ACUM_MAX_MIN,

                       GASTOS_PESSOAL_OUTROS_ANO_N_1_JANEIRO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_MARCO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_ABRIL_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_MAIO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_JUNHO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_JULHO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_AGOSTO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_DEZEMBRO_ACUM
                             );
    var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ= Math.min(

                       GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_OUTROS_ANO_N_MARCO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_OUTROS_ANO_N_MAIO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_OUTROS_ANO_N_JULHO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO_ACUM_MAX_MIN,
                       GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO_ACUM_MAX_MIN,

                       GASTOS_PESSOAL_OUTROS_ANO_N_1_JANEIRO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_MARCO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_ABRIL_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_MAIO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_JUNHO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_JULHO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_AGOSTO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_DEZEMBRO_ACUM
                           );
    var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon= Math.max(
                       GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO_MAX_MIN ,
                       GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO_MAX_MIN ,
                       GASTOS_PESSOAL_OUTROS_ANO_N_MARCO_MAX_MIN ,
                       GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL_MAX_MIN ,
                       GASTOS_PESSOAL_OUTROS_ANO_N_MAIO_MAX_MIN ,
                       GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO_MAX_MIN ,
                       GASTOS_PESSOAL_OUTROS_ANO_N_JULHO_MAX_MIN ,
                       GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO_MAX_MIN ,
                       GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO_MAX_MIN ,
                       GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO_MAX_MIN ,



                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_DEZEMBRO"])))

                            );
    var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon= Math.min(
                       GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO_MAX_MIN ,
                       GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO_MAX_MIN ,
                       GASTOS_PESSOAL_OUTROS_ANO_N_MARCO_MAX_MIN ,
                       GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL_MAX_MIN ,
                       GASTOS_PESSOAL_OUTROS_ANO_N_MAIO_MAX_MIN ,
                       GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO_MAX_MIN ,
                       GASTOS_PESSOAL_OUTROS_ANO_N_JULHO_MAX_MIN ,
                       GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO_MAX_MIN ,
                       GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO_MAX_MIN ,
                       GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO_MAX_MIN ,
                       GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO_MAX_MIN ,


                           @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_JANEIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_FEVEREIRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_MARCO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_ABRIL"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_MAIO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_JUNHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_JULHO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_AGOSTO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_SETEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_OUTUBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_NOVEMBRO"]))),
                            @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_DEZEMBRO"])))

                          );

    //NOTA TA: Aqui trato o minimo e o maximo do eixo principal
    if(Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ)>=Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ))
    {
        var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ_=(Math.ceil(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ),0).toString().length-1);
        var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ_= (Math.floor(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ),0).toString().length-1);
        //alert(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ_);
        //alert(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ_);
    }
    else
    {
        var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ_=(Math.ceil(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ),0).toString().length-1);
        var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ_= (Math.floor(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ),0).toString().length-1);}

    //NOTA TA: Aqui trato o minimo e o maximo do eixo secundario

    if(Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon)>=Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon))
    {
        var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon_=(Math.ceil(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon),0).toString().length-1);
        var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon_= (Math.floor(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon),0).toString().length-1);
        //alert(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon_);
        //alert(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon_);
    }
    else
    {
        var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon_=(Math.ceil(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon),0).toString().length-1);
        var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon_= (Math.floor(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon/Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon),0).toString().length-1),0))*Math.pow(10,Math.round(Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon),0).toString().length-1);}


    if(Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ)/Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ)>=Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon)/Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon))
    { if(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ > 0 && GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ <0 ){ var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon__=(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ_*GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon_)/GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ_;} else { var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon__=GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon_;}
        if(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon > 0 && GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon <0 ){ var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ__=(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon__*GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ_)/GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon_;} else { var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ__=GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ_;}}
    else
    {if(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon > 0 && GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon <0 ){ var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ__=(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon_*GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ_)/GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon_;} else { var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ__=GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ_;}
        if(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ > 0 && GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ <0 ){ var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon__=(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ__*GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon_)/GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ_;} else { var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon__=GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon_;}
    }



    if(Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ)/Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ)>=Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon)/Math.abs(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon))
    { if(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ > 0 && GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ <0 ){ var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon__=(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ_*GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon_)/GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ_;} else { var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon__=GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon_;}
        if(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon > 0 && GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon <0 ){ var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ__=(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon__*GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ_)/GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon_;} else { var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ__=GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ_;}}
    else
    {if(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon > 0 && GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon <0 ){ var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ__=(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon_*GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ_)/GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon_;} else { var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ__=GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ_;}
        if(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ > 0 && GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ <0 ){ var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon__=(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ__*GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon_)/GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ_;} else { var GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon__=GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon_;}
    }



    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_014=document.getElementById('GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_014').getContext('2d');

    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_014=new Chart(GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_014, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label: 'Cons. Repar.(ac) ' + ANO_VERSAO_REAL_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(250 , 83 , 0)',
                   data: [
                       GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_MARCO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_MAIO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_JULHO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO_ACUM,
                   ],
                   type: 'line'


               },
                              {
                                  label: 'Cons. Repar.(ac) ' + ANO_VERSAO_ANTE_,
                                  yAxisID: 'A',
                                  //backgroundColor: 'rgb(201, 10, 10)',
                                  borderColor: 'rgb(0,221,0)',
                                  data: [
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_JANEIRO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_FEVEREIRO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_MARCO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_ABRIL_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_MAIO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_JUNHO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_JULHO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_AGOSTO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_SETEMBRO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_OUTUBRO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_NOVEMBRO_ACUM,
                       GASTOS_PESSOAL_OUTROS_ANO_N_1_DEZEMBRO_ACUM,
                                  ],
                                  type: 'line'


                              },
                {
                    label:  'Cons. Repar.(m) ' + ANO_VERSAO_REAL_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(250 , 83 , 0, 0.5)',
                    borderColor: 'rgba(250 , 83 , 0, 0.5)',
                    data: [
                  GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO ,
                  GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO ,
                  GASTOS_PESSOAL_OUTROS_ANO_N_MARCO ,
                  GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL,
                  GASTOS_PESSOAL_OUTROS_ANO_N_MAIO ,
                  GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO ,
                  GASTOS_PESSOAL_OUTROS_ANO_N_JULHO ,
                  GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO ,
                  GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO ,
                  GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO ,
                  GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO ,
                  GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO ,
                    ],
                },
                {
                    label:  'Cons. Repar.(m) ' + ANO_VERSAO_ANTE_,
                    yAxisID: 'B',
                    backgroundColor: 'rgba(0,221,0, 0.4)',
                    borderColor: 'rgba(0,221,0, 0.4)',
                    data: [
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_JANEIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_FEVEREIRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_MARCO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_ABRIL"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_MAIO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_JUNHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_JULHO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_AGOSTO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_SETEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_OUTUBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_NOVEMBRO"]))),
                       @Html.Raw((string.Format("{0:0}", @ViewData["GASTOS_PESSOAL_OUTROS_ANO_N_1_DEZEMBRO"]))),
                    ],
                },


            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'GASTOS_PESSOAL_OUTROS_MENSAL_1',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                min:  Math.round(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ__,0),
                                                max:  Math.round(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString();
                                                }
                                            }
                                        },

                    { id: 'B',
                        type: 'linear',
                        position: 'right',
                        ticks: {
                            min: Math.round(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_secon__,0),
                            max:  Math.round(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_secon__,0),
                            beginAtZero: false,
                            callback: function(value, index, values) {
                                return value.toLocaleString();
                            }
                        }
                    },






                ]
            }
        },

    });

@*</script>*@

@*------------------------------------------------GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_015-----------------------------------------------------------*@
@*<script>*@

    var IND_VN_ANO_N_JANEIRO_ACUM = IND_VN_ANO_N_JANEIRO;
    var IND_VN_ANO_N_FEVEREIRO_ACUM = IND_VN_ANO_N_FEVEREIRO + IND_VN_ANO_N_JANEIRO_ACUM;
    var IND_VN_ANO_N_MARCO_ACUM = IND_VN_ANO_N_MARCO + IND_VN_ANO_N_FEVEREIRO_ACUM;
    var IND_VN_ANO_N_ABRIL_ACUM = IND_VN_ANO_N_ABRIL + IND_VN_ANO_N_MARCO_ACUM;
    var IND_VN_ANO_N_MAIO_ACUM = IND_VN_ANO_N_MAIO + IND_VN_ANO_N_ABRIL_ACUM;
    var IND_VN_ANO_N_JUNHO_ACUM = IND_VN_ANO_N_JUNHO + IND_VN_ANO_N_MAIO_ACUM;
    var IND_VN_ANO_N_JULHO_ACUM = IND_VN_ANO_N_JULHO + IND_VN_ANO_N_JUNHO_ACUM;
    var IND_VN_ANO_N_AGOSTO_ACUM = IND_VN_ANO_N_AGOSTO + IND_VN_ANO_N_JULHO_ACUM;
    var IND_VN_ANO_N_SETEMBRO_ACUM = IND_VN_ANO_N_SETEMBRO + IND_VN_ANO_N_AGOSTO_ACUM;
    var IND_VN_ANO_N_OUTUBRO_ACUM = IND_VN_ANO_N_OUTUBRO + IND_VN_ANO_N_SETEMBRO_ACUM;
    var IND_VN_ANO_N_NOVEMBRO_ACUM = IND_VN_ANO_N_NOVEMBRO + IND_VN_ANO_N_OUTUBRO_ACUM;
    var IND_VN_ANO_N_DEZEMBRO_ACUM = IND_VN_ANO_N_DEZEMBRO + IND_VN_ANO_N_NOVEMBRO_ACUM;



    var IND_VN_ANO_N_1_JANEIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JANEIRO"])));
    var IND_VN_ANO_N_1_FEVEREIRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_FEVEREIRO"]))) + IND_VN_ANO_N_1_JANEIRO_ACUM;
    var IND_VN_ANO_N_1_MARCO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_MARCO"]))) + IND_VN_ANO_N_1_FEVEREIRO_ACUM;
    var IND_VN_ANO_N_1_ABRIL_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_ABRIL"]))) + IND_VN_ANO_N_1_MARCO_ACUM;
    var IND_VN_ANO_N_1_MAIO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_MAIO"]))) + IND_VN_ANO_N_1_ABRIL_ACUM;
    var IND_VN_ANO_N_1_JUNHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JUNHO"]))) + IND_VN_ANO_N_1_MAIO_ACUM;
    var IND_VN_ANO_N_1_JULHO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_JULHO"]))) + IND_VN_ANO_N_1_JUNHO_ACUM;
    var IND_VN_ANO_N_1_AGOSTO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_AGOSTO"]))) + IND_VN_ANO_N_1_JULHO_ACUM;
    var IND_VN_ANO_N_1_SETEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_SETEMBRO"]))) + IND_VN_ANO_N_1_AGOSTO_ACUM;
    var IND_VN_ANO_N_1_OUTUBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_OUTUBRO"]))) + IND_VN_ANO_N_1_SETEMBRO_ACUM;
    var IND_VN_ANO_N_1_NOVEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_NOVEMBRO"]))) + IND_VN_ANO_N_1_OUTUBRO_ACUM;
    var IND_VN_ANO_N_1_DEZEMBRO_ACUM = @Html.Raw((string.Format("{0:0}", @ViewData["IND_VN_ANO_N_1_DEZEMBRO"]))) + IND_VN_ANO_N_1_NOVEMBRO_ACUM;




    if(@ViewData["MES_ACUM_REAL"]<1){ var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_JANEIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_JANEIRO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO_ACUM/IND_VN_ANO_N_JANEIRO_ACUM*100; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_FEVEREIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_FEVEREIRO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO_ACUM/IND_VN_ANO_N_FEVEREIRO_ACUM*100; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_MARCO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_MARCO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_MARCO_ACUM/IND_VN_ANO_N_MARCO_ACUM*100; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_MARCO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_ABRIL_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_ABRIL_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL_ACUM/IND_VN_ANO_N_ABRIL_ACUM*100; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_ABRIL_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_MAIO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_MAIO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_MAIO_ACUM/IND_VN_ANO_N_MAIO_ACUM*100; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_MAIO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_JUNHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_JUNHO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO_ACUM/IND_VN_ANO_N_JUNHO_ACUM*100; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_JUNHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_JULHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_JULHO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_JULHO_ACUM/IND_VN_ANO_N_JULHO_ACUM*100; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_JULHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_AGOSTO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_AGOSTO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO_ACUM/IND_VN_ANO_N_AGOSTO_ACUM*100; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_SETEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_SETEMBRO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO_ACUM/IND_VN_ANO_N_SETEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_OUTUBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_OUTUBRO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO_ACUM/IND_VN_ANO_N_OUTUBRO_ACUM*100; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_NOVEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_NOVEMBRO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO_ACUM/IND_VN_ANO_N_NOVEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_DEZEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_DEZEMBRO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO_ACUM/IND_VN_ANO_N_DEZEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_DEZEMBRO_ACUM };



    if(@ViewData["MES_ACUM_REAL"]<1){ var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_JANEIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_JANEIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_JANEIRO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_1_JANEIRO_ACUM/IND_VN_ANO_N_1_JANEIRO_ACUM*100; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_JANEIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_FEVEREIRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_FEVEREIRO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_1_FEVEREIRO_ACUM/IND_VN_ANO_N_1_FEVEREIRO_ACUM*100; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_FEVEREIRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_MARCO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_MARCO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_MARCO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_1_MARCO_ACUM/IND_VN_ANO_N_1_MARCO_ACUM*100; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_MARCO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_ABRIL_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_ABRIL_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_ABRIL_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_1_ABRIL_ACUM/IND_VN_ANO_N_1_ABRIL_ACUM*100; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_ABRIL_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_MAIO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_MAIO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_MAIO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_1_MAIO_ACUM/IND_VN_ANO_N_1_MAIO_ACUM*100; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_MAIO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_JUNHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_JUNHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_JUNHO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_1_JUNHO_ACUM/IND_VN_ANO_N_1_JUNHO_ACUM*100; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_JUNHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_JULHO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_JULHO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_JULHO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_1_JULHO_ACUM/IND_VN_ANO_N_1_JULHO_ACUM*100; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_JULHO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_AGOSTO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_AGOSTO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_AGOSTO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_1_AGOSTO_ACUM/IND_VN_ANO_N_1_AGOSTO_ACUM*100; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_AGOSTO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_SETEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_SETEMBRO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_1_SETEMBRO_ACUM/IND_VN_ANO_N_1_SETEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_SETEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_OUTUBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_OUTUBRO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_1_OUTUBRO_ACUM/IND_VN_ANO_N_1_OUTUBRO_ACUM*100; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_OUTUBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_NOVEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_NOVEMBRO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_1_NOVEMBRO_ACUM/IND_VN_ANO_N_1_NOVEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_NOVEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_DEZEMBRO_ACUM = 'nd'; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_DEZEMBRO_ACUM= GASTOS_PESSOAL_OUTROS_ANO_N_1_DEZEMBRO_ACUM/IND_VN_ANO_N_1_DEZEMBRO_ACUM*100; var PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_DEZEMBRO_ACUM_MAX_MIN = PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_DEZEMBRO_ACUM };



    if(@ViewData["MES_ACUM_REAL"]<1){ var VAR_VN_ANO_N_JANEIRO_ACUM = 'nd'; var VAR_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JANEIRO_ACUM= ((IND_VN_ANO_N_JANEIRO_ACUM-IND_VN_ANO_N_1_JANEIRO_ACUM)/Math.abs(IND_VN_ANO_N_1_JANEIRO_ACUM))*100; var VAR_VN_ANO_N_JANEIRO_ACUM_MAX_MIN = VAR_VN_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var VAR_VN_ANO_N_FEVEREIRO_ACUM = 'nd'; var VAR_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_FEVEREIRO_ACUM= ((IND_VN_ANO_N_FEVEREIRO_ACUM-IND_VN_ANO_N_1_FEVEREIRO_ACUM)/Math.abs(IND_VN_ANO_N_1_FEVEREIRO_ACUM))*100; var VAR_VN_ANO_N_FEVEREIRO_ACUM_MAX_MIN = VAR_VN_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var VAR_VN_ANO_N_MARCO_ACUM = 'nd'; var VAR_VN_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_MARCO_ACUM= ((IND_VN_ANO_N_MARCO_ACUM-IND_VN_ANO_N_1_MARCO_ACUM)/Math.abs(IND_VN_ANO_N_1_MARCO_ACUM))*100; var VAR_VN_ANO_N_MARCO_ACUM_MAX_MIN = VAR_VN_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var VAR_VN_ANO_N_ABRIL_ACUM = 'nd'; var VAR_VN_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_ABRIL_ACUM= ((IND_VN_ANO_N_ABRIL_ACUM-IND_VN_ANO_N_1_ABRIL_ACUM)/Math.abs(IND_VN_ANO_N_1_ABRIL_ACUM))*100; var VAR_VN_ANO_N_ABRIL_ACUM_MAX_MIN = VAR_VN_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var VAR_VN_ANO_N_MAIO_ACUM = 'nd'; var VAR_VN_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_MAIO_ACUM= ((IND_VN_ANO_N_MAIO_ACUM-IND_VN_ANO_N_1_MAIO_ACUM)/Math.abs(IND_VN_ANO_N_1_MAIO_ACUM))*100; var VAR_VN_ANO_N_MAIO_ACUM_MAX_MIN = VAR_VN_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var VAR_VN_ANO_N_JUNHO_ACUM = 'nd'; var VAR_VN_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JUNHO_ACUM= ((IND_VN_ANO_N_JUNHO_ACUM-IND_VN_ANO_N_1_JUNHO_ACUM)/Math.abs(IND_VN_ANO_N_1_JUNHO_ACUM))*100; var VAR_VN_ANO_N_JUNHO_ACUM_MAX_MIN = VAR_VN_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var VAR_VN_ANO_N_JULHO_ACUM = 'nd'; var VAR_VN_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_JULHO_ACUM= ((IND_VN_ANO_N_JULHO_ACUM-IND_VN_ANO_N_1_JULHO_ACUM)/Math.abs(IND_VN_ANO_N_1_JULHO_ACUM))*100; var VAR_VN_ANO_N_JULHO_ACUM_MAX_MIN = VAR_VN_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var VAR_VN_ANO_N_AGOSTO_ACUM = 'nd'; var VAR_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_AGOSTO_ACUM= ((IND_VN_ANO_N_AGOSTO_ACUM-IND_VN_ANO_N_1_AGOSTO_ACUM)/Math.abs(IND_VN_ANO_N_1_AGOSTO_ACUM))*100; var VAR_VN_ANO_N_AGOSTO_ACUM_MAX_MIN = VAR_VN_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var VAR_VN_ANO_N_SETEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_SETEMBRO_ACUM= ((IND_VN_ANO_N_SETEMBRO_ACUM-IND_VN_ANO_N_1_SETEMBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_SETEMBRO_ACUM))*100; var VAR_VN_ANO_N_SETEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var VAR_VN_ANO_N_OUTUBRO_ACUM = 'nd'; var VAR_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_OUTUBRO_ACUM= ((IND_VN_ANO_N_OUTUBRO_ACUM-IND_VN_ANO_N_1_OUTUBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_OUTUBRO_ACUM))*100; var VAR_VN_ANO_N_OUTUBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var VAR_VN_ANO_N_NOVEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_NOVEMBRO_ACUM= ((IND_VN_ANO_N_NOVEMBRO_ACUM-IND_VN_ANO_N_1_NOVEMBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_NOVEMBRO_ACUM))*100; var VAR_VN_ANO_N_NOVEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var VAR_VN_ANO_N_DEZEMBRO_ACUM = 'nd'; var VAR_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_VN_ANO_N_DEZEMBRO_ACUM= ((IND_VN_ANO_N_DEZEMBRO_ACUM-IND_VN_ANO_N_1_DEZEMBRO_ACUM)/Math.abs(IND_VN_ANO_N_1_DEZEMBRO_ACUM))*100; var VAR_VN_ANO_N_DEZEMBRO_ACUM_MAX_MIN = VAR_VN_ANO_N_DEZEMBRO_ACUM };



    if(@ViewData["MES_ACUM_REAL"]<1){ var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO_ACUM= ((GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO_ACUM-GASTOS_PESSOAL_OUTROS_ANO_N_1_JANEIRO_ACUM)/Math.abs(GASTOS_PESSOAL_OUTROS_ANO_N_1_JANEIRO_ACUM))*100; var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<2){ var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO_ACUM= ((GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO_ACUM-GASTOS_PESSOAL_OUTROS_ANO_N_1_FEVEREIRO_ACUM)/Math.abs(GASTOS_PESSOAL_OUTROS_ANO_N_1_FEVEREIRO_ACUM))*100; var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<3){ var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_MARCO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_MARCO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_MARCO_ACUM= ((GASTOS_PESSOAL_OUTROS_ANO_N_MARCO_ACUM-GASTOS_PESSOAL_OUTROS_ANO_N_1_MARCO_ACUM)/Math.abs(GASTOS_PESSOAL_OUTROS_ANO_N_1_MARCO_ACUM))*100; var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_MARCO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_OUTROS_ANO_N_MARCO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<4){ var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL_ACUM= ((GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL_ACUM-GASTOS_PESSOAL_OUTROS_ANO_N_1_ABRIL_ACUM)/Math.abs(GASTOS_PESSOAL_OUTROS_ANO_N_1_ABRIL_ACUM))*100; var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<5){ var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_MAIO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_MAIO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_MAIO_ACUM= ((GASTOS_PESSOAL_OUTROS_ANO_N_MAIO_ACUM-GASTOS_PESSOAL_OUTROS_ANO_N_1_MAIO_ACUM)/Math.abs(GASTOS_PESSOAL_OUTROS_ANO_N_1_MAIO_ACUM))*100; var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_MAIO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_OUTROS_ANO_N_MAIO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<6){ var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO_ACUM= ((GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO_ACUM-GASTOS_PESSOAL_OUTROS_ANO_N_1_JUNHO_ACUM)/Math.abs(GASTOS_PESSOAL_OUTROS_ANO_N_1_JUNHO_ACUM))*100; var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<7){ var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_JULHO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_JULHO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_JULHO_ACUM= ((GASTOS_PESSOAL_OUTROS_ANO_N_JULHO_ACUM-GASTOS_PESSOAL_OUTROS_ANO_N_1_JULHO_ACUM)/Math.abs(GASTOS_PESSOAL_OUTROS_ANO_N_1_JULHO_ACUM))*100; var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_JULHO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_OUTROS_ANO_N_JULHO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<8){ var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO_ACUM= ((GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO_ACUM-GASTOS_PESSOAL_OUTROS_ANO_N_1_AGOSTO_ACUM)/Math.abs(GASTOS_PESSOAL_OUTROS_ANO_N_1_AGOSTO_ACUM))*100; var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<9){ var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO_ACUM= ((GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO_ACUM-GASTOS_PESSOAL_OUTROS_ANO_N_1_SETEMBRO_ACUM)/Math.abs(GASTOS_PESSOAL_OUTROS_ANO_N_1_SETEMBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<10){ var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO_ACUM= ((GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO_ACUM-GASTOS_PESSOAL_OUTROS_ANO_N_1_OUTUBRO_ACUM)/Math.abs(GASTOS_PESSOAL_OUTROS_ANO_N_1_OUTUBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<11){ var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO_ACUM= ((GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO_ACUM-GASTOS_PESSOAL_OUTROS_ANO_N_1_NOVEMBRO_ACUM)/Math.abs(GASTOS_PESSOAL_OUTROS_ANO_N_1_NOVEMBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO_ACUM };
    if(@ViewData["MES_ACUM_REAL"]<12){ var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO_ACUM = 'nd'; var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO_ACUM_MAX_MIN = 0;  } else { var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO_ACUM= ((GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO_ACUM-GASTOS_PESSOAL_OUTROS_ANO_N_1_DEZEMBRO_ACUM)/Math.abs(GASTOS_PESSOAL_OUTROS_ANO_N_1_DEZEMBRO_ACUM))*100; var VAR_GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO_ACUM_MAX_MIN = VAR_GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO_ACUM };

    if( PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_JANEIRO_ACUM > PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_JANEIRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO_ACUM=PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_JANEIRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO_ACUM=PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_JANEIRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_FEVEREIRO_ACUM > PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_FEVEREIRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO_ACUM=PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_FEVEREIRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO_ACUM=PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_FEVEREIRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_MARCO_ACUM > PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_MARCO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_MARCO_ACUM=PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_MARCO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_MARCO_ACUM=PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_MARCO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_ABRIL_ACUM > PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_ABRIL_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL_ACUM=PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_ABRIL_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL_ACUM=PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_ABRIL_ACUM ; }
    if( PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_MAIO_ACUM > PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_MAIO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_MAIO_ACUM=PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_MAIO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_MAIO_ACUM=PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_MAIO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_JUNHO_ACUM > PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_JUNHO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO_ACUM=PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_JUNHO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO_ACUM=PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_JUNHO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_JULHO_ACUM > PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_JULHO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_JULHO_ACUM=PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_JULHO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_JULHO_ACUM=PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_JULHO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_AGOSTO_ACUM > PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_AGOSTO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO_ACUM=PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_AGOSTO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO_ACUM=PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_AGOSTO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_SETEMBRO_ACUM > PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_SETEMBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO_ACUM=PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_SETEMBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO_ACUM=PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_SETEMBRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_OUTUBRO_ACUM > PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_OUTUBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO_ACUM=PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_OUTUBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO_ACUM=PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_OUTUBRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_NOVEMBRO_ACUM > PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_NOVEMBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO_ACUM=PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_NOVEMBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO_ACUM=PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_NOVEMBRO_ACUM ; }
    if( PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_DEZEMBRO_ACUM > PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_DEZEMBRO_ACUM) { var  INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO_ACUM=PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_DEZEMBRO_ACUM ; } else { var  INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO_ACUM=PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_DEZEMBRO_ACUM ; }



    var fillBetweenLinesPlugin = {
        afterDatasetsDraw: function (chart) {
            var ctx = chart.chart.ctx;
            var xaxis = chart.scales['x-axis-0'];
            var yaxis = chart.scales['y-axis-0'];
            var datasets = chart.data.datasets;
            ctx.save();

            for (var d = 0; d < datasets.length; d++) {
                var dataset = datasets[d];
                if (dataset.fillBetweenSet == undefined) {
                    continue;
                }

                // get meta for both data sets
                var meta1 = chart.getDatasetMeta(d);
                var meta2 = chart.getDatasetMeta(dataset.fillBetweenSet);

                // do not draw fill if one of the datasets is hidden
                if (meta1.hidden || meta2.hidden) continue;

                // create fill areas in pairs
                for (var p = 0; p < meta1.data.length-1;p++) {
                    // if null skip
                    if (dataset.data[p] == null || dataset.data[p+1] == null) continue;

                    ctx.beginPath();

                    // trace line 1
                    var curr = meta1.data[p];
                    var next = meta1.data[p+1];
                    ctx.moveTo(curr._view.x, curr._view.y);
                    ctx.lineTo(curr._view.x, curr._view.y);
                    if (curr._view.steppedLine === true) {
                        ctx.lineTo(next._view.x, curr._view.y);
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else if (next._view.tension === 0) {
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else {
                        ctx.bezierCurveTo(
                          curr._view.controlPointNextX,
                          curr._view.controlPointNextY,
                          next._view.controlPointPreviousX,
                          next._view.controlPointPreviousY,
                          next._view.x,
                          next._view.y
                        );
                    }

                    // connect dataset1 to dataset2
                    var curr = meta2.data[p+1];
                    var next = meta2.data[p];
                    ctx.lineTo(curr._view.x, curr._view.y);

                    // trace BACKWORDS set2 to complete the box
                    if (curr._view.steppedLine === true) {
                        ctx.lineTo(curr._view.x, next._view.y);
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else if (next._view.tension === 0) {
                        ctx.lineTo(next._view.x, next._view.y);
                    }
                    else {
                        // reverse bezier
                        ctx.bezierCurveTo(
                          curr._view.controlPointPreviousX,
                          curr._view.controlPointPreviousY,
                          next._view.controlPointNextX,
                          next._view.controlPointNextY,
                          next._view.x,
                          next._view.y
                        );
                    }

                    // close the loop and fill with shading
                    ctx.closePath();
                    ctx.fillStyle = dataset.fillBetweenColor || "rgba(0,0,0,0.1)";
                    ctx.fill();
                } // end for p loop
            }
        } // end afterDatasetsDraw
    }; // end fillBetweenLinesPlugin

    Chart.pluginService.register(fillBetweenLinesPlugin);



    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_015=document.getElementById('GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_015').getContext('2d');

    var GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_015=new Chart(GRAFICO_GASTOS_PESSOAL_RESULT_MENSAL_COMP_015, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: ['Jan', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
            datasets: [
               {
                   label:  'Peso Cons. Repar.vsVN(ac) ' + ANO_VERSAO_REAL_,
                   yAxisID: 'A',
                   //backgroundColor: 'rgb(201, 10, 10)',
                   borderColor: 'rgb(250 , 83 , 0)',
                   //borderColor: "#F00",
                   fill: false,
                   steppedLine: false,
                   tension: 0.5,
                   fillBetweenSet: 1,
                   fillBetweenColor: "rgba(0, 221, 0, 0.1)",
                   data: [
                   PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_JANEIRO_ACUM,
                   PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_FEVEREIRO_ACUM,
                   PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_MARCO_ACUM,
                   PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_ABRIL_ACUM,
                   PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_MAIO_ACUM,
                   PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_JUNHO_ACUM,
                   PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_JULHO_ACUM,
                   PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_AGOSTO_ACUM,
                   PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_SETEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_OUTUBRO_ACUM,
                   PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_NOVEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_DEZEMBRO_ACUM,

                   ],
                   type: 'line'


               },
                {
                    label: 'Peso Cons. Repar.vsVN(ac) ' + ANO_VERSAO_ANTE_,
                    yAxisID: 'A',
                    //backgroundColor: 'rgb(17, 121, 240)',
                    borderColor: 'rgb(0,221,0)',
                    //borderColor: "#00F",
                    fill: false,
                    steppedLine: false,
                    tension: 0.5,
                    data: [
                   PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_JANEIRO_ACUM,
                   PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_FEVEREIRO_ACUM,
                   PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_MARCO_ACUM,
                   PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_ABRIL_ACUM,
                   PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_MAIO_ACUM,
                   PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_JUNHO_ACUM,
                   PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_JULHO_ACUM,
                   PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_AGOSTO_ACUM,
                   PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_SETEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_OUTUBRO_ACUM,
                   PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_NOVEMBRO_ACUM,
                   PESO_GASTOS_PESSOAL_OUTROS_VN_ANO_N_1_DEZEMBRO_ACUM,
                    ],
                    type: 'line'
                },
    {
        label: 'Ineficiência',
        yAxisID: 'A',
        backgroundColor: "rgba(255, 0, 0, 0.2)",
        borderColor: 'rgba(255, 255, 255, 0.1)',
        //borderColor: "#0D0",
        fill: false,
        steppedLine: false,
        tension: 0.5,
        fillBetweenSet: 1,
        fillBetweenColor: "rgba(255, 0, 0, 0.2)",
        data: [
    INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_JANEIRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_FEVEREIRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_MARCO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_ABRIL_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_MAIO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_JUNHO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_JULHO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_AGOSTO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_SETEMBRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_OUTUBRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_NOVEMBRO_ACUM,
    INEFICIENCIA_GASTOS_PESSOAL_OUTROS_ANO_N_DEZEMBRO_ACUM,
        ],
        type: 'line'
    },

            ]
        },

        // Configuration options go here

        options: {
            title: {
                display: false,
                text: 'FSE_Cons. Repar. COMP',
                fontStyle: 'bold',
                fontSize: 8
            },



            tooltips: {
                callbacks: {
                    // this callback is used to create the tooltip label
                    label: function(tooltipItem, data) {
                        // get the data label and data value to display
                        // convert the data value to local string so it uses a comma seperated number
                        var dataLabel = data.labels[tooltipItem.index];
                        var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].toLocaleString();

                        // make this isn't a multi-line label (e.g. [["label 1 - line 1, "line 2, ], [etc...]])
                        if (Chart.helpers.isArray(dataLabel)) {
                            // show value on first line of multiline label
                            // need to clone because we are changing the value
                            dataLabel = dataLabel.slice();
                            dataLabel[0] += value;
                        } else {
                            dataLabel += value;
                        }

                        // return the text to display on the tooltip
                        return dataLabel;
                    }
                }
            },


            scales: {
                yAxes: [
                                        {    id: 'A',
                                            type: 'linear',
                                            position: 'left',
                                            ticks: {
                                                //min:  Math.round(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_min_princ__,0),
                                                //max:  Math.round(GASTOS_PESSOAL_OUTROS_Mensal_Eixo_max_princ__,0),
                                                beginAtZero: false,
                                                callback: function(value, index, values) {
                                                    return value.toLocaleString()+ "%";
                                                }
                                            }
                                        },







                ]
            }
        },

    });

@*</script>*@









             @*---------------------------------MONSTAR/OCULTAR LINHAS DE CONFIGURAÇÃO DE INTERVALOS DE MESES DA TABELA----------------------------------------------------------*@
            var grid_mes_ini_ano_n = document.getElementById("grid_mes_ini_ano_n");
            var grid_mes_ini_ano_n_1 = document.getElementById("grid_mes_ini_ano_n-1");
            var grid_mes_fin_ano_n = document.getElementById("grid_mes_fin_ano_n");
            var grid_mes_fin_ano_n_1 = document.getElementById("grid_mes_fin_ano_n-1");
            var grid_mes_acum_ano_n = document.getElementById("grid_mes_acum_ano_n");
            var grid_mes_acum_ano_n_1 = document.getElementById("grid_mes_acum_ano_n-1");

            $(".oculta_na_impressao").hide();
            $(function () {
                $("#Mostrar").click(function () {
                    //$("#grid00").show();
                    if (userAgent.search(/(android|avantgo|blackberry|bolt|boost|cricket|docomo|fone|hiptop|mini|mobi|palm|phone|pie|tablet|up\.browser|up\.link|webos|wos)/i) != -1) {
                        if ($("#GASTOS_PESSOAL_MENSAL_COMP_wrapper tr.oculta_na_impressao ").is(":visible") == false) { $("#GASTOS_PESSOAL_MENSAL_COMP_wrapper tr.oculta_na_impressao").show(); $("#GASTOS_PESSOAL_MENSAL_COMP tr.oculta_na_impressao").hide(); } else { $("#GASTOS_PESSOAL_MENSAL_COMP_wrapper tr.oculta_na_impressao").hide(); };

                        var linha_1 = $(".dataTables_scrollHeadInner").html().replace("height: 0px; display: table-row;", "display: table-row;");
                        $(".dataTables_scrollHeadInner").html(linha_1);
                        var linha_2 = $(".DTFC_LeftHeadWrapper").html().replace("height: 0px; display: table-row;", "display: table-row;");
                        $(".DTFC_LeftHeadWrapper").html(linha_2);
                        var linha_1_celula = $(".dataTables_scrollHeadInner").html().replace("height: 0px; display: table-row;", "display: table-row;");
                        $(".dataTables_scrollHeadInner").html(linha_1_celula);
                        var linha_2_celula = $(".DTFC_LeftHeadWrapper").html().replace("height: 0px; display: table-row;", "display: table-row;");
                        $(".DTFC_LeftHeadWrapper").html(linha_2_celula);



                    } else { if ($("#GASTOS_PESSOAL_MENSAL_COMP_wrapper tr.oculta_na_impressao ").is(":visible") == false) { $("#GASTOS_PESSOAL_MENSAL_COMP tr.oculta_na_impressao").show(); } else { $("#GASTOS_PESSOAL_MENSAL_COMP tr.oculta_na_impressao").hide(); }; }
                    if ($("#GASTOS_PESSOAL_MENSAL_COMP_wrapper").find("#grid_mes_ini_ano_n_td").is(':empty') == true) {
                        $("#GASTOS_PESSOAL_MENSAL_COMP_wrapper").find("#grid_mes_ini_ano_n_td").html(grid_mes_ini_ano_n);
                        $("#GASTOS_PESSOAL_MENSAL_COMP_wrapper").find("#grid_mes_ini_ano_n-1_td").html(grid_mes_ini_ano_n_1);
                        $("#GASTOS_PESSOAL_MENSAL_COMP_wrapper").find("#grid_mes_fin_ano_n_td").html(grid_mes_fin_ano_n);
                        $("#GASTOS_PESSOAL_MENSAL_COMP_wrapper").find("#grid_mes_fin_ano_n-1_td").html(grid_mes_fin_ano_n_1);
                        $("#GASTOS_PESSOAL_MENSAL_COMP_wrapper").find("#grid_mes_acum_ano_n_td").html(grid_mes_acum_ano_n);
                        $("#GASTOS_PESSOAL_MENSAL_COMP_wrapper").find("#grid_mes_acum_ano_n-1_td").html(grid_mes_acum_ano_n_1);
                        $("#GASTOS_PESSOAL_MENSAL_COMP_wrapper div.oculta_na_impressao_").show();
                    }

                });

                $("div.oculta_na_impressao_").hide();





            });



           @*------------------------------OCUTO CABEÇALHOS DE GRELHA-------------------------------------------------------------*@
            //$("#grid th").find('"a[href*=' + "'" + "ID" + "&'" + ']"').parent().addClass('id');
            //$("#grid th").find('"a[href*=' + "'" + "id_camp_calc" + "&'" + ']"').parent().addClass('id_camp_calc');
            //$("#grid th").find('"a[href*=' + "'" + "desc_camp_calc" + "&'" + ']"').parent().addClass('desc_camp_calc');
            ////$("#grid th").find('"a[href*=' + "'" + "campocalc_resultado" + "&'" + ']"').parent().addClass('campocalc_resultado');

            //$("#grid ").find(".id").hide();
            //$("#grid ").find(".id_camp_calc").hide();
            //$("#grid ").find(".desc_camp_calc").hide();
            //var alt_Valor_da_Variavel = $("#grid th").parent().html().replace('Valor da Variavel', 'Mês');
            //$("#grid th").parent().html(alt_Valor_da_Variavel)

            //--------------------------------TRATO os CAMPOS de SELECCAO DO MÊS--------------------------


            //$(" .campocalc_resultado ").click(function () {

            //    //alert("teste");
            //    if ($(this).children().attr('class') != "input") {
            //        var id = $(this).parent().find(".id").html();
            //        var idconteudoOriginal = $(this).parent().parent().parent().parent().parent().attr('id');
            //        //var findidconteudoOriginal = '.' + idconteudoOriginal + '';


            //        var conteudoOriginal = $(this).text();



            //        var ReplaceHrefID = $("#GRAVAROPER_DIRXX form").html();



            //        $(this).html("<input class='input' value='" + conteudoOriginal + "'/>");
            //        $(this).children().first().focus();

            //    }


            //    // NOTA TA: Keypress significa que a instrução é cumprida quando o utilizador faz "enter"
            //    $(this).children().first().keypress(function (e) {
            //        if (e.which == 13) {

            //            if ($(this).parent().parent().parent().parent().find('.GRAVAR').text() == "") {
            //                $(this).parent().parent().parent().parent().prepend(ReplaceHrefID);
            //            }
            //            else { $(this).parent().parent().parent().parent().find('.GRAVAR').html(ReplaceHrefID) }


            //            //NOTA TA: Aqui re-faço a href do botão com todos os campos preenchidos de origem
            //            var ValorInicial_id_camp = id;
            //            var ReplaceHref_id_camp = $(this).parent().parent().parent().parent().find('.GRAVAR').html().replace('id_camp=id_camp', 'id_camp' + '=' + ValorInicial_id_camp);
            //            $(this).parent().parent().parent().parent().find('.GRAVAR').html(ReplaceHref_id_camp);


            //            var hrefalterar1 = $(this).parent().parent().parent().parent().find('.GRAVAR').html();

            //            var valor = $(this).val()
            //            if ($(this).val() == "" ||  $(this).val() <= 0 || $(this).val() >=13 || valor != parseInt(valor, 10)) {
            //                var novoConteudo = conteudoOriginal;
            //                alert("Por favor, Insira um Valor de 1 a 12.")
            //            }
            //            else {
            //                var novoConteudo = $(this).val();
            //            }




            //            $(this).parent().text(novoConteudo);
            //            $(this).parent().removeClass("celulaEmEdicao");


            //            var ReplaceHref1 = hrefalterar1.replace('campocalc_resultado=campocalc_resultado', 'campocalc_resultado' + '=' + novoConteudo);

            //            $('#' + idconteudoOriginal).find('.GRAVAR').html(ReplaceHref1);


            //            //-------------------INICIO: ACRESCENTEI para evitar passo debotão GRAVAR----
            //            var href_alt = document.querySelector('#' + idconteudoOriginal+ ' .GRAVAR a').href
            //            var href_alt_ = href_alt.replace('"','').replace('amp;','').replace('amp;','')

            //            var x = document.getElementsByClassName("GRAVAR");
            //            var i;
            //            for (i = 0; i < x.length; i++) {
            //                x[i].style.display = "none";

            //            }

            //            //alert(ReplaceHref1);

            //            window.location.href = href_alt_

            //            //-------------------FIM: ACRESCENTEI para evitar passo debotão GRAVAR----
            //                              }

            //    });


            //})
             @*--------------------------Aqui trato o Botão para configuração do Campo-----------------------------------------------------------------*@




            $(".webgrid-table td").click(function () {
                var idconteudoOriginal = $(this).attr('itemid');
                var versaoconteudoOriginal = $(this).attr('itemref');

                 //alert(idconteudoOriginal);
                if (typeof idconteudoOriginal === "undefined")
             { }
             else {
                    var ReplaceHrefID = $("#CONFIGURARXX form").html().replace('id_camp_calc=id_camp_calc', 'id_camp_calc' + '=' + idconteudoOriginal).replace('versao=versao', 'versao' + '=' + versaoconteudoOriginal);
                    if ($(this).find('.CONFIGURAR_CAMPO').text() == "") {
                        $(this).prepend(ReplaceHrefID);
             }
             }

                 //alert($(this).find('.CONFIGURAR_CAMPO').text());
             })

        })


            //------------------ NOTA TA: INICIO DE TRATAMENTO DE TABELA COM DATATABLE-------------------


            var userAgent = navigator.userAgent.toLowerCase();
            if (userAgent.search(/(android|avantgo|blackberry|bolt|boost|cricket|docomo|fone|hiptop|mini|mobi|palm|phone|pie|tablet|up\.browser|up\.link|webos|wos)/i) != -1) {
                var table = $('#GASTOS_PESSOAL_MENSAL_COMP').DataTable({
                    aaSorting: [],
                    columnDefs: [
                      { orderable: false, targets: '_all' }
                    ],
                    scrollY: "800px",
                    scrollX: true,
                    scrollCollapse: true,
                    paging: false,

                    fixedColumns: {
                        leftColumns: 1

                    },
                    buttons: [
                            'copy', 'csv', 'print',
                     {
                         extend: 'pdfHtml5',
                         orientation: 'landscape',
                         pageSize: 'LEGAL'
                     },

                    {
                        extend: 'excelHtml5',
                        customize: function (xlsx) {
                            var sheet = xlsx.xl.worksheets['sheet1.xml'];
                            //nota ta: exemplo de como pintar coluna a melhorar
                            //$('row c[r^="A"]', sheet).each( function () {
                            // $(this).attr( 's', '15' );});
                        }
                    }
                    ],

                });

        
                $('#btnExport1').attr('style', 'display:block');

            }

                //--------------NOTA TA: SE NÃO FOR MOBILE DOU UM TRATENTO DIFERENTE-------


            else {
                var table = $('#GASTOS_PESSOAL_MENSAL_COMP').DataTable({
                    aaSorting: [],
                    dom: 'Bfrtip',
                    columnDefs: [
                    { orderable: false, targets: '_all' }
                    ],
                    paging: false,
                    responsive: false,
                    fixedHeader: true,

                    // scrollY:        "800",
                    // scrollX:        true,
                    //scrollCollapse: true,
                    //paging:         false,
                    //fixedColumns:   {
                    //    leftColumns: 1,
                    //    rightColumns: 1
                    //},





                    buttons: [
                        'copy', 'csv', 'print',
                    {
                        extend: 'pdfHtml5',
                        orientation: 'landscape',
                        pageSize: 'LEGAL'
                    },

                    {
                        extend: 'excelHtml5',
                        customize: function (xlsx) {
                            var sheet = xlsx.xl.worksheets['sheet1.xml'];
                            //nota ta: exemplo de como pintar coluna a melhorar
                            //$('row c[r^="A"]', sheet).each( function () {
                            // $(this).attr( 's', '15' );});
                        }
                    }
                    ],



                });

                //NOTA TA: AQUI DEVERIA CONSEGUIR FIXAR O HEADER, MAS NÃO ESTOU A CONSEGUIR... A MELHORAR
                //new $.fn.dataTable.FixedHeader(table);
            }

            $(".DTFC_LeftBodyWrapper").css("top", "10px");
            $('button').addClass('btn-blue');





            //------------------ NOTA TA: FIM DE TRATAMENTO DE TABELA COM DATATABLE-------------------



    </script>


    @*-----------------------------NOTA TA: INICIO DE EXTRAIR PARA EXCEL E HTML ---------------------------------------------------------*@

    <script type="text/javascript">
            function fnExcelReport(table, name) {
                var table1 = '#' + table
                var ccs_style = $("#ccs_style").html();
                var styletabela = $(table1).attr("class");
                var indexOf_Ini_styletabela = $("#ccs_style").html().indexOf(styletabela)
                var indexOf_Fim_styletabela = ccs_style.substring(indexOf_Ini_styletabela, 999999999999).indexOf("}");
                var ccs_style_tabela = ccs_style.substring(indexOf_Ini_styletabela, 999999999999).substring(0, indexOf_Fim_styletabela).replace("{", "").replace(styletabela, "");


                var tab_text = "<table style=" + "'" + ccs_style_tabela + "'" + "><tr>";
                var textRange; var j = 0; var i = 0;
                tab = document.getElementById(table); // id of table



                for (j = 0 ; j < tab.rows.length ; j++) {
                    var tab_rows = tab.rows[j].innerHTML;
                    for (i = 0 ; i < tab.rows[j].cells.length ; i++) {

                        var texto_linha = tab_rows;
                        var style_celula_ini = texto_linha.indexOf('class="');
                        var style_celula_fim = texto_linha.substring(style_celula_ini, 999999999999).replace('class="', '').indexOf('"');
                        var style_celula = texto_linha.substring(style_celula_ini, 999999999999).replace('class="', '').substring(0, style_celula_fim);

                        var indexOf_Ini_styletabela = $("#ccs_style").html().indexOf(style_celula)
                        var indexOf_Fim_styletabela = ccs_style.substring(indexOf_Ini_styletabela, 999999999999).indexOf("}");
                        var ccs_style_tabela = ccs_style.substring(indexOf_Ini_styletabela, 999999999999).substring(0, indexOf_Fim_styletabela).replace("{", "").replace(style_celula, "");

                        tab_rows = tab_rows.replace('class="' + style_celula + '"', 'style="' + ccs_style_tabela + '"')

                    }

                    tab_text = tab_text + tab_rows + "</tr>";
                    //tab_text=tab_text+"</tr>";
                }

                tab_text = tab_text + "</table>";
                tab_text = tab_text.split('&nbsp;').join('.');
                tab_text = tab_text.replace(/<A[^>]*>|<\/A>/g, "");//remove if u want links in your table
                tab_text = tab_text.replace(/<img[^>]*>/gi, ""); // remove if u want images in your table
                tab_text = tab_text.replace(/<input[^>]*>|<\/input>/gi, ""); // reomves input params

                var ua = window.navigator.userAgent;
                var msie = ua.indexOf("MSIE ");

                if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./))      // If Internet Explorer
                {
                    txtArea1.document.open("txt/html", "replace");
                    txtArea1.document.write(tab_text);
                    txtArea1.document.close();
                    txtArea1.focus();
                    sa = txtArea1.document.execCommand("SaveAs", true, "Transferir.xls");

                    return (sa);
                }
                else                 //other browser not tested on IE 11

                 sa = window.open('data:application/vnd.ms-excel,' + encodeURIComponent(tab_text));

                return (sa);


            }
    </script>

    @*-----------------------------NOTA TA: FIM DE EXTRAIR PARA EXCEL E HTML ---------------------------------------------------------*@
}


